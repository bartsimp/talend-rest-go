// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlanExecutionStatus Plan Execution info
//
// swagger:model PlanExecutionStatus
type PlanExecutionStatus struct {

	// Number of done executables
	// Example: 1
	DoneExecutableCount int32 `json:"doneExecutableCount,omitempty"`

	// Execution activity info
	DoneExecutableDetails []*JobExecutionStatus `json:"doneExecutableDetails"`

	// Job execution ID
	// Example: 7b2b122e-d6b8-42de-b0ba-fa2f0d36306e
	// Required: true
	ExecutionID *string `json:"executionId"`

	// Execution (detailed) status
	// Example: FINISHED
	// Required: true
	// Enum: [UNDEFINED STARTED FINISHED EXECUTION_FAILED EXECUTION_SUCCESS]
	ExecutionStatus *string `json:"executionStatus"`

	// End time of job execution (UTC)
	// Format: date-time
	FinishTimestamp strfmt.DateTime `json:"finishTimestamp,omitempty"`

	// Plan ID
	// Example: b91cf8b2-5dd1-4b18-915b-4c447cee5267
	// Required: true
	PlanID *string `json:"planId"`

	// Number of planned executables
	// Example: 2
	PlannedExecutableCount int32 `json:"plannedExecutableCount,omitempty"`

	// Start time of job execution (UTC)
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"startTimestamp"`

	// User who triggered or scheduled the execution
	// Example: fupton
	// Required: true
	UserID *string `json:"userId"`

	// Type of user who triggered or scheduled the execution
	// Example: HUMAN
	// Required: true
	// Enum: [HUMAN SERVICE]
	UserType *string `json:"userType"`
}

// Validate validates this plan execution status
func (m *PlanExecutionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDoneExecutableDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanExecutionStatus) validateDoneExecutableDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DoneExecutableDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.DoneExecutableDetails); i++ {
		if swag.IsZero(m.DoneExecutableDetails[i]) { // not required
			continue
		}

		if m.DoneExecutableDetails[i] != nil {
			if err := m.DoneExecutableDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("doneExecutableDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("doneExecutableDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlanExecutionStatus) validateExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("executionId", "body", m.ExecutionID); err != nil {
		return err
	}

	return nil
}

var planExecutionStatusTypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNDEFINED","STARTED","FINISHED","EXECUTION_FAILED","EXECUTION_SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		planExecutionStatusTypeExecutionStatusPropEnum = append(planExecutionStatusTypeExecutionStatusPropEnum, v)
	}
}

const (

	// PlanExecutionStatusExecutionStatusUNDEFINED captures enum value "UNDEFINED"
	PlanExecutionStatusExecutionStatusUNDEFINED string = "UNDEFINED"

	// PlanExecutionStatusExecutionStatusSTARTED captures enum value "STARTED"
	PlanExecutionStatusExecutionStatusSTARTED string = "STARTED"

	// PlanExecutionStatusExecutionStatusFINISHED captures enum value "FINISHED"
	PlanExecutionStatusExecutionStatusFINISHED string = "FINISHED"

	// PlanExecutionStatusExecutionStatusEXECUTIONFAILED captures enum value "EXECUTION_FAILED"
	PlanExecutionStatusExecutionStatusEXECUTIONFAILED string = "EXECUTION_FAILED"

	// PlanExecutionStatusExecutionStatusEXECUTIONSUCCESS captures enum value "EXECUTION_SUCCESS"
	PlanExecutionStatusExecutionStatusEXECUTIONSUCCESS string = "EXECUTION_SUCCESS"
)

// prop value enum
func (m *PlanExecutionStatus) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, planExecutionStatusTypeExecutionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PlanExecutionStatus) validateExecutionStatus(formats strfmt.Registry) error {

	if err := validate.Required("executionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionStatusEnum("executionStatus", "body", *m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

func (m *PlanExecutionStatus) validateFinishTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTimestamp", "body", "date-time", m.FinishTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PlanExecutionStatus) validatePlanID(formats strfmt.Registry) error {

	if err := validate.Required("planId", "body", m.PlanID); err != nil {
		return err
	}

	return nil
}

func (m *PlanExecutionStatus) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("startTimestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("startTimestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PlanExecutionStatus) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

var planExecutionStatusTypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		planExecutionStatusTypeUserTypePropEnum = append(planExecutionStatusTypeUserTypePropEnum, v)
	}
}

const (

	// PlanExecutionStatusUserTypeHUMAN captures enum value "HUMAN"
	PlanExecutionStatusUserTypeHUMAN string = "HUMAN"

	// PlanExecutionStatusUserTypeSERVICE captures enum value "SERVICE"
	PlanExecutionStatusUserTypeSERVICE string = "SERVICE"
)

// prop value enum
func (m *PlanExecutionStatus) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, planExecutionStatusTypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PlanExecutionStatus) validateUserType(formats strfmt.Registry) error {

	if err := validate.Required("userType", "body", m.UserType); err != nil {
		return err
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", *m.UserType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this plan execution status based on the context it is used
func (m *PlanExecutionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDoneExecutableDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanExecutionStatus) contextValidateDoneExecutableDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DoneExecutableDetails); i++ {

		if m.DoneExecutableDetails[i] != nil {
			if err := m.DoneExecutableDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("doneExecutableDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("doneExecutableDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanExecutionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanExecutionStatus) UnmarshalBinary(b []byte) error {
	var res PlanExecutionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
