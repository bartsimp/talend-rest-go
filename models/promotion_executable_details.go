// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PromotionExecutableDetails promotion executable details
//
// swagger:model PromotionExecutableDetails
type PromotionExecutableDetails struct {

	// Promotion description (not returned when querying a list of objects)
	// Example: promotion detail description
	Description string `json:"description,omitempty"`

	// Executable identifier
	// Example: 57f64991e4b0b689a64feed0
	// Required: true
	Executable *string `json:"executable"`

	// Executable name
	// Example: simple executable
	// Required: true
	Name *string `json:"name"`

	// Promotion Source Environment
	SourceEnvironment *EnvironmentInfo `json:"sourceEnvironment,omitempty"`

	// Promotion Target Environment
	TargetEnvironment *EnvironmentInfo `json:"targetEnvironment,omitempty"`
}

// Validate validates this promotion executable details
func (m *PromotionExecutableDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionExecutableDetails) validateExecutable(formats strfmt.Registry) error {

	if err := validate.Required("executable", "body", m.Executable); err != nil {
		return err
	}

	return nil
}

func (m *PromotionExecutableDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PromotionExecutableDetails) validateSourceEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceEnvironment) { // not required
		return nil
	}

	if m.SourceEnvironment != nil {
		if err := m.SourceEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEnvironment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *PromotionExecutableDetails) validateTargetEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetEnvironment) { // not required
		return nil
	}

	if m.TargetEnvironment != nil {
		if err := m.TargetEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEnvironment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEnvironment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this promotion executable details based on the context it is used
func (m *PromotionExecutableDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceEnvironment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetEnvironment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionExecutableDetails) contextValidateSourceEnvironment(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceEnvironment != nil {
		if err := m.SourceEnvironment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEnvironment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *PromotionExecutableDetails) contextValidateTargetEnvironment(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetEnvironment != nil {
		if err := m.TargetEnvironment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEnvironment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEnvironment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PromotionExecutableDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PromotionExecutableDetails) UnmarshalBinary(b []byte) error {
	var res PromotionExecutableDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
