// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StepExecutionDetails step execution details
//
// swagger:model StepExecutionDetails
type StepExecutionDetails struct {

	// done executable count
	DoneExecutableCount int32 `json:"doneExecutableCount,omitempty"`

	// done plan executable details
	DonePlanExecutableDetails []*PlanExecutionStatus `json:"donePlanExecutableDetails"`

	// done task executable details
	DoneTaskExecutableDetails []*JobExecutionStatus `json:"doneTaskExecutableDetails"`

	// execution Id
	ExecutionID string `json:"executionId,omitempty"`

	// execution status
	ExecutionStatus string `json:"executionStatus,omitempty"`

	// finish timestamp
	// Format: date-time
	FinishTimestamp strfmt.DateTime `json:"finishTimestamp,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// planned executable count
	PlannedExecutableCount int32 `json:"plannedExecutableCount,omitempty"`

	// start timestamp
	// Format: date-time
	StartTimestamp strfmt.DateTime `json:"startTimestamp,omitempty"`
}

// Validate validates this step execution details
func (m *StepExecutionDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDonePlanExecutableDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoneTaskExecutableDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StepExecutionDetails) validateDonePlanExecutableDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DonePlanExecutableDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.DonePlanExecutableDetails); i++ {
		if swag.IsZero(m.DonePlanExecutableDetails[i]) { // not required
			continue
		}

		if m.DonePlanExecutableDetails[i] != nil {
			if err := m.DonePlanExecutableDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("donePlanExecutableDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("donePlanExecutableDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StepExecutionDetails) validateDoneTaskExecutableDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DoneTaskExecutableDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.DoneTaskExecutableDetails); i++ {
		if swag.IsZero(m.DoneTaskExecutableDetails[i]) { // not required
			continue
		}

		if m.DoneTaskExecutableDetails[i] != nil {
			if err := m.DoneTaskExecutableDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("doneTaskExecutableDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("doneTaskExecutableDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StepExecutionDetails) validateFinishTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTimestamp", "body", "date-time", m.FinishTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StepExecutionDetails) validateStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("startTimestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this step execution details based on the context it is used
func (m *StepExecutionDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDonePlanExecutableDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDoneTaskExecutableDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StepExecutionDetails) contextValidateDonePlanExecutableDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DonePlanExecutableDetails); i++ {

		if m.DonePlanExecutableDetails[i] != nil {
			if err := m.DonePlanExecutableDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("donePlanExecutableDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("donePlanExecutableDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StepExecutionDetails) contextValidateDoneTaskExecutableDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DoneTaskExecutableDetails); i++ {

		if m.DoneTaskExecutableDetails[i] != nil {
			if err := m.DoneTaskExecutableDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("doneTaskExecutableDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("doneTaskExecutableDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StepExecutionDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StepExecutionDetails) UnmarshalBinary(b []byte) error {
	var res StepExecutionDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
