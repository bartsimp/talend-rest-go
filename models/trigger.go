// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trigger trigger
//
// swagger:model Trigger
type Trigger struct {

	// at days
	AtDays *DaySchedule `json:"atDays,omitempty"`

	// at times
	AtTimes *TimeSchedule `json:"atTimes,omitempty"`

	// cron expression - available from v2.6
	// Example: */5 12-14 * * ?
	CronExpression string `json:"cronExpression,omitempty"`

	// Interval between task/plan running in days/weeks/months, required only if type of schedule is not equal to 'ONCE')
	// Example: 1
	Interval int32 `json:"interval,omitempty"`

	// Date when the task should start to run/when the cron trigger is enabled
	// Example: 2019-09-25
	// Required: true
	StartDate *string `json:"startDate"`

	// Time zone for task schedule
	// Example: Europe/London
	// Required: true
	TimeZone *string `json:"timeZone"`

	// Type of schedule
	// Example: ONCE
	// Required: true
	// Enum: [ONCE DAILY WEEKLY MONTHLY WEBHOOK MANUAL CRON]
	Type *string `json:"type"`

	// webhook
	Webhook *Webhook `json:"webhook,omitempty"`
}

// Validate validates this trigger
func (m *Trigger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhook(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trigger) validateAtDays(formats strfmt.Registry) error {
	if swag.IsZero(m.AtDays) { // not required
		return nil
	}

	if m.AtDays != nil {
		if err := m.AtDays.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atDays")
			}
			return err
		}
	}

	return nil
}

func (m *Trigger) validateAtTimes(formats strfmt.Registry) error {
	if swag.IsZero(m.AtTimes) { // not required
		return nil
	}

	if m.AtTimes != nil {
		if err := m.AtTimes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atTimes")
			}
			return err
		}
	}

	return nil
}

func (m *Trigger) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	return nil
}

func (m *Trigger) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("timeZone", "body", m.TimeZone); err != nil {
		return err
	}

	return nil
}

var triggerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONCE","DAILY","WEEKLY","MONTHLY","WEBHOOK","MANUAL","CRON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		triggerTypeTypePropEnum = append(triggerTypeTypePropEnum, v)
	}
}

const (

	// TriggerTypeONCE captures enum value "ONCE"
	TriggerTypeONCE string = "ONCE"

	// TriggerTypeDAILY captures enum value "DAILY"
	TriggerTypeDAILY string = "DAILY"

	// TriggerTypeWEEKLY captures enum value "WEEKLY"
	TriggerTypeWEEKLY string = "WEEKLY"

	// TriggerTypeMONTHLY captures enum value "MONTHLY"
	TriggerTypeMONTHLY string = "MONTHLY"

	// TriggerTypeWEBHOOK captures enum value "WEBHOOK"
	TriggerTypeWEBHOOK string = "WEBHOOK"

	// TriggerTypeMANUAL captures enum value "MANUAL"
	TriggerTypeMANUAL string = "MANUAL"

	// TriggerTypeCRON captures enum value "CRON"
	TriggerTypeCRON string = "CRON"
)

// prop value enum
func (m *Trigger) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, triggerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Trigger) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Trigger) validateWebhook(formats strfmt.Registry) error {
	if swag.IsZero(m.Webhook) { // not required
		return nil
	}

	if m.Webhook != nil {
		if err := m.Webhook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this trigger based on the context it is used
func (m *Trigger) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAtDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAtTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trigger) contextValidateAtDays(ctx context.Context, formats strfmt.Registry) error {

	if m.AtDays != nil {
		if err := m.AtDays.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atDays")
			}
			return err
		}
	}

	return nil
}

func (m *Trigger) contextValidateAtTimes(ctx context.Context, formats strfmt.Registry) error {

	if m.AtTimes != nil {
		if err := m.AtTimes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atTimes")
			}
			return err
		}
	}

	return nil
}

func (m *Trigger) contextValidateWebhook(ctx context.Context, formats strfmt.Registry) error {

	if m.Webhook != nil {
		if err := m.Webhook.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trigger) UnmarshalBinary(b []byte) error {
	var res Trigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
