// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Step step
//
// swagger:model Step
type Step struct {

	// Expected status of successful step
	// Required: true
	// Enum: [ALL_SUCCEEDED AT_LEAST_ONE_SUCCEEDED]
	Condition *string `json:"condition"`

	// Handler of step errors
	HandlerOnFailure *StepErrorHandler `json:"handlerOnFailure,omitempty"`

	// Step id
	// Example: 9af64991e4b0b689a64feed0
	ID string `json:"id,omitempty"`

	// Step name
	// Example: Step 1
	// Required: true
	Name *string `json:"name"`

	// Description to rerun a plan execution from this step
	// Example: Clear the database for users
	Note string `json:"note,omitempty"`

	// List of step tasks
	// Example: ["5d5fc81f79bc197d2483a100","5d5fc81f79bc197d2483a101"]
	// Required: true
	TaskIds []string `json:"taskIds"`
}

// Validate validates this step
func (m *Step) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandlerOnFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stepTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL_SUCCEEDED","AT_LEAST_ONE_SUCCEEDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stepTypeConditionPropEnum = append(stepTypeConditionPropEnum, v)
	}
}

const (

	// StepConditionALLSUCCEEDED captures enum value "ALL_SUCCEEDED"
	StepConditionALLSUCCEEDED string = "ALL_SUCCEEDED"

	// StepConditionATLEASTONESUCCEEDED captures enum value "AT_LEAST_ONE_SUCCEEDED"
	StepConditionATLEASTONESUCCEEDED string = "AT_LEAST_ONE_SUCCEEDED"
)

// prop value enum
func (m *Step) validateConditionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stepTypeConditionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Step) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("condition", "body", m.Condition); err != nil {
		return err
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", *m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *Step) validateHandlerOnFailure(formats strfmt.Registry) error {
	if swag.IsZero(m.HandlerOnFailure) { // not required
		return nil
	}

	if m.HandlerOnFailure != nil {
		if err := m.HandlerOnFailure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handlerOnFailure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handlerOnFailure")
			}
			return err
		}
	}

	return nil
}

func (m *Step) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Step) validateTaskIds(formats strfmt.Registry) error {

	if err := validate.Required("taskIds", "body", m.TaskIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this step based on the context it is used
func (m *Step) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandlerOnFailure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Step) contextValidateHandlerOnFailure(ctx context.Context, formats strfmt.Registry) error {

	if m.HandlerOnFailure != nil {
		if err := m.HandlerOnFailure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handlerOnFailure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handlerOnFailure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Step) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Step) UnmarshalBinary(b []byte) error {
	var res Step
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
