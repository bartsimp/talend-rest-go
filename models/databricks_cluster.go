// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabricksCluster databricks cluster
//
// swagger:model DatabricksCluster
type DatabricksCluster struct {

	// New or existing cluster
	// Example: new
	// Required: true
	// Enum: [new old]
	Cluster *string `json:"cluster"`

	// ID of existing cluster. Required for 'old' cluster
	// Example: 132553
	ID string `json:"id,omitempty"`

	// Logs destination. Required for 'new' cluster
	// Example: dbfs:/cluster-logs
	// Required: true
	LogsDestination *string `json:"logsDestination"`

	// Node type ID. Required for 'new' cluster
	// Example: m4.large
	// Required: true
	NodeTypeID *string `json:"nodeTypeId"`

	// Databricks runtime version. Required for 'new' cluster
	// Example: 5.5.x-scala2.11
	SparkVersion string `json:"sparkVersion,omitempty"`

	// Number of workers. Required for 'new' cluster
	// Example: 2
	// Required: true
	WorkersNumber *int32 `json:"workersNumber"`
}

// Validate validates this databricks cluster
func (m *DatabricksCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogsDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkersNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var databricksClusterTypeClusterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["new","old"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databricksClusterTypeClusterPropEnum = append(databricksClusterTypeClusterPropEnum, v)
	}
}

const (

	// DatabricksClusterClusterNew captures enum value "new"
	DatabricksClusterClusterNew string = "new"

	// DatabricksClusterClusterOld captures enum value "old"
	DatabricksClusterClusterOld string = "old"
)

// prop value enum
func (m *DatabricksCluster) validateClusterEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, databricksClusterTypeClusterPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatabricksCluster) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	// value enum
	if err := m.validateClusterEnum("cluster", "body", *m.Cluster); err != nil {
		return err
	}

	return nil
}

func (m *DatabricksCluster) validateLogsDestination(formats strfmt.Registry) error {

	if err := validate.Required("logsDestination", "body", m.LogsDestination); err != nil {
		return err
	}

	return nil
}

func (m *DatabricksCluster) validateNodeTypeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeTypeId", "body", m.NodeTypeID); err != nil {
		return err
	}

	return nil
}

func (m *DatabricksCluster) validateWorkersNumber(formats strfmt.Registry) error {

	if err := validate.Required("workersNumber", "body", m.WorkersNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this databricks cluster based on context it is used
func (m *DatabricksCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatabricksCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabricksCluster) UnmarshalBinary(b []byte) error {
	var res DatabricksCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
