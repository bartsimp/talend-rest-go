// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Databrick databrick
//
// swagger:model Databrick
type Databrick struct {

	// Cloud provider
	// Example: AWS
	// Required: true
	// Enum: [AWS Azure]
	CloudProvider *string `json:"cloudProvider"`

	// Endpoint
	// Example: https://endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// DBFS library staging directory
	// Example: dbfs:/staging/
	// Required: true
	StagingLocation *string `json:"stagingLocation"`

	// Target definition
	// Required: true
	Target *DatabricksCluster `json:"target"`

	// Token (can also be provided in the Remote Engine configuration)
	// Example: 44e128a5
	Token string `json:"token,omitempty"`
}

// Validate validates this databrick
func (m *Databrick) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStagingLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var databrickTypeCloudProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","Azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databrickTypeCloudProviderPropEnum = append(databrickTypeCloudProviderPropEnum, v)
	}
}

const (

	// DatabrickCloudProviderAWS captures enum value "AWS"
	DatabrickCloudProviderAWS string = "AWS"

	// DatabrickCloudProviderAzure captures enum value "Azure"
	DatabrickCloudProviderAzure string = "Azure"
)

// prop value enum
func (m *Databrick) validateCloudProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, databrickTypeCloudProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Databrick) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloudProvider", "body", m.CloudProvider); err != nil {
		return err
	}

	// value enum
	if err := m.validateCloudProviderEnum("cloudProvider", "body", *m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *Databrick) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *Databrick) validateStagingLocation(formats strfmt.Registry) error {

	if err := validate.Required("stagingLocation", "body", m.StagingLocation); err != nil {
		return err
	}

	return nil
}

func (m *Databrick) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this databrick based on the context it is used
func (m *Databrick) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Databrick) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Databrick) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Databrick) UnmarshalBinary(b []byte) error {
	var res Databrick
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
