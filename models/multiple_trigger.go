// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MultipleTrigger multiple trigger
//
// swagger:model MultipleTrigger
type MultipleTrigger struct {

	// at days
	AtDays *DaySchedule `json:"atDays,omitempty"`

	// at times
	AtTimes *TimeSchedule `json:"atTimes,omitempty"`

	// cron expression - available from v2.6
	// Example: */5 12-14 * * ?
	CronExpression string `json:"cronExpression,omitempty"`

	// Interval between task/plan running in days/weeks/months, required only if type of schedule is not equal to 'ONCE')
	// Example: 1
	Interval int32 `json:"interval,omitempty"`

	// Name of the trigger
	// Example: Trigger_#1_Daily_at_6pm
	// Required: true
	Name *string `json:"name"`

	// Date when the task should start to run/when the cron trigger is enabled
	// Example: 2019-09-25
	// Required: true
	StartDate *string `json:"startDate"`

	// Time zone for task schedule
	// Example: Europe/London
	// Required: true
	TimeZone *string `json:"timeZone"`

	// Execution timeout in minutes (only for tasks)
	Timeout int32 `json:"timeout,omitempty"`

	// Type of schedule
	// Example: ONCE
	// Required: true
	// Enum: [ONCE DAILY WEEKLY MONTHLY CRON]
	Type *string `json:"type"`
}

// Validate validates this multiple trigger
func (m *MultipleTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultipleTrigger) validateAtDays(formats strfmt.Registry) error {
	if swag.IsZero(m.AtDays) { // not required
		return nil
	}

	if m.AtDays != nil {
		if err := m.AtDays.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atDays")
			}
			return err
		}
	}

	return nil
}

func (m *MultipleTrigger) validateAtTimes(formats strfmt.Registry) error {
	if swag.IsZero(m.AtTimes) { // not required
		return nil
	}

	if m.AtTimes != nil {
		if err := m.AtTimes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atTimes")
			}
			return err
		}
	}

	return nil
}

func (m *MultipleTrigger) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MultipleTrigger) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	return nil
}

func (m *MultipleTrigger) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("timeZone", "body", m.TimeZone); err != nil {
		return err
	}

	return nil
}

var multipleTriggerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONCE","DAILY","WEEKLY","MONTHLY","CRON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		multipleTriggerTypeTypePropEnum = append(multipleTriggerTypeTypePropEnum, v)
	}
}

const (

	// MultipleTriggerTypeONCE captures enum value "ONCE"
	MultipleTriggerTypeONCE string = "ONCE"

	// MultipleTriggerTypeDAILY captures enum value "DAILY"
	MultipleTriggerTypeDAILY string = "DAILY"

	// MultipleTriggerTypeWEEKLY captures enum value "WEEKLY"
	MultipleTriggerTypeWEEKLY string = "WEEKLY"

	// MultipleTriggerTypeMONTHLY captures enum value "MONTHLY"
	MultipleTriggerTypeMONTHLY string = "MONTHLY"

	// MultipleTriggerTypeCRON captures enum value "CRON"
	MultipleTriggerTypeCRON string = "CRON"
)

// prop value enum
func (m *MultipleTrigger) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, multipleTriggerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MultipleTrigger) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this multiple trigger based on the context it is used
func (m *MultipleTrigger) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAtDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAtTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultipleTrigger) contextValidateAtDays(ctx context.Context, formats strfmt.Registry) error {

	if m.AtDays != nil {
		if err := m.AtDays.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atDays")
			}
			return err
		}
	}

	return nil
}

func (m *MultipleTrigger) contextValidateAtTimes(ctx context.Context, formats strfmt.Registry) error {

	if m.AtTimes != nil {
		if err := m.AtTimes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atTimes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MultipleTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MultipleTrigger) UnmarshalBinary(b []byte) error {
	var res MultipleTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
