// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactParameter artifact parameter
//
// swagger:model ArtifactParameter
type ArtifactParameter struct {

	// Comment about parameter
	// Example: parameter for test
	Comment string `json:"comment,omitempty"`

	// Parameter name
	// Example: parameter_url
	// Required: true
	Name *string `json:"name"`

	// Is parameter required or not
	// Example: false
	// Required: true
	Required *bool `json:"required"`

	// Parameter value
	// Example: String
	// Required: true
	Type *string `json:"type"`

	// Parameter value
	// Example: localhost
	Value string `json:"value,omitempty"`
}

// Validate validates this artifact parameter
func (m *ArtifactParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactParameter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactParameter) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("required", "body", m.Required); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactParameter) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this artifact parameter based on context it is used
func (m *ArtifactParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactParameter) UnmarshalBinary(b []byte) error {
	var res ArtifactParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
