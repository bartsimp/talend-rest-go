// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PromotionExecutableTask promotion executable task
//
// swagger:model PromotionExecutableTask
type PromotionExecutableTask struct {

	// Advanced Promotion specification
	Advanced *AdvancedPromotionSpec `json:"advanced,omitempty"`

	// Execution context message
	Context string `json:"context,omitempty"`

	// Executable identifier
	// Example: 57f64991e4b0b689a64feed0
	// Required: true
	Executable *string `json:"executable"`

	// Keep Target Resources flag
	KeepTargetResources bool `json:"keepTargetResources,omitempty"`

	// Keep Target Run Profiles flag (works starting from V2.2)
	KeepTargetRunProfiles bool `json:"keepTargetRunProfiles,omitempty"`
}

// Validate validates this promotion executable task
func (m *PromotionExecutableTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvanced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionExecutableTask) validateAdvanced(formats strfmt.Registry) error {
	if swag.IsZero(m.Advanced) { // not required
		return nil
	}

	if m.Advanced != nil {
		if err := m.Advanced.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advanced")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advanced")
			}
			return err
		}
	}

	return nil
}

func (m *PromotionExecutableTask) validateExecutable(formats strfmt.Registry) error {

	if err := validate.Required("executable", "body", m.Executable); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this promotion executable task based on the context it is used
func (m *PromotionExecutableTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvanced(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionExecutableTask) contextValidateAdvanced(ctx context.Context, formats strfmt.Registry) error {

	if m.Advanced != nil {
		if err := m.Advanced.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advanced")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advanced")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PromotionExecutableTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PromotionExecutableTask) UnmarshalBinary(b []byte) error {
	var res PromotionExecutableTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
