// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineRunProfileResponse Pipeline run profile response object.
//
// swagger:model PipelineRunProfileResponse
type PipelineRunProfileResponse struct {

	// Created on
	// Read Only: true
	// Format: date-time
	CreateDate strfmt.DateTime `json:"createDate,omitempty"`

	// Description
	// Example: Run profile used by default
	Description string `json:"description,omitempty"`

	// Pipeline engine id
	// Example: 5f7eff3245ecf259a1c56daa
	EngineID string `json:"engineId,omitempty"`

	// Run profile id
	// Example: 57f64991e4b0b689a64feed0
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Name
	// Example: Default run profile
	// Required: true
	Name *string `json:"name"`

	// Type
	// Read Only: true
	// Enum: [standard big-data databricks advanced]
	Type string `json:"type,omitempty"`

	// Updated on
	// Read Only: true
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`
}

// Validate validates this pipeline run profile response
func (m *PipelineRunProfileResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineRunProfileResponse) validateCreateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PipelineRunProfileResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var pipelineRunProfileResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["standard","big-data","databricks","advanced"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineRunProfileResponseTypeTypePropEnum = append(pipelineRunProfileResponseTypeTypePropEnum, v)
	}
}

const (

	// PipelineRunProfileResponseTypeStandard captures enum value "standard"
	PipelineRunProfileResponseTypeStandard string = "standard"

	// PipelineRunProfileResponseTypeBigDashData captures enum value "big-data"
	PipelineRunProfileResponseTypeBigDashData string = "big-data"

	// PipelineRunProfileResponseTypeDatabricks captures enum value "databricks"
	PipelineRunProfileResponseTypeDatabricks string = "databricks"

	// PipelineRunProfileResponseTypeAdvanced captures enum value "advanced"
	PipelineRunProfileResponseTypeAdvanced string = "advanced"
)

// prop value enum
func (m *PipelineRunProfileResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pipelineRunProfileResponseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PipelineRunProfileResponse) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PipelineRunProfileResponse) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pipeline run profile response based on the context it is used
func (m *PipelineRunProfileResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreateDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineRunProfileResponse) contextValidateCreateDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createDate", "body", strfmt.DateTime(m.CreateDate)); err != nil {
		return err
	}

	return nil
}

func (m *PipelineRunProfileResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *PipelineRunProfileResponse) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *PipelineRunProfileResponse) contextValidateUpdateDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updateDate", "body", strfmt.DateTime(m.UpdateDate)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineRunProfileResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineRunProfileResponse) UnmarshalBinary(b []byte) error {
	var res PipelineRunProfileResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
