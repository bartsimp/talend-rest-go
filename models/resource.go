// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resource resource
//
// swagger:model Resource
type Resource struct {

	// Description of resource
	// Example: task detail description
	Description string `json:"description,omitempty"`

	// Boolean value which indicates that resource is file
	// Required: true
	File *bool `json:"file"`

	// Id of resource
	// Example: 5c1111d7a4186a4eafed0587
	// Required: true
	ID *string `json:"id"`

	// Name of resource
	// Example: Hello world task
	// Required: true
	Name *string `json:"name"`

	// Workspace of resource
	// Required: true
	WorkspaceInfo *Workspaceinfo `json:"workspaceInfo"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("file", "body", m.File); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateWorkspaceInfo(formats strfmt.Registry) error {

	if err := validate.Required("workspaceInfo", "body", m.WorkspaceInfo); err != nil {
		return err
	}

	if m.WorkspaceInfo != nil {
		if err := m.WorkspaceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspaceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspaceInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource based on the context it is used
func (m *Resource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWorkspaceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) contextValidateWorkspaceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkspaceInfo != nil {
		if err := m.WorkspaceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspaceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspaceInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
