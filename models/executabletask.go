// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Executabletask executabletask
//
// swagger:model Executabletask
type Executabletask struct {

	// Executable identifier
	// Example: 57f64991e4b0b689a64feed0
	// Required: true
	Executable *string `json:"executable"`

	// Execution log level
	// Example: WARN
	// Enum: [OFF ERROR WARN INFO]
	LogLevel string `json:"logLevel,omitempty"`

	// Executable parameters
	// Example: {"boss":"was","parameter_boss":"fupton"}
	Parameters map[string]string `json:"parameters,omitempty"`
}

// Validate validates this executabletask
func (m *Executabletask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Executabletask) validateExecutable(formats strfmt.Registry) error {

	if err := validate.Required("executable", "body", m.Executable); err != nil {
		return err
	}

	return nil
}

var executabletaskTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFF","ERROR","WARN","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		executabletaskTypeLogLevelPropEnum = append(executabletaskTypeLogLevelPropEnum, v)
	}
}

const (

	// ExecutabletaskLogLevelOFF captures enum value "OFF"
	ExecutabletaskLogLevelOFF string = "OFF"

	// ExecutabletaskLogLevelERROR captures enum value "ERROR"
	ExecutabletaskLogLevelERROR string = "ERROR"

	// ExecutabletaskLogLevelWARN captures enum value "WARN"
	ExecutabletaskLogLevelWARN string = "WARN"

	// ExecutabletaskLogLevelINFO captures enum value "INFO"
	ExecutabletaskLogLevelINFO string = "INFO"
)

// prop value enum
func (m *Executabletask) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, executabletaskTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Executabletask) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogLevelEnum("logLevel", "body", m.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this executabletask based on context it is used
func (m *Executabletask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Executabletask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Executabletask) UnmarshalBinary(b []byte) error {
	var res Executabletask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
