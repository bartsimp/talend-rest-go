// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Report report
//
// swagger:model Report
type Report struct {

	// messages
	// Read Only: true
	Messages []*Message `json:"messages"`

	// status
	// Enum: [CREATED REPLACED REUSED FAILED SKIPPED]
	Status string `json:"status,omitempty"`
}

// Validate validates this report
func (m *Report) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Report) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var reportTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","REPLACED","REUSED","FAILED","SKIPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportTypeStatusPropEnum = append(reportTypeStatusPropEnum, v)
	}
}

const (

	// ReportStatusCREATED captures enum value "CREATED"
	ReportStatusCREATED string = "CREATED"

	// ReportStatusREPLACED captures enum value "REPLACED"
	ReportStatusREPLACED string = "REPLACED"

	// ReportStatusREUSED captures enum value "REUSED"
	ReportStatusREUSED string = "REUSED"

	// ReportStatusFAILED captures enum value "FAILED"
	ReportStatusFAILED string = "FAILED"

	// ReportStatusSKIPPED captures enum value "SKIPPED"
	ReportStatusSKIPPED string = "SKIPPED"
)

// prop value enum
func (m *Report) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, reportTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Report) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this report based on the context it is used
func (m *Report) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Report) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "messages", "body", []*Message(m.Messages)); err != nil {
		return err
	}

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {
			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Report) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Report) UnmarshalBinary(b []byte) error {
	var res Report
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
