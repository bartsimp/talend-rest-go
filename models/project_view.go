// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectView project view
//
// swagger:model ProjectView
type ProjectView struct {

	// author
	Author string `json:"author,omitempty"`

	// create date
	// Format: date-time
	CreateDate strfmt.DateTime `json:"createDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// project type
	// Enum: [MDM DQ DI]
	ProjectType string `json:"projectType,omitempty"`

	// repo type
	// Enum: [GIT SVN NONE]
	RepoType string `json:"repoType,omitempty"`

	// technical label
	TechnicalLabel string `json:"technicalLabel,omitempty"`

	// update date
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this project view
func (m *ProjectView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectView) validateCreateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var projectViewTypeProjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MDM","DQ","DI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectViewTypeProjectTypePropEnum = append(projectViewTypeProjectTypePropEnum, v)
	}
}

const (

	// ProjectViewProjectTypeMDM captures enum value "MDM"
	ProjectViewProjectTypeMDM string = "MDM"

	// ProjectViewProjectTypeDQ captures enum value "DQ"
	ProjectViewProjectTypeDQ string = "DQ"

	// ProjectViewProjectTypeDI captures enum value "DI"
	ProjectViewProjectTypeDI string = "DI"
)

// prop value enum
func (m *ProjectView) validateProjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectViewTypeProjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectView) validateProjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProjectTypeEnum("projectType", "body", m.ProjectType); err != nil {
		return err
	}

	return nil
}

var projectViewTypeRepoTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GIT","SVN","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectViewTypeRepoTypePropEnum = append(projectViewTypeRepoTypePropEnum, v)
	}
}

const (

	// ProjectViewRepoTypeGIT captures enum value "GIT"
	ProjectViewRepoTypeGIT string = "GIT"

	// ProjectViewRepoTypeSVN captures enum value "SVN"
	ProjectViewRepoTypeSVN string = "SVN"

	// ProjectViewRepoTypeNONE captures enum value "NONE"
	ProjectViewRepoTypeNONE string = "NONE"
)

// prop value enum
func (m *ProjectView) validateRepoTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectViewTypeRepoTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectView) validateRepoType(formats strfmt.Registry) error {
	if swag.IsZero(m.RepoType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRepoTypeEnum("repoType", "body", m.RepoType); err != nil {
		return err
	}

	return nil
}

func (m *ProjectView) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project view based on context it is used
func (m *ProjectView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectView) UnmarshalBinary(b []byte) error {
	var res ProjectView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
