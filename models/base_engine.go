// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseEngine base engine
//
// swagger:model BaseEngine
type BaseEngine struct {

	// Availability status of engine|cluster
	// Example: NOT_AVAILABLE
	// Enum: [AVAILABLE NOT_AVAILABLE RETIRED]
	Availability string `json:"availability,omitempty"`

	// Created on
	// Read Only: true
	// Format: date-time
	CreateDate strfmt.DateTime `json:"createDate,omitempty"`

	// Resource description
	// Example: Some description
	Description string `json:"description,omitempty"`

	// Resource id
	// Example: 5cdd2ce2c737973f9d581b98
	// Required: true
	ID *string `json:"id"`

	// Indicates whether target runtime (engine/cluster) is managed or not
	Managed bool `json:"managed,omitempty"`

	// Resource name
	// Example: Remote Engine
	// Required: true
	Name *string `json:"name"`

	// Resource runtime id
	// Example: 9e8acf72-00d5-451b-9175-97bd44cd6b13
	// Required: true
	RuntimeID *string `json:"runtimeId"`

	// Updated on
	// Read Only: true
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`

	// Resource workspace
	Workspace *Workspaceinfo `json:"workspace,omitempty"`
}

// Validate validates this base engine
func (m *BaseEngine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var baseEngineTypeAvailabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVAILABLE","NOT_AVAILABLE","RETIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseEngineTypeAvailabilityPropEnum = append(baseEngineTypeAvailabilityPropEnum, v)
	}
}

const (

	// BaseEngineAvailabilityAVAILABLE captures enum value "AVAILABLE"
	BaseEngineAvailabilityAVAILABLE string = "AVAILABLE"

	// BaseEngineAvailabilityNOTAVAILABLE captures enum value "NOT_AVAILABLE"
	BaseEngineAvailabilityNOTAVAILABLE string = "NOT_AVAILABLE"

	// BaseEngineAvailabilityRETIRED captures enum value "RETIRED"
	BaseEngineAvailabilityRETIRED string = "RETIRED"
)

// prop value enum
func (m *BaseEngine) validateAvailabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, baseEngineTypeAvailabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BaseEngine) validateAvailability(formats strfmt.Registry) error {
	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailabilityEnum("availability", "body", m.Availability); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) validateCreateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) validateRuntimeID(formats strfmt.Registry) error {

	if err := validate.Required("runtimeId", "body", m.RuntimeID); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) validateWorkspace(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this base engine based on the context it is used
func (m *BaseEngine) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreateDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseEngine) contextValidateCreateDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createDate", "body", strfmt.DateTime(m.CreateDate)); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) contextValidateUpdateDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updateDate", "body", strfmt.DateTime(m.UpdateDate)); err != nil {
		return err
	}

	return nil
}

func (m *BaseEngine) contextValidateWorkspace(ctx context.Context, formats strfmt.Registry) error {

	if m.Workspace != nil {
		if err := m.Workspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseEngine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseEngine) UnmarshalBinary(b []byte) error {
	var res BaseEngine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
