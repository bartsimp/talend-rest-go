// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionFlow execution flow
//
// swagger:model ExecutionFlow
type ExecutionFlow struct {

	// abstract plan Id
	AbstractPlanID string `json:"abstractPlanId,omitempty"`

	// artifact version
	ArtifactVersion *ArtifactVersion `json:"artifactVersion,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// destination
	Destination string `json:"destination,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// job type
	// Enum: [STANDARD BIG_DATA_STREAMING BIG_DATA_BATCH ROUTE DATA_SERVICE PIPELINE]
	JobType string `json:"jobType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pause details
	PauseDetails *ExecutionPauseDetails `json:"pauseDetails,omitempty"`

	// plan
	Plan bool `json:"plan,omitempty"`

	// upgrade info
	UpgradeInfo *UpgradeInfo `json:"upgradeInfo,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// workspace Id
	WorkspaceID string `json:"workspaceId,omitempty"`
}

// Validate validates this execution flow
func (m *ExecutionFlow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePauseDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionFlow) validateArtifactVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactVersion) { // not required
		return nil
	}

	if m.ArtifactVersion != nil {
		if err := m.ArtifactVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactVersion")
			}
			return err
		}
	}

	return nil
}

var executionFlowTypeJobTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STANDARD","BIG_DATA_STREAMING","BIG_DATA_BATCH","ROUTE","DATA_SERVICE","PIPELINE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		executionFlowTypeJobTypePropEnum = append(executionFlowTypeJobTypePropEnum, v)
	}
}

const (

	// ExecutionFlowJobTypeSTANDARD captures enum value "STANDARD"
	ExecutionFlowJobTypeSTANDARD string = "STANDARD"

	// ExecutionFlowJobTypeBIGDATASTREAMING captures enum value "BIG_DATA_STREAMING"
	ExecutionFlowJobTypeBIGDATASTREAMING string = "BIG_DATA_STREAMING"

	// ExecutionFlowJobTypeBIGDATABATCH captures enum value "BIG_DATA_BATCH"
	ExecutionFlowJobTypeBIGDATABATCH string = "BIG_DATA_BATCH"

	// ExecutionFlowJobTypeROUTE captures enum value "ROUTE"
	ExecutionFlowJobTypeROUTE string = "ROUTE"

	// ExecutionFlowJobTypeDATASERVICE captures enum value "DATA_SERVICE"
	ExecutionFlowJobTypeDATASERVICE string = "DATA_SERVICE"

	// ExecutionFlowJobTypePIPELINE captures enum value "PIPELINE"
	ExecutionFlowJobTypePIPELINE string = "PIPELINE"
)

// prop value enum
func (m *ExecutionFlow) validateJobTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, executionFlowTypeJobTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExecutionFlow) validateJobType(formats strfmt.Registry) error {
	if swag.IsZero(m.JobType) { // not required
		return nil
	}

	// value enum
	if err := m.validateJobTypeEnum("jobType", "body", m.JobType); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionFlow) validatePauseDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.PauseDetails) { // not required
		return nil
	}

	if m.PauseDetails != nil {
		if err := m.PauseDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pauseDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pauseDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionFlow) validateUpgradeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradeInfo) { // not required
		return nil
	}

	if m.UpgradeInfo != nil {
		if err := m.UpgradeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this execution flow based on the context it is used
func (m *ExecutionFlow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifactVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePauseDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpgradeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionFlow) contextValidateArtifactVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ArtifactVersion != nil {
		if err := m.ArtifactVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionFlow) contextValidatePauseDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.PauseDetails != nil {
		if err := m.PauseDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pauseDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pauseDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionFlow) contextValidateUpgradeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UpgradeInfo != nil {
		if err := m.UpgradeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionFlow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionFlow) UnmarshalBinary(b []byte) error {
	var res ExecutionFlow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
