// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription Contains information related to token consumption, engines statuses and seat usages
//
// swagger:model Subscription
type Subscription struct {

	// Available applications
	// Required: true
	Applications []string `json:"applications"`

	// Subscription end date
	// Example: 2019-09-25
	// Required: true
	EndDate *string `json:"endDate"`

	// Give number of engines used by type
	// Required: true
	EnginesStatus []*EngineStatus `json:"enginesStatus"`

	// License type
	// Required: true
	LicenseType *string `json:"licenseType"`

	// Seats information by application
	// Required: true
	Seats []*Seat `json:"seats"`

	// Subscription start date
	// Example: 2019-09-25
	// Required: true
	StartDate *string `json:"startDate"`

	// Level of support
	// Required: true
	SupportLevel *string `json:"supportLevel"`

	// tokens status
	// Required: true
	TokensStatus *TokensStatus `json:"tokensStatus"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnginesStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokensStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateApplications(formats strfmt.Registry) error {

	if err := validate.Required("applications", "body", m.Applications); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateEnginesStatus(formats strfmt.Registry) error {

	if err := validate.Required("enginesStatus", "body", m.EnginesStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.EnginesStatus); i++ {
		if swag.IsZero(m.EnginesStatus[i]) { // not required
			continue
		}

		if m.EnginesStatus[i] != nil {
			if err := m.EnginesStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enginesStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enginesStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subscription) validateLicenseType(formats strfmt.Registry) error {

	if err := validate.Required("licenseType", "body", m.LicenseType); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateSeats(formats strfmt.Registry) error {

	if err := validate.Required("seats", "body", m.Seats); err != nil {
		return err
	}

	for i := 0; i < len(m.Seats); i++ {
		if swag.IsZero(m.Seats[i]) { // not required
			continue
		}

		if m.Seats[i] != nil {
			if err := m.Seats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("seats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("seats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subscription) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateSupportLevel(formats strfmt.Registry) error {

	if err := validate.Required("supportLevel", "body", m.SupportLevel); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateTokensStatus(formats strfmt.Registry) error {

	if err := validate.Required("tokensStatus", "body", m.TokensStatus); err != nil {
		return err
	}

	if m.TokensStatus != nil {
		if err := m.TokensStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokensStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokensStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subscription based on the context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnginesStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokensStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) contextValidateEnginesStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnginesStatus); i++ {

		if m.EnginesStatus[i] != nil {
			if err := m.EnginesStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enginesStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enginesStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subscription) contextValidateSeats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Seats); i++ {

		if m.Seats[i] != nil {
			if err := m.Seats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("seats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("seats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subscription) contextValidateTokensStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.TokensStatus != nil {
		if err := m.TokensStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokensStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokensStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
