// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataIntegrationRunProfile Pipeline run profile of type 'Data-integration'
//
// swagger:model DataIntegrationRunProfile
type DataIntegrationRunProfile struct {

	// Description
	// Example: Run profile used by default
	Description string `json:"description,omitempty"`

	// JVM arguments
	// Example: ["-XX:MaxHeapFreeRatio=70","-XX:PermSize=128m"]
	// Unique: true
	JvmArguments []string `json:"jvmArguments"`

	// Name
	// Example: Default run profile
	// Required: true
	Name *string `json:"name"`

	// runtime Id
	// Read Only: true
	RuntimeID string `json:"runtimeId,omitempty"`
}

// Validate validates this data integration run profile
func (m *DataIntegrationRunProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJvmArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataIntegrationRunProfile) validateJvmArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.JvmArguments) { // not required
		return nil
	}

	if err := validate.UniqueItems("jvmArguments", "body", m.JvmArguments); err != nil {
		return err
	}

	return nil
}

func (m *DataIntegrationRunProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data integration run profile based on the context it is used
func (m *DataIntegrationRunProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuntimeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataIntegrationRunProfile) contextValidateRuntimeID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "runtimeId", "body", string(m.RuntimeID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataIntegrationRunProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataIntegrationRunProfile) UnmarshalBinary(b []byte) error {
	var res DataIntegrationRunProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
