// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineEngineRequest pipeline engine request
//
// swagger:model PipelineEngineRequest
type PipelineEngineRequest struct {

	// Engine|cluster description
	// Example: Some description
	// Read Only: true
	Description string `json:"description,omitempty"`

	// Id of engine environment
	// Example: 5c1111d7a4186a4eafed0587
	// Required: true
	EnvironmentID *string `json:"environmentId"`

	// Engine name
	// Example: Remote Engine
	// Required: true
	Name *string `json:"name"`

	// Id of engine workspace
	// Example: 5c2222d7a4186a4eafed0587
	// Read Only: true
	WorkspaceID string `json:"workspaceId,omitempty"`
}

// Validate validates this pipeline engine request
func (m *PipelineEngineRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineEngineRequest) validateEnvironmentID(formats strfmt.Registry) error {

	if err := validate.Required("environmentId", "body", m.EnvironmentID); err != nil {
		return err
	}

	return nil
}

func (m *PipelineEngineRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pipeline engine request based on the context it is used
func (m *PipelineEngineRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineEngineRequest) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *PipelineEngineRequest) contextValidateWorkspaceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "workspaceId", "body", string(m.WorkspaceID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineEngineRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineEngineRequest) UnmarshalBinary(b []byte) error {
	var res PipelineEngineRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
