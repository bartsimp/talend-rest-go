// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PromotionResultInfo promotion result info
//
// swagger:model PromotionResultInfo
type PromotionResultInfo struct {

	// Promotion Analyze Report
	AnalyzeReport *Report `json:"analyzeReport,omitempty"`

	// Artifact ID
	ID string `json:"id,omitempty"`

	// Artifact Name
	Name string `json:"name,omitempty"`

	// Promotion Report
	PromotionReport *Report `json:"promotionReport,omitempty"`

	// Target Artifact ID
	TargetID string `json:"targetId,omitempty"`

	// Artifact target version
	TargetVersion string `json:"targetVersion,omitempty"`

	// Artifact Type
	// Example: WORKSPACE
	// Enum: [WORKSPACE PLAN FLOW ACTION CONNECTION RESOURCE ENGINE CLUSTER]
	Type string `json:"type,omitempty"`

	// Artifact version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this promotion result info
func (m *PromotionResultInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalyzeReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionResultInfo) validateAnalyzeReport(formats strfmt.Registry) error {
	if swag.IsZero(m.AnalyzeReport) { // not required
		return nil
	}

	if m.AnalyzeReport != nil {
		if err := m.AnalyzeReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analyzeReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analyzeReport")
			}
			return err
		}
	}

	return nil
}

func (m *PromotionResultInfo) validatePromotionReport(formats strfmt.Registry) error {
	if swag.IsZero(m.PromotionReport) { // not required
		return nil
	}

	if m.PromotionReport != nil {
		if err := m.PromotionReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotionReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotionReport")
			}
			return err
		}
	}

	return nil
}

var promotionResultInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WORKSPACE","PLAN","FLOW","ACTION","CONNECTION","RESOURCE","ENGINE","CLUSTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		promotionResultInfoTypeTypePropEnum = append(promotionResultInfoTypeTypePropEnum, v)
	}
}

const (

	// PromotionResultInfoTypeWORKSPACE captures enum value "WORKSPACE"
	PromotionResultInfoTypeWORKSPACE string = "WORKSPACE"

	// PromotionResultInfoTypePLAN captures enum value "PLAN"
	PromotionResultInfoTypePLAN string = "PLAN"

	// PromotionResultInfoTypeFLOW captures enum value "FLOW"
	PromotionResultInfoTypeFLOW string = "FLOW"

	// PromotionResultInfoTypeACTION captures enum value "ACTION"
	PromotionResultInfoTypeACTION string = "ACTION"

	// PromotionResultInfoTypeCONNECTION captures enum value "CONNECTION"
	PromotionResultInfoTypeCONNECTION string = "CONNECTION"

	// PromotionResultInfoTypeRESOURCE captures enum value "RESOURCE"
	PromotionResultInfoTypeRESOURCE string = "RESOURCE"

	// PromotionResultInfoTypeENGINE captures enum value "ENGINE"
	PromotionResultInfoTypeENGINE string = "ENGINE"

	// PromotionResultInfoTypeCLUSTER captures enum value "CLUSTER"
	PromotionResultInfoTypeCLUSTER string = "CLUSTER"
)

// prop value enum
func (m *PromotionResultInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, promotionResultInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PromotionResultInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this promotion result info based on the context it is used
func (m *PromotionResultInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnalyzeReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromotionReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionResultInfo) contextValidateAnalyzeReport(ctx context.Context, formats strfmt.Registry) error {

	if m.AnalyzeReport != nil {
		if err := m.AnalyzeReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analyzeReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analyzeReport")
			}
			return err
		}
	}

	return nil
}

func (m *PromotionResultInfo) contextValidatePromotionReport(ctx context.Context, formats strfmt.Registry) error {

	if m.PromotionReport != nil {
		if err := m.PromotionReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotionReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotionReport")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PromotionResultInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PromotionResultInfo) UnmarshalBinary(b []byte) error {
	var res PromotionResultInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
