// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BigDataRunProfile Pipeline run profile of type 'Big Data'
//
// swagger:model BigDataRunProfile
type BigDataRunProfile struct {

	// Checkpoint file path. Required if checkpointing enabled
	// Example: /file-path
	CheckPointFilePath string `json:"checkPointFilePath,omitempty"`

	// Description
	// Example: Run profile used by default
	Description string `json:"description,omitempty"`

	// Distribution
	// Example: EMR 5.x (Hadoop 2.7)
	Distribution string `json:"distribution,omitempty"`

	// Driver cores
	// Example: 1
	DriverCores int32 `json:"driverCores,omitempty"`

	// Driver cores (in MB)
	// Example: 512
	DriverMemory int32 `json:"driverMemory,omitempty"`

	// Pipeline engine id
	// Example: 5f7eff3245ecf259a1c56daa
	EngineID string `json:"engineId,omitempty"`

	// Execution framework
	// Example: Spark on Yarn
	ExecutionFramework string `json:"executionFramework,omitempty"`

	// Execution memory overhead (MB)
	// Example: 384
	// Required: true
	ExecutorMemoryOverhead *int32 `json:"executorMemoryOverhead"`

	// Checkpointing
	// Example: true
	IsCheckpointingEnabled bool `json:"isCheckpointingEnabled,omitempty"`

	// Micro-batch interval (in ms)
	// Example: 1000
	// Required: true
	MicroBatchInterval *int32 `json:"microBatchInterval"`

	// Name
	// Example: Default run profile
	// Required: true
	Name *string `json:"name"`

	// Parameters
	// Example: {"cpu":"1","memory":"512"}
	Parameters map[string]string `json:"parameters,omitempty"`

	// Streaming timeout (in ms)
	// Example: 10
	// Required: true
	StreamingTimeout *int32 `json:"streamingTimeout"`

	// Temporary storage
	// Example: /tmp-storage
	// Required: true
	TemporaryStorage *string `json:"temporaryStorage"`

	// Yarn queue
	// Example: q1
	YarnQueue string `json:"yarnQueue,omitempty"`

	// Yarn strategy
	// Required: true
	YarnStrategy *YarnStrategy `json:"yarnStrategy"`
}

// Validate validates this big data run profile
func (m *BigDataRunProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutorMemoryOverhead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMicroBatchInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamingTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemporaryStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYarnStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BigDataRunProfile) validateExecutorMemoryOverhead(formats strfmt.Registry) error {

	if err := validate.Required("executorMemoryOverhead", "body", m.ExecutorMemoryOverhead); err != nil {
		return err
	}

	return nil
}

func (m *BigDataRunProfile) validateMicroBatchInterval(formats strfmt.Registry) error {

	if err := validate.Required("microBatchInterval", "body", m.MicroBatchInterval); err != nil {
		return err
	}

	return nil
}

func (m *BigDataRunProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BigDataRunProfile) validateStreamingTimeout(formats strfmt.Registry) error {

	if err := validate.Required("streamingTimeout", "body", m.StreamingTimeout); err != nil {
		return err
	}

	return nil
}

func (m *BigDataRunProfile) validateTemporaryStorage(formats strfmt.Registry) error {

	if err := validate.Required("temporaryStorage", "body", m.TemporaryStorage); err != nil {
		return err
	}

	return nil
}

func (m *BigDataRunProfile) validateYarnStrategy(formats strfmt.Registry) error {

	if err := validate.Required("yarnStrategy", "body", m.YarnStrategy); err != nil {
		return err
	}

	if m.YarnStrategy != nil {
		if err := m.YarnStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yarnStrategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("yarnStrategy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this big data run profile based on the context it is used
func (m *BigDataRunProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateYarnStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BigDataRunProfile) contextValidateYarnStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.YarnStrategy != nil {
		if err := m.YarnStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yarnStrategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("yarnStrategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BigDataRunProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BigDataRunProfile) UnmarshalBinary(b []byte) error {
	var res BigDataRunProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
