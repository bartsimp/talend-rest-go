// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskExecutionsRequest task executions request
//
// swagger:model TaskExecutionsRequest
type TaskExecutionsRequest struct {

	// tasks environment id
	// Example: 6148511d6ccc6d41563574e5
	EnvironmentID string `json:"environmentId,omitempty"`

	// from date time (milliseconds)
	// Example: 1646159400000
	From int64 `json:"from,omitempty"`

	// lastDays
	// Example: 20
	LastDays int32 `json:"lastDays,omitempty"`

	// tasks limit
	// Example: 100
	Limit int32 `json:"limit,omitempty"`

	// tasks offset
	// Example: 0
	Offset int32 `json:"offset,omitempty"`

	// tasks execution status
	// Example: executing
	// Enum: [dispatching deploy_failed executing execution_successful execution_rejected execution_failed terminated terminated_timeout]
	Status string `json:"status,omitempty"`

	// tasks tag
	// Example: ["tag1","tag2"]
	Tags []string `json:"tags"`

	// to date time (milliseconds)
	// Example: 1649183400000
	To int64 `json:"to,omitempty"`

	// tasks workspace id
	// Example: 614851d46ccc6d41563574ea
	WorkspaceID string `json:"workspaceId,omitempty"`
}

// Validate validates this task executions request
func (m *TaskExecutionsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskExecutionsRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dispatching","deploy_failed","executing","execution_successful","execution_rejected","execution_failed","terminated","terminated_timeout"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionsRequestTypeStatusPropEnum = append(taskExecutionsRequestTypeStatusPropEnum, v)
	}
}

const (

	// TaskExecutionsRequestStatusDispatching captures enum value "dispatching"
	TaskExecutionsRequestStatusDispatching string = "dispatching"

	// TaskExecutionsRequestStatusDeployFailed captures enum value "deploy_failed"
	TaskExecutionsRequestStatusDeployFailed string = "deploy_failed"

	// TaskExecutionsRequestStatusExecuting captures enum value "executing"
	TaskExecutionsRequestStatusExecuting string = "executing"

	// TaskExecutionsRequestStatusExecutionSuccessful captures enum value "execution_successful"
	TaskExecutionsRequestStatusExecutionSuccessful string = "execution_successful"

	// TaskExecutionsRequestStatusExecutionRejected captures enum value "execution_rejected"
	TaskExecutionsRequestStatusExecutionRejected string = "execution_rejected"

	// TaskExecutionsRequestStatusExecutionFailed captures enum value "execution_failed"
	TaskExecutionsRequestStatusExecutionFailed string = "execution_failed"

	// TaskExecutionsRequestStatusTerminated captures enum value "terminated"
	TaskExecutionsRequestStatusTerminated string = "terminated"

	// TaskExecutionsRequestStatusTerminatedTimeout captures enum value "terminated_timeout"
	TaskExecutionsRequestStatusTerminatedTimeout string = "terminated_timeout"
)

// prop value enum
func (m *TaskExecutionsRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskExecutionsRequestTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionsRequest) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this task executions request based on context it is used
func (m *TaskExecutionsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskExecutionsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskExecutionsRequest) UnmarshalBinary(b []byte) error {
	var res TaskExecutionsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
