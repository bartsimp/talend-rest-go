// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configuration configuration
//
// swagger:model Configuration
type Configuration struct {

	// Micro-batch interval (in ms)
	// Example: 1000
	// Required: true
	MicroBatchInterval *int32 `json:"microBatchInterval"`

	// Number of threads
	// Example: 1
	// Required: true
	NumberOfThreads *int32 `json:"numberOfThreads"`

	// Parameters
	// Example: {"cpu":"1","memory":"512"}
	Parameters map[string]string `json:"parameters,omitempty"`
}

// Validate validates this configuration
func (m *Configuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMicroBatchInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfThreads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configuration) validateMicroBatchInterval(formats strfmt.Registry) error {

	if err := validate.Required("microBatchInterval", "body", m.MicroBatchInterval); err != nil {
		return err
	}

	return nil
}

func (m *Configuration) validateNumberOfThreads(formats strfmt.Registry) error {

	if err := validate.Required("numberOfThreads", "body", m.NumberOfThreads); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this configuration based on context it is used
func (m *Configuration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Configuration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configuration) UnmarshalBinary(b []byte) error {
	var res Configuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
