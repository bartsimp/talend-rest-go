// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Permission permission
//
// swagger:model Permission
type Permission struct {

	// The list of permission types
	// Required: true
	Permissions []string `json:"permissions"`

	// The user id
	// Example: b9e10a3f-9d68-44bb-862f-b2aa56dc7191
	// Required: true
	UserID *string `json:"userId"`

	// The workspace id
	// Example: 57f64991e4b0b689a64feed2
	// Required: true
	WorkspaceID *string `json:"workspaceId"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var permissionPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTHOR","EXECUTE","VIEW","MANAGE","PUBLISH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionPermissionsItemsEnum = append(permissionPermissionsItemsEnum, v)
	}
}

func (m *Permission) validatePermissionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, permissionPermissionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Permission) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	for i := 0; i < len(m.Permissions); i++ {

		// value enum
		if err := m.validatePermissionsItemsEnum("permissions"+"."+strconv.Itoa(i), "body", m.Permissions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Permission) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *Permission) validateWorkspaceID(formats strfmt.Registry) error {

	if err := validate.Required("workspaceId", "body", m.WorkspaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this permission based on context it is used
func (m *Permission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Permission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permission) UnmarshalBinary(b []byte) error {
	var res Permission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
