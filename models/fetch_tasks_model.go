// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FetchTasksModel fetch tasks model
//
// swagger:model FetchTasksModel
type FetchTasksModel struct {

	// tasks artifact id filter
	// Example: 623aafbe61a28314065704b6
	ArtifactID string `json:"artifactId,omitempty"`

	// tasks environment id filter
	// Example: 6148511d6ccc6d41563574e5
	EnvironmentID string `json:"environmentId,omitempty"`

	// tasks limit filter
	// Example: 100
	Limit int32 `json:"limit,omitempty"`

	// tasks name filter
	// Example: task1
	Name string `json:"name,omitempty"`

	// tasks offset filter
	// Example: 0
	Offset int32 `json:"offset,omitempty"`

	// tasks runtime id filter
	// Example: 623aafbe61a28314065704b8
	RuntimeID string `json:"runtimeId,omitempty"`

	// tasks runtime run profile id filter
	// Example: 626f7d424fe73f1084416c68
	RuntimeRunProfileID string `json:"runtimeRunProfileId,omitempty"`

	// tasks runtime type filter
	// Example: CLOUD
	// Enum: [CLOUD CLOUD_EXCLUSIVE CLOUD_SANDBOX REMOTE_ENGINE REMOTE_ENGINE_CLUSTER ELASTIC_ENGINE]
	RuntimeType string `json:"runtimeType,omitempty"`

	// tasks tags filter
	// Example: ["tag1","tag2"]
	Tags []string `json:"tags"`

	// tasks trigger type filter
	// Example: daily
	// Enum: [no_trigger daily weekly monthly once webhook cron]
	TriggerType string `json:"triggerType,omitempty"`

	// tasks workspace id filter
	// Example: 614851d46ccc6d41563574ea
	WorkspaceID string `json:"workspaceId,omitempty"`
}

// Validate validates this fetch tasks model
func (m *FetchTasksModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuntimeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fetchTasksModelTypeRuntimeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUD","CLOUD_EXCLUSIVE","CLOUD_SANDBOX","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER","ELASTIC_ENGINE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fetchTasksModelTypeRuntimeTypePropEnum = append(fetchTasksModelTypeRuntimeTypePropEnum, v)
	}
}

const (

	// FetchTasksModelRuntimeTypeCLOUD captures enum value "CLOUD"
	FetchTasksModelRuntimeTypeCLOUD string = "CLOUD"

	// FetchTasksModelRuntimeTypeCLOUDEXCLUSIVE captures enum value "CLOUD_EXCLUSIVE"
	FetchTasksModelRuntimeTypeCLOUDEXCLUSIVE string = "CLOUD_EXCLUSIVE"

	// FetchTasksModelRuntimeTypeCLOUDSANDBOX captures enum value "CLOUD_SANDBOX"
	FetchTasksModelRuntimeTypeCLOUDSANDBOX string = "CLOUD_SANDBOX"

	// FetchTasksModelRuntimeTypeREMOTEENGINE captures enum value "REMOTE_ENGINE"
	FetchTasksModelRuntimeTypeREMOTEENGINE string = "REMOTE_ENGINE"

	// FetchTasksModelRuntimeTypeREMOTEENGINECLUSTER captures enum value "REMOTE_ENGINE_CLUSTER"
	FetchTasksModelRuntimeTypeREMOTEENGINECLUSTER string = "REMOTE_ENGINE_CLUSTER"

	// FetchTasksModelRuntimeTypeELASTICENGINE captures enum value "ELASTIC_ENGINE"
	FetchTasksModelRuntimeTypeELASTICENGINE string = "ELASTIC_ENGINE"
)

// prop value enum
func (m *FetchTasksModel) validateRuntimeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fetchTasksModelTypeRuntimeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FetchTasksModel) validateRuntimeType(formats strfmt.Registry) error {
	if swag.IsZero(m.RuntimeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRuntimeTypeEnum("runtimeType", "body", m.RuntimeType); err != nil {
		return err
	}

	return nil
}

var fetchTasksModelTypeTriggerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["no_trigger","daily","weekly","monthly","once","webhook","cron"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fetchTasksModelTypeTriggerTypePropEnum = append(fetchTasksModelTypeTriggerTypePropEnum, v)
	}
}

const (

	// FetchTasksModelTriggerTypeNoTrigger captures enum value "no_trigger"
	FetchTasksModelTriggerTypeNoTrigger string = "no_trigger"

	// FetchTasksModelTriggerTypeDaily captures enum value "daily"
	FetchTasksModelTriggerTypeDaily string = "daily"

	// FetchTasksModelTriggerTypeWeekly captures enum value "weekly"
	FetchTasksModelTriggerTypeWeekly string = "weekly"

	// FetchTasksModelTriggerTypeMonthly captures enum value "monthly"
	FetchTasksModelTriggerTypeMonthly string = "monthly"

	// FetchTasksModelTriggerTypeOnce captures enum value "once"
	FetchTasksModelTriggerTypeOnce string = "once"

	// FetchTasksModelTriggerTypeWebhook captures enum value "webhook"
	FetchTasksModelTriggerTypeWebhook string = "webhook"

	// FetchTasksModelTriggerTypeCron captures enum value "cron"
	FetchTasksModelTriggerTypeCron string = "cron"
)

// prop value enum
func (m *FetchTasksModel) validateTriggerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fetchTasksModelTypeTriggerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FetchTasksModel) validateTriggerType(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTriggerTypeEnum("triggerType", "body", m.TriggerType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fetch tasks model based on context it is used
func (m *FetchTasksModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FetchTasksModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FetchTasksModel) UnmarshalBinary(b []byte) error {
	var res FetchTasksModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
