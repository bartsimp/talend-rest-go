// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workspace workspace
//
// swagger:model Workspace
type Workspace struct {

	// create date
	// Format: date-time
	CreateDate strfmt.DateTime `json:"createDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// environment Id
	EnvironmentID string `json:"environmentId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// owner full name
	OwnerFullName string `json:"ownerFullName,omitempty"`

	// type
	// Enum: [Shared Personal Custom]
	Type string `json:"type,omitempty"`

	// update date
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`
}

// Validate validates this workspace
func (m *Workspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workspace) validateCreateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var workspaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Shared","Personal","Custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceTypeTypePropEnum = append(workspaceTypeTypePropEnum, v)
	}
}

const (

	// WorkspaceTypeShared captures enum value "Shared"
	WorkspaceTypeShared string = "Shared"

	// WorkspaceTypePersonal captures enum value "Personal"
	WorkspaceTypePersonal string = "Personal"

	// WorkspaceTypeCustom captures enum value "Custom"
	WorkspaceTypeCustom string = "Custom"
)

// prop value enum
func (m *Workspace) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspaceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Workspace) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Workspace) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace based on context it is used
func (m *Workspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Workspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workspace) UnmarshalBinary(b []byte) error {
	var res Workspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
