// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactVersion artifact version
//
// swagger:model ArtifactVersion
type ArtifactVersion struct {

	// Created on
	// Read Only: true
	// Format: date-time
	CreateDate strfmt.DateTime `json:"createDate,omitempty"`

	// Artifact description
	// Example: This is test artifact
	Description string `json:"description,omitempty"`

	// Id of artifact
	// Example: 5c1111d7a4186a4eafed0587
	// Required: true
	ID *string `json:"id"`

	// Marketplace product
	// Example: Talend Data Fabric (tp_bd_7.2.1.20190612_1410)
	// Required: true
	MarketplaceProduct *string `json:"marketplaceProduct"`

	// Name of artifact
	// Example: Hello world artifact
	Name string `json:"name,omitempty"`

	// Artifact parameters
	// Required: true
	Parameters []*ArtifactParameter `json:"parameters"`

	// Artifact publisher
	// Example: admin
	// Required: true
	Publisher *string `json:"publisher"`

	// Artifact git info
	Repository *SourcesRepositoryData `json:"repository,omitempty"`

	// Artifact type
	// Example: standard
	// Required: true
	// Enum: [standard big_data_streaming big_data_batch route data-service]
	Type *string `json:"type"`

	// Updated on
	// Read Only: true
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`

	// Artifact version
	// Example: 0.1.0
	// Required: true
	Version *string `json:"version"`

	// Artifact workspace
	// Required: true
	Workspace *Workspaceinfo `json:"workspace"`
}

// Validate validates this artifact version
func (m *ArtifactVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactVersion) validateCreateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) validateMarketplaceProduct(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceProduct", "body", m.MarketplaceProduct); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArtifactVersion) validatePublisher(formats strfmt.Registry) error {

	if err := validate.Required("publisher", "body", m.Publisher); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) validateRepository(formats strfmt.Registry) error {
	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

var artifactVersionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["standard","big_data_streaming","big_data_batch","route","data-service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactVersionTypeTypePropEnum = append(artifactVersionTypeTypePropEnum, v)
	}
}

const (

	// ArtifactVersionTypeStandard captures enum value "standard"
	ArtifactVersionTypeStandard string = "standard"

	// ArtifactVersionTypeBigDataStreaming captures enum value "big_data_streaming"
	ArtifactVersionTypeBigDataStreaming string = "big_data_streaming"

	// ArtifactVersionTypeBigDataBatch captures enum value "big_data_batch"
	ArtifactVersionTypeBigDataBatch string = "big_data_batch"

	// ArtifactVersionTypeRoute captures enum value "route"
	ArtifactVersionTypeRoute string = "route"

	// ArtifactVersionTypeDataDashService captures enum value "data-service"
	ArtifactVersionTypeDataDashService string = "data-service"
)

// prop value enum
func (m *ArtifactVersion) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactVersionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactVersion) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) validateWorkspace(formats strfmt.Registry) error {

	if err := validate.Required("workspace", "body", m.Workspace); err != nil {
		return err
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artifact version based on the context it is used
func (m *ArtifactVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreateDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactVersion) contextValidateCreateDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createDate", "body", strfmt.DateTime(m.CreateDate)); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArtifactVersion) contextValidateRepository(ctx context.Context, formats strfmt.Registry) error {

	if m.Repository != nil {
		if err := m.Repository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *ArtifactVersion) contextValidateUpdateDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updateDate", "body", strfmt.DateTime(m.UpdateDate)); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactVersion) contextValidateWorkspace(ctx context.Context, formats strfmt.Registry) error {

	if m.Workspace != nil {
		if err := m.Workspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactVersion) UnmarshalBinary(b []byte) error {
	var res ArtifactVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
