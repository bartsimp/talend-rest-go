// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// YarnStrategy yarn strategy
//
// swagger:model YarnStrategy
type YarnStrategy struct {

	// Cores per executor
	CoresPerExecutor int32 `json:"coresPerExecutor,omitempty"`

	// Executor memory (in MB)
	ExecutorMemory int32 `json:"executorMemory,omitempty"`

	// Number of executors (for Fixed strategy)
	ExecutorsNumber int32 `json:"executorsNumber,omitempty"`

	// Initial number of executors (for Dynamic strategy)
	InitialExecutors int32 `json:"initialExecutors,omitempty"`

	// Max. number of executors (for Dynamic strategy)
	MaxExecutors int32 `json:"maxExecutors,omitempty"`

	// Min. number of executors (for Dynamic strategy)
	MinExecutors int32 `json:"minExecutors,omitempty"`

	// Yarn strategy type
	// Required: true
	// Enum: [Fixed Dynamic]
	Type *string `json:"type"`
}

// Validate validates this yarn strategy
func (m *YarnStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var yarnStrategyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Fixed","Dynamic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		yarnStrategyTypeTypePropEnum = append(yarnStrategyTypeTypePropEnum, v)
	}
}

const (

	// YarnStrategyTypeFixed captures enum value "Fixed"
	YarnStrategyTypeFixed string = "Fixed"

	// YarnStrategyTypeDynamic captures enum value "Dynamic"
	YarnStrategyTypeDynamic string = "Dynamic"
)

// prop value enum
func (m *YarnStrategy) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, yarnStrategyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *YarnStrategy) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this yarn strategy based on context it is used
func (m *YarnStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *YarnStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *YarnStrategy) UnmarshalBinary(b []byte) error {
	var res YarnStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
