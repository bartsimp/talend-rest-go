// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskRunConfig task run config
//
// swagger:model TaskRunConfig
type TaskRunConfig struct {

	// Execution log level. 'WARN' by default
	// Example: ERROR
	// Enum: [OFF ERROR WARN INFO]
	LogLevel string `json:"logLevel,omitempty"`

	// Indicates whether this executable is allowed to run in parallel (for REMOTE_ENGINE available from V2.6). 'false' by default
	// Example: false
	ParallelExecutionAllowed bool `json:"parallelExecutionAllowed,omitempty"`

	// Remote run user
	RemoteRunAsUser string `json:"remoteRunAsUser,omitempty"`

	// runtime
	// Required: true
	Runtime *Runtime `json:"runtime"`

	// trigger
	// Required: true
	Trigger *Trigger `json:"trigger"`
}

// Validate validates this task run config
func (m *TaskRunConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskRunConfigTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFF","ERROR","WARN","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskRunConfigTypeLogLevelPropEnum = append(taskRunConfigTypeLogLevelPropEnum, v)
	}
}

const (

	// TaskRunConfigLogLevelOFF captures enum value "OFF"
	TaskRunConfigLogLevelOFF string = "OFF"

	// TaskRunConfigLogLevelERROR captures enum value "ERROR"
	TaskRunConfigLogLevelERROR string = "ERROR"

	// TaskRunConfigLogLevelWARN captures enum value "WARN"
	TaskRunConfigLogLevelWARN string = "WARN"

	// TaskRunConfigLogLevelINFO captures enum value "INFO"
	TaskRunConfigLogLevelINFO string = "INFO"
)

// prop value enum
func (m *TaskRunConfig) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskRunConfigTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskRunConfig) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogLevelEnum("logLevel", "body", m.LogLevel); err != nil {
		return err
	}

	return nil
}

func (m *TaskRunConfig) validateRuntime(formats strfmt.Registry) error {

	if err := validate.Required("runtime", "body", m.Runtime); err != nil {
		return err
	}

	if m.Runtime != nil {
		if err := m.Runtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

func (m *TaskRunConfig) validateTrigger(formats strfmt.Registry) error {

	if err := validate.Required("trigger", "body", m.Trigger); err != nil {
		return err
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this task run config based on the context it is used
func (m *TaskRunConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuntime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskRunConfig) contextValidateRuntime(ctx context.Context, formats strfmt.Registry) error {

	if m.Runtime != nil {
		if err := m.Runtime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

func (m *TaskRunConfig) contextValidateTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.Trigger != nil {
		if err := m.Trigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskRunConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskRunConfig) UnmarshalBinary(b []byte) error {
	var res TaskRunConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
