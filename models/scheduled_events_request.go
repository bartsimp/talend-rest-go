// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduledEventsRequest scheduled events request
//
// swagger:model ScheduledEventsRequest
type ScheduledEventsRequest struct {

	// Environment id
	// Required: true
	EnvironmentID *string `json:"environmentId"`

	// From date time (milliseconds).Default value - now
	From int64 `json:"from,omitempty"`

	// The number of items to return. Must be in range [1, 100]. Default value - 100
	Limit int32 `json:"limit,omitempty"`

	// The position of the first item. Must be greater than or equal to 0. Default value - 0
	Offset int32 `json:"offset,omitempty"`

	// Runtime
	Runtime *ScheduledEventsRequestRuntime `json:"runtime,omitempty"`

	// Tags
	Tags []string `json:"tags"`

	// To date time (milliseconds)
	// Required: true
	To *int64 `json:"to"`

	// Workspace ids. If empty, will return events for all workspaces in the environment
	WorkspaceIds []string `json:"workspaceIds"`
}

// Validate validates this scheduled events request
func (m *ScheduledEventsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledEventsRequest) validateEnvironmentID(formats strfmt.Registry) error {

	if err := validate.Required("environmentId", "body", m.EnvironmentID); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledEventsRequest) validateRuntime(formats strfmt.Registry) error {
	if swag.IsZero(m.Runtime) { // not required
		return nil
	}

	if m.Runtime != nil {
		if err := m.Runtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduledEventsRequest) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scheduled events request based on the context it is used
func (m *ScheduledEventsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuntime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledEventsRequest) contextValidateRuntime(ctx context.Context, formats strfmt.Registry) error {

	if m.Runtime != nil {
		if err := m.Runtime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledEventsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledEventsRequest) UnmarshalBinary(b []byte) error {
	var res ScheduledEventsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
