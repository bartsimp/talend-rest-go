// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterRequest cluster request
//
// swagger:model ClusterRequest
type ClusterRequest struct {

	// Cluster description
	// Example: some description
	// Required: true
	Description *string `json:"description"`

	// Environment identifier
	// Example: 5c935c8ba4186a4eafed0592
	// Required: true
	EnvironmentID *string `json:"environmentId"`

	// Cluster name
	// Example: Some cluster name
	// Required: true
	Name *string `json:"name"`

	// List of remote engine ids
	// Example: ["5d3039de65ff7d3583840bc0","5d3039de65ff7d3583840bk1"]
	// Required: true
	RemoteEngines []string `json:"remoteEngines"`

	// Workspace identifier
	// Example: 5c935c8ba4186a4eafed0592
	// Required: true
	WorkspaceID *string `json:"workspaceId"`
}

// Validate validates this cluster request
func (m *ClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteEngines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateEnvironmentID(formats strfmt.Registry) error {

	if err := validate.Required("environmentId", "body", m.EnvironmentID); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateRemoteEngines(formats strfmt.Registry) error {

	if err := validate.Required("remoteEngines", "body", m.RemoteEngines); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateWorkspaceID(formats strfmt.Registry) error {

	if err := validate.Required("workspaceId", "body", m.WorkspaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster request based on context it is used
func (m *ClusterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterRequest) UnmarshalBinary(b []byte) error {
	var res ClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
