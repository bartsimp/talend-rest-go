// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EngineRequest engine request
//
// swagger:model EngineRequest
type EngineRequest struct {

	// Remote Run/Debug configuration
	// Read Only: true
	Debug *EngineDebug `json:"debug,omitempty"`

	// Engine|cluster description
	// Example: Some description
	// Read Only: true
	Description string `json:"description,omitempty"`

	// Id of engine environment
	// Example: 5c1111d7a4186a4eafed0587
	// Required: true
	EnvironmentID *string `json:"environmentId"`

	// Data Service Runner/Talend Runtime version. Mandatory if TALEND_RUNTIME or MICROSERVICE profile selected
	// Example: 7.2.1
	// Read Only: true
	EsbCompatibilityVersion string `json:"esbCompatibilityVersion,omitempty"`

	// Engine name
	// Example: Remote Engine
	// Required: true
	Name *string `json:"name"`

	// Run profiles of engine
	// Example: ["MICROSERVICE"]
	// Read Only: true
	RunProfiles []string `json:"runProfiles"`

	// Id of engine workspace
	// Example: 5c2222d7a4186a4eafed0587
	// Read Only: true
	WorkspaceID string `json:"workspaceId,omitempty"`
}

// Validate validates this engine request
func (m *EngineRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDebug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineRequest) validateDebug(formats strfmt.Registry) error {
	if swag.IsZero(m.Debug) { // not required
		return nil
	}

	if m.Debug != nil {
		if err := m.Debug.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debug")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debug")
			}
			return err
		}
	}

	return nil
}

func (m *EngineRequest) validateEnvironmentID(formats strfmt.Registry) error {

	if err := validate.Required("environmentId", "body", m.EnvironmentID); err != nil {
		return err
	}

	return nil
}

func (m *EngineRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this engine request based on the context it is used
func (m *EngineRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDebug(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEsbCompatibilityVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineRequest) contextValidateDebug(ctx context.Context, formats strfmt.Registry) error {

	if m.Debug != nil {
		if err := m.Debug.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debug")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debug")
			}
			return err
		}
	}

	return nil
}

func (m *EngineRequest) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *EngineRequest) contextValidateEsbCompatibilityVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "esbCompatibilityVersion", "body", string(m.EsbCompatibilityVersion)); err != nil {
		return err
	}

	return nil
}

func (m *EngineRequest) contextValidateRunProfiles(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "runProfiles", "body", []string(m.RunProfiles)); err != nil {
		return err
	}

	return nil
}

func (m *EngineRequest) contextValidateWorkspaceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "workspaceId", "body", string(m.WorkspaceID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineRequest) UnmarshalBinary(b []byte) error {
	var res EngineRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
