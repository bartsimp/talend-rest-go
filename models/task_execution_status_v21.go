// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskExecutionStatusV21 Task Execution info
//
// swagger:model TaskExecutionStatusV21
type TaskExecutionStatusV21 struct {

	// Error message if error occurs
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Job execution ID
	// Example: 7b2b122e-d6b8-42de-b0ba-fa2f0d36306e
	// Required: true
	ExecutionID *string `json:"executionId"`

	// Execution (detailed) status
	// Example: DEPLOY_FAILED
	// Required: true
	// Enum: [DEPLOY_FAILED EXECUTION_SUCCESS EXECUTION_FAILED EXECUTION_TERMINATED EXECUTION_TERMINATED_TIMEOUT EXECUTION_REJECTED EXECUTION_EVENT_RECEIVED DISPATCHING_FLOW STARTING_FLOW_EXECUTION STOPPING_FLOW_EXECUTION UNKNOWN]
	ExecutionStatus *string `json:"executionStatus"`

	// Execution type
	// Example: SCHEDULED
	// Required: true
	// Enum: [MANUAL SCHEDULED WEBHOOK PLAN]
	ExecutionType *string `json:"executionType"`

	// End time of job execution
	// Format: date-time
	FinishTimestamp strfmt.DateTime `json:"finishTimestamp,omitempty"`

	// Executable runtime
	Runtime *Runtime `json:"runtime,omitempty"`

	// Start time of job execution
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"startTimestamp"`

	// Execution status
	// Example: executing
	// Required: true
	// Enum: [dispatching deploy_failed executing execution_successful execution_rejected execution_failed terminated terminated_timeout]
	Status *string `json:"status"`

	// Task Id
	// Example: 57f64991e4b0b689a64feed0
	// Required: true
	TaskID *string `json:"taskId"`

	// Task version
	// Required: true
	TaskVersion *string `json:"taskVersion"`

	// Execution timeout if set (in minutes)
	Timeout int32 `json:"timeout,omitempty"`

	// Trigger time of job execution
	// Required: true
	// Format: date-time
	TriggerTimestamp *strfmt.DateTime `json:"triggerTimestamp"`

	// User who triggered or scheduled the execution
	// Example: fupton
	// Required: true
	UserID *string `json:"userId"`

	// Type of user who triggered or scheduled the execution
	// Example: HUMAN
	// Required: true
	// Enum: [HUMAN SERVICE]
	UserType *string `json:"userType"`
}

// Validate validates this task execution status v21
func (m *TaskExecutionStatusV21) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskExecutionStatusV21) validateExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("executionId", "body", m.ExecutionID); err != nil {
		return err
	}

	return nil
}

var taskExecutionStatusV21TypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEPLOY_FAILED","EXECUTION_SUCCESS","EXECUTION_FAILED","EXECUTION_TERMINATED","EXECUTION_TERMINATED_TIMEOUT","EXECUTION_REJECTED","EXECUTION_EVENT_RECEIVED","DISPATCHING_FLOW","STARTING_FLOW_EXECUTION","STOPPING_FLOW_EXECUTION","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionStatusV21TypeExecutionStatusPropEnum = append(taskExecutionStatusV21TypeExecutionStatusPropEnum, v)
	}
}

const (

	// TaskExecutionStatusV21ExecutionStatusDEPLOYFAILED captures enum value "DEPLOY_FAILED"
	TaskExecutionStatusV21ExecutionStatusDEPLOYFAILED string = "DEPLOY_FAILED"

	// TaskExecutionStatusV21ExecutionStatusEXECUTIONSUCCESS captures enum value "EXECUTION_SUCCESS"
	TaskExecutionStatusV21ExecutionStatusEXECUTIONSUCCESS string = "EXECUTION_SUCCESS"

	// TaskExecutionStatusV21ExecutionStatusEXECUTIONFAILED captures enum value "EXECUTION_FAILED"
	TaskExecutionStatusV21ExecutionStatusEXECUTIONFAILED string = "EXECUTION_FAILED"

	// TaskExecutionStatusV21ExecutionStatusEXECUTIONTERMINATED captures enum value "EXECUTION_TERMINATED"
	TaskExecutionStatusV21ExecutionStatusEXECUTIONTERMINATED string = "EXECUTION_TERMINATED"

	// TaskExecutionStatusV21ExecutionStatusEXECUTIONTERMINATEDTIMEOUT captures enum value "EXECUTION_TERMINATED_TIMEOUT"
	TaskExecutionStatusV21ExecutionStatusEXECUTIONTERMINATEDTIMEOUT string = "EXECUTION_TERMINATED_TIMEOUT"

	// TaskExecutionStatusV21ExecutionStatusEXECUTIONREJECTED captures enum value "EXECUTION_REJECTED"
	TaskExecutionStatusV21ExecutionStatusEXECUTIONREJECTED string = "EXECUTION_REJECTED"

	// TaskExecutionStatusV21ExecutionStatusEXECUTIONEVENTRECEIVED captures enum value "EXECUTION_EVENT_RECEIVED"
	TaskExecutionStatusV21ExecutionStatusEXECUTIONEVENTRECEIVED string = "EXECUTION_EVENT_RECEIVED"

	// TaskExecutionStatusV21ExecutionStatusDISPATCHINGFLOW captures enum value "DISPATCHING_FLOW"
	TaskExecutionStatusV21ExecutionStatusDISPATCHINGFLOW string = "DISPATCHING_FLOW"

	// TaskExecutionStatusV21ExecutionStatusSTARTINGFLOWEXECUTION captures enum value "STARTING_FLOW_EXECUTION"
	TaskExecutionStatusV21ExecutionStatusSTARTINGFLOWEXECUTION string = "STARTING_FLOW_EXECUTION"

	// TaskExecutionStatusV21ExecutionStatusSTOPPINGFLOWEXECUTION captures enum value "STOPPING_FLOW_EXECUTION"
	TaskExecutionStatusV21ExecutionStatusSTOPPINGFLOWEXECUTION string = "STOPPING_FLOW_EXECUTION"

	// TaskExecutionStatusV21ExecutionStatusUNKNOWN captures enum value "UNKNOWN"
	TaskExecutionStatusV21ExecutionStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *TaskExecutionStatusV21) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskExecutionStatusV21TypeExecutionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionStatusV21) validateExecutionStatus(formats strfmt.Registry) error {

	if err := validate.Required("executionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionStatusEnum("executionStatus", "body", *m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

var taskExecutionStatusV21TypeExecutionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","SCHEDULED","WEBHOOK","PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionStatusV21TypeExecutionTypePropEnum = append(taskExecutionStatusV21TypeExecutionTypePropEnum, v)
	}
}

const (

	// TaskExecutionStatusV21ExecutionTypeMANUAL captures enum value "MANUAL"
	TaskExecutionStatusV21ExecutionTypeMANUAL string = "MANUAL"

	// TaskExecutionStatusV21ExecutionTypeSCHEDULED captures enum value "SCHEDULED"
	TaskExecutionStatusV21ExecutionTypeSCHEDULED string = "SCHEDULED"

	// TaskExecutionStatusV21ExecutionTypeWEBHOOK captures enum value "WEBHOOK"
	TaskExecutionStatusV21ExecutionTypeWEBHOOK string = "WEBHOOK"

	// TaskExecutionStatusV21ExecutionTypePLAN captures enum value "PLAN"
	TaskExecutionStatusV21ExecutionTypePLAN string = "PLAN"
)

// prop value enum
func (m *TaskExecutionStatusV21) validateExecutionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskExecutionStatusV21TypeExecutionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionStatusV21) validateExecutionType(formats strfmt.Registry) error {

	if err := validate.Required("executionType", "body", m.ExecutionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionTypeEnum("executionType", "body", *m.ExecutionType); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionStatusV21) validateFinishTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTimestamp", "body", "date-time", m.FinishTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionStatusV21) validateRuntime(formats strfmt.Registry) error {
	if swag.IsZero(m.Runtime) { // not required
		return nil
	}

	if m.Runtime != nil {
		if err := m.Runtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

func (m *TaskExecutionStatusV21) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("startTimestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("startTimestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var taskExecutionStatusV21TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dispatching","deploy_failed","executing","execution_successful","execution_rejected","execution_failed","terminated","terminated_timeout"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionStatusV21TypeStatusPropEnum = append(taskExecutionStatusV21TypeStatusPropEnum, v)
	}
}

const (

	// TaskExecutionStatusV21StatusDispatching captures enum value "dispatching"
	TaskExecutionStatusV21StatusDispatching string = "dispatching"

	// TaskExecutionStatusV21StatusDeployFailed captures enum value "deploy_failed"
	TaskExecutionStatusV21StatusDeployFailed string = "deploy_failed"

	// TaskExecutionStatusV21StatusExecuting captures enum value "executing"
	TaskExecutionStatusV21StatusExecuting string = "executing"

	// TaskExecutionStatusV21StatusExecutionSuccessful captures enum value "execution_successful"
	TaskExecutionStatusV21StatusExecutionSuccessful string = "execution_successful"

	// TaskExecutionStatusV21StatusExecutionRejected captures enum value "execution_rejected"
	TaskExecutionStatusV21StatusExecutionRejected string = "execution_rejected"

	// TaskExecutionStatusV21StatusExecutionFailed captures enum value "execution_failed"
	TaskExecutionStatusV21StatusExecutionFailed string = "execution_failed"

	// TaskExecutionStatusV21StatusTerminated captures enum value "terminated"
	TaskExecutionStatusV21StatusTerminated string = "terminated"

	// TaskExecutionStatusV21StatusTerminatedTimeout captures enum value "terminated_timeout"
	TaskExecutionStatusV21StatusTerminatedTimeout string = "terminated_timeout"
)

// prop value enum
func (m *TaskExecutionStatusV21) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskExecutionStatusV21TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionStatusV21) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionStatusV21) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("taskId", "body", m.TaskID); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionStatusV21) validateTaskVersion(formats strfmt.Registry) error {

	if err := validate.Required("taskVersion", "body", m.TaskVersion); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionStatusV21) validateTriggerTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("triggerTimestamp", "body", m.TriggerTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("triggerTimestamp", "body", "date-time", m.TriggerTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionStatusV21) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

var taskExecutionStatusV21TypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionStatusV21TypeUserTypePropEnum = append(taskExecutionStatusV21TypeUserTypePropEnum, v)
	}
}

const (

	// TaskExecutionStatusV21UserTypeHUMAN captures enum value "HUMAN"
	TaskExecutionStatusV21UserTypeHUMAN string = "HUMAN"

	// TaskExecutionStatusV21UserTypeSERVICE captures enum value "SERVICE"
	TaskExecutionStatusV21UserTypeSERVICE string = "SERVICE"
)

// prop value enum
func (m *TaskExecutionStatusV21) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskExecutionStatusV21TypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionStatusV21) validateUserType(formats strfmt.Registry) error {

	if err := validate.Required("userType", "body", m.UserType); err != nil {
		return err
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", *m.UserType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task execution status v21 based on the context it is used
func (m *TaskExecutionStatusV21) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuntime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskExecutionStatusV21) contextValidateRuntime(ctx context.Context, formats strfmt.Registry) error {

	if m.Runtime != nil {
		if err := m.Runtime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskExecutionStatusV21) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskExecutionStatusV21) UnmarshalBinary(b []byte) error {
	var res TaskExecutionStatusV21
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
