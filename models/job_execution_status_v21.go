// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobExecutionStatusV21 Execution info
//
// swagger:model JobExecutionStatusV21
type JobExecutionStatusV21 struct {

	// Account ID
	// Example: 8494b016-b5ef-4b9c-b16d-8b1f824d7616
	// Required: true
	AccountID *string `json:"accountId"`

	// Container ID
	ContainerID string `json:"containerId,omitempty"`

	// Execution environment version
	// Example: 1.3
	// Required: true
	// Enum: [1.2 1.3]
	EnvironmentVersion *string `json:"environmentVersion"`

	// Error message if error occurs
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Error type if error occurs
	ErrorType string `json:"errorType,omitempty"`

	// Destination of execution
	// Example: REMOTE_ENGINE
	// Required: true
	// Enum: [CLOUD CLOUD_EXCLUSIVE REMOTE_ENGINE REMOTE_ENGINE_CLUSTER]
	ExecutionDestination *string `json:"executionDestination"`

	// Job execution ID
	// Example: 7b2b122e-d6b8-42de-b0ba-fa2f0d36306e
	// Required: true
	ExecutionID *string `json:"executionId"`

	// Execution status
	// Required: true
	// Enum: [EXECUTION_EVENT_RECEIVED DISPATCHING_FLOW STARTING_FLOW_EXECUTION STOPPING_FLOW_EXECUTION EXECUTION_TERMINATED EXECUTION_TERMINATED_TIMEOUT DEPLOY_FAILED EXECUTION_FAILED EXECUTION_REJECTED EXECUTION_SUCCESS]
	ExecutionStatus *string `json:"executionStatus"`

	// Execution type
	// Example: SCHEDULED
	// Required: true
	// Enum: [MANUAL SCHEDULED WEBHOOK PLAN]
	ExecutionType *string `json:"executionType"`

	// End time of job execution (UTC)
	// Format: date-time
	FinishTimestamp strfmt.DateTime `json:"finishTimestamp,omitempty"`

	// Job ID
	// Example: 57f64991e4b0b689a64feed0
	// Required: true
	JobID *string `json:"jobId"`

	// The version of the executed job
	// Example: 5.2
	// Required: true
	JobVersion *string `json:"jobVersion"`

	// Number of processed rows
	// Example: 1234567890
	NumberOfProcessedRows int64 `json:"numberOfProcessedRows,omitempty"`

	// Number of rejected rows
	// Example: 0
	NumberOfRejectedRows int64 `json:"numberOfRejectedRows,omitempty"`

	// Plan execution ID
	PlanID string `json:"planId,omitempty"`

	// Remote engine cluster ID
	RemoteEngineClusterID string `json:"remoteEngineClusterId,omitempty"`

	// Remote engine ID
	// Example: 157f818f-a901-4425-b592-0f9282687784
	RemoteEngineID string `json:"remoteEngineId,omitempty"`

	// Run profile ID
	// Example: 157f818f-a901-4425-b592-0f9282687784
	RunProfileID string `json:"runProfileId,omitempty"`

	// Start time of job execution (UTC)
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"startTimestamp"`

	// Task execution status
	// Example: execution_successful
	// Required: true
	// Enum: [dispatching deploy_failed executing execution_rejected execution_successful execution_failed terminated]
	Status *string `json:"status"`

	// Trigger time of job execution (UTC)
	// Required: true
	// Format: date-time
	TriggerTimestamp *strfmt.DateTime `json:"triggerTimestamp"`

	// User who triggered or scheduled the execution
	// Example: fupton
	// Required: true
	UserID *string `json:"userId"`

	// Type of user who triggered or scheduled the execution
	// Example: HUMAN
	// Required: true
	// Enum: [HUMAN SERVICE]
	UserType *string `json:"userType"`

	// Workspace ID
	// Example: 57ce63d3e4b0681c36d1a1c4
	// Required: true
	WorkspaceID *string `json:"workspaceId"`
}

// Validate validates this job execution status v21
func (m *JobExecutionStatusV21) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobExecutionStatusV21) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusV21TypeEnvironmentVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1.2","1.3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusV21TypeEnvironmentVersionPropEnum = append(jobExecutionStatusV21TypeEnvironmentVersionPropEnum, v)
	}
}

const (

	// JobExecutionStatusV21EnvironmentVersionNr1Dot2 captures enum value "1.2"
	JobExecutionStatusV21EnvironmentVersionNr1Dot2 string = "1.2"

	// JobExecutionStatusV21EnvironmentVersionNr1Dot3 captures enum value "1.3"
	JobExecutionStatusV21EnvironmentVersionNr1Dot3 string = "1.3"
)

// prop value enum
func (m *JobExecutionStatusV21) validateEnvironmentVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusV21TypeEnvironmentVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatusV21) validateEnvironmentVersion(formats strfmt.Registry) error {

	if err := validate.Required("environmentVersion", "body", m.EnvironmentVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvironmentVersionEnum("environmentVersion", "body", *m.EnvironmentVersion); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusV21TypeExecutionDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUD","CLOUD_EXCLUSIVE","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusV21TypeExecutionDestinationPropEnum = append(jobExecutionStatusV21TypeExecutionDestinationPropEnum, v)
	}
}

const (

	// JobExecutionStatusV21ExecutionDestinationCLOUD captures enum value "CLOUD"
	JobExecutionStatusV21ExecutionDestinationCLOUD string = "CLOUD"

	// JobExecutionStatusV21ExecutionDestinationCLOUDEXCLUSIVE captures enum value "CLOUD_EXCLUSIVE"
	JobExecutionStatusV21ExecutionDestinationCLOUDEXCLUSIVE string = "CLOUD_EXCLUSIVE"

	// JobExecutionStatusV21ExecutionDestinationREMOTEENGINE captures enum value "REMOTE_ENGINE"
	JobExecutionStatusV21ExecutionDestinationREMOTEENGINE string = "REMOTE_ENGINE"

	// JobExecutionStatusV21ExecutionDestinationREMOTEENGINECLUSTER captures enum value "REMOTE_ENGINE_CLUSTER"
	JobExecutionStatusV21ExecutionDestinationREMOTEENGINECLUSTER string = "REMOTE_ENGINE_CLUSTER"
)

// prop value enum
func (m *JobExecutionStatusV21) validateExecutionDestinationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusV21TypeExecutionDestinationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatusV21) validateExecutionDestination(formats strfmt.Registry) error {

	if err := validate.Required("executionDestination", "body", m.ExecutionDestination); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionDestinationEnum("executionDestination", "body", *m.ExecutionDestination); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("executionId", "body", m.ExecutionID); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusV21TypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXECUTION_EVENT_RECEIVED","DISPATCHING_FLOW","STARTING_FLOW_EXECUTION","STOPPING_FLOW_EXECUTION","EXECUTION_TERMINATED","EXECUTION_TERMINATED_TIMEOUT","DEPLOY_FAILED","EXECUTION_FAILED","EXECUTION_REJECTED","EXECUTION_SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusV21TypeExecutionStatusPropEnum = append(jobExecutionStatusV21TypeExecutionStatusPropEnum, v)
	}
}

const (

	// JobExecutionStatusV21ExecutionStatusEXECUTIONEVENTRECEIVED captures enum value "EXECUTION_EVENT_RECEIVED"
	JobExecutionStatusV21ExecutionStatusEXECUTIONEVENTRECEIVED string = "EXECUTION_EVENT_RECEIVED"

	// JobExecutionStatusV21ExecutionStatusDISPATCHINGFLOW captures enum value "DISPATCHING_FLOW"
	JobExecutionStatusV21ExecutionStatusDISPATCHINGFLOW string = "DISPATCHING_FLOW"

	// JobExecutionStatusV21ExecutionStatusSTARTINGFLOWEXECUTION captures enum value "STARTING_FLOW_EXECUTION"
	JobExecutionStatusV21ExecutionStatusSTARTINGFLOWEXECUTION string = "STARTING_FLOW_EXECUTION"

	// JobExecutionStatusV21ExecutionStatusSTOPPINGFLOWEXECUTION captures enum value "STOPPING_FLOW_EXECUTION"
	JobExecutionStatusV21ExecutionStatusSTOPPINGFLOWEXECUTION string = "STOPPING_FLOW_EXECUTION"

	// JobExecutionStatusV21ExecutionStatusEXECUTIONTERMINATED captures enum value "EXECUTION_TERMINATED"
	JobExecutionStatusV21ExecutionStatusEXECUTIONTERMINATED string = "EXECUTION_TERMINATED"

	// JobExecutionStatusV21ExecutionStatusEXECUTIONTERMINATEDTIMEOUT captures enum value "EXECUTION_TERMINATED_TIMEOUT"
	JobExecutionStatusV21ExecutionStatusEXECUTIONTERMINATEDTIMEOUT string = "EXECUTION_TERMINATED_TIMEOUT"

	// JobExecutionStatusV21ExecutionStatusDEPLOYFAILED captures enum value "DEPLOY_FAILED"
	JobExecutionStatusV21ExecutionStatusDEPLOYFAILED string = "DEPLOY_FAILED"

	// JobExecutionStatusV21ExecutionStatusEXECUTIONFAILED captures enum value "EXECUTION_FAILED"
	JobExecutionStatusV21ExecutionStatusEXECUTIONFAILED string = "EXECUTION_FAILED"

	// JobExecutionStatusV21ExecutionStatusEXECUTIONREJECTED captures enum value "EXECUTION_REJECTED"
	JobExecutionStatusV21ExecutionStatusEXECUTIONREJECTED string = "EXECUTION_REJECTED"

	// JobExecutionStatusV21ExecutionStatusEXECUTIONSUCCESS captures enum value "EXECUTION_SUCCESS"
	JobExecutionStatusV21ExecutionStatusEXECUTIONSUCCESS string = "EXECUTION_SUCCESS"
)

// prop value enum
func (m *JobExecutionStatusV21) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusV21TypeExecutionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatusV21) validateExecutionStatus(formats strfmt.Registry) error {

	if err := validate.Required("executionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionStatusEnum("executionStatus", "body", *m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusV21TypeExecutionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","SCHEDULED","WEBHOOK","PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusV21TypeExecutionTypePropEnum = append(jobExecutionStatusV21TypeExecutionTypePropEnum, v)
	}
}

const (

	// JobExecutionStatusV21ExecutionTypeMANUAL captures enum value "MANUAL"
	JobExecutionStatusV21ExecutionTypeMANUAL string = "MANUAL"

	// JobExecutionStatusV21ExecutionTypeSCHEDULED captures enum value "SCHEDULED"
	JobExecutionStatusV21ExecutionTypeSCHEDULED string = "SCHEDULED"

	// JobExecutionStatusV21ExecutionTypeWEBHOOK captures enum value "WEBHOOK"
	JobExecutionStatusV21ExecutionTypeWEBHOOK string = "WEBHOOK"

	// JobExecutionStatusV21ExecutionTypePLAN captures enum value "PLAN"
	JobExecutionStatusV21ExecutionTypePLAN string = "PLAN"
)

// prop value enum
func (m *JobExecutionStatusV21) validateExecutionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusV21TypeExecutionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatusV21) validateExecutionType(formats strfmt.Registry) error {

	if err := validate.Required("executionType", "body", m.ExecutionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionTypeEnum("executionType", "body", *m.ExecutionType); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateFinishTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTimestamp", "body", "date-time", m.FinishTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("jobId", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateJobVersion(formats strfmt.Registry) error {

	if err := validate.Required("jobVersion", "body", m.JobVersion); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("startTimestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("startTimestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusV21TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dispatching","deploy_failed","executing","execution_rejected","execution_successful","execution_failed","terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusV21TypeStatusPropEnum = append(jobExecutionStatusV21TypeStatusPropEnum, v)
	}
}

const (

	// JobExecutionStatusV21StatusDispatching captures enum value "dispatching"
	JobExecutionStatusV21StatusDispatching string = "dispatching"

	// JobExecutionStatusV21StatusDeployFailed captures enum value "deploy_failed"
	JobExecutionStatusV21StatusDeployFailed string = "deploy_failed"

	// JobExecutionStatusV21StatusExecuting captures enum value "executing"
	JobExecutionStatusV21StatusExecuting string = "executing"

	// JobExecutionStatusV21StatusExecutionRejected captures enum value "execution_rejected"
	JobExecutionStatusV21StatusExecutionRejected string = "execution_rejected"

	// JobExecutionStatusV21StatusExecutionSuccessful captures enum value "execution_successful"
	JobExecutionStatusV21StatusExecutionSuccessful string = "execution_successful"

	// JobExecutionStatusV21StatusExecutionFailed captures enum value "execution_failed"
	JobExecutionStatusV21StatusExecutionFailed string = "execution_failed"

	// JobExecutionStatusV21StatusTerminated captures enum value "terminated"
	JobExecutionStatusV21StatusTerminated string = "terminated"
)

// prop value enum
func (m *JobExecutionStatusV21) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusV21TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatusV21) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateTriggerTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("triggerTimestamp", "body", m.TriggerTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("triggerTimestamp", "body", "date-time", m.TriggerTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusV21TypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusV21TypeUserTypePropEnum = append(jobExecutionStatusV21TypeUserTypePropEnum, v)
	}
}

const (

	// JobExecutionStatusV21UserTypeHUMAN captures enum value "HUMAN"
	JobExecutionStatusV21UserTypeHUMAN string = "HUMAN"

	// JobExecutionStatusV21UserTypeSERVICE captures enum value "SERVICE"
	JobExecutionStatusV21UserTypeSERVICE string = "SERVICE"
)

// prop value enum
func (m *JobExecutionStatusV21) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusV21TypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatusV21) validateUserType(formats strfmt.Registry) error {

	if err := validate.Required("userType", "body", m.UserType); err != nil {
		return err
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", *m.UserType); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatusV21) validateWorkspaceID(formats strfmt.Registry) error {

	if err := validate.Required("workspaceId", "body", m.WorkspaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this job execution status v21 based on context it is used
func (m *JobExecutionStatusV21) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobExecutionStatusV21) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobExecutionStatusV21) UnmarshalBinary(b []byte) error {
	var res JobExecutionStatusV21
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
