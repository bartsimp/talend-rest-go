// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspacePromotionResult workspace promotion result
//
// swagger:model WorkspacePromotionResult
type WorkspacePromotionResult struct {

	// Actions Promotion Execution Info
	Actions []*ArtifactPromotionResult `json:"actions"`

	// Promotion Analyze Report
	AnalyzeReport *Report `json:"analyzeReport,omitempty"`

	// Clusters Promotion Execution Info
	Clusters []*RuntimePromotionResult `json:"clusters"`

	// Connections Promotion Execution Info
	Connections []*ArtifactPromotionResult `json:"connections"`

	// Engines Promotion Execution Info
	Engines []*RuntimePromotionResult `json:"engines"`

	// Flows Promotion Execution Info
	Flows []*ArtifactPromotionResult `json:"flows"`

	// Artifact ID
	ID string `json:"id,omitempty"`

	// Artifact Name
	Name string `json:"name,omitempty"`

	// Plans Promotion Execution Info
	Plans []*ArtifactPromotionResult `json:"plans"`

	// Promotion Report
	PromotionReport *Report `json:"promotionReport,omitempty"`

	// Resources Promotion Execution Info
	Resources []*ArtifactPromotionResult `json:"resources"`

	// Target Artifact ID
	TargetID string `json:"targetId,omitempty"`

	// Artifact target version
	TargetVersion string `json:"targetVersion,omitempty"`

	// Artifact Type
	// Example: WORKSPACE
	// Enum: [WORKSPACE PLAN FLOW ACTION CONNECTION RESOURCE ENGINE CLUSTER]
	Type string `json:"type,omitempty"`

	// Artifact version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this workspace promotion result
func (m *WorkspacePromotionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnalyzeReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEngines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspacePromotionResult) validateActions(formats strfmt.Registry) error {
	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) validateAnalyzeReport(formats strfmt.Registry) error {
	if swag.IsZero(m.AnalyzeReport) { // not required
		return nil
	}

	if m.AnalyzeReport != nil {
		if err := m.AnalyzeReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analyzeReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analyzeReport")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspacePromotionResult) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) validateEngines(formats strfmt.Registry) error {
	if swag.IsZero(m.Engines) { // not required
		return nil
	}

	for i := 0; i < len(m.Engines); i++ {
		if swag.IsZero(m.Engines[i]) { // not required
			continue
		}

		if m.Engines[i] != nil {
			if err := m.Engines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("engines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("engines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) validateFlows(formats strfmt.Registry) error {
	if swag.IsZero(m.Flows) { // not required
		return nil
	}

	for i := 0; i < len(m.Flows); i++ {
		if swag.IsZero(m.Flows[i]) { // not required
			continue
		}

		if m.Flows[i] != nil {
			if err := m.Flows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) validatePlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Plans) { // not required
		return nil
	}

	for i := 0; i < len(m.Plans); i++ {
		if swag.IsZero(m.Plans[i]) { // not required
			continue
		}

		if m.Plans[i] != nil {
			if err := m.Plans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) validatePromotionReport(formats strfmt.Registry) error {
	if swag.IsZero(m.PromotionReport) { // not required
		return nil
	}

	if m.PromotionReport != nil {
		if err := m.PromotionReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotionReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotionReport")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspacePromotionResult) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workspacePromotionResultTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WORKSPACE","PLAN","FLOW","ACTION","CONNECTION","RESOURCE","ENGINE","CLUSTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspacePromotionResultTypeTypePropEnum = append(workspacePromotionResultTypeTypePropEnum, v)
	}
}

const (

	// WorkspacePromotionResultTypeWORKSPACE captures enum value "WORKSPACE"
	WorkspacePromotionResultTypeWORKSPACE string = "WORKSPACE"

	// WorkspacePromotionResultTypePLAN captures enum value "PLAN"
	WorkspacePromotionResultTypePLAN string = "PLAN"

	// WorkspacePromotionResultTypeFLOW captures enum value "FLOW"
	WorkspacePromotionResultTypeFLOW string = "FLOW"

	// WorkspacePromotionResultTypeACTION captures enum value "ACTION"
	WorkspacePromotionResultTypeACTION string = "ACTION"

	// WorkspacePromotionResultTypeCONNECTION captures enum value "CONNECTION"
	WorkspacePromotionResultTypeCONNECTION string = "CONNECTION"

	// WorkspacePromotionResultTypeRESOURCE captures enum value "RESOURCE"
	WorkspacePromotionResultTypeRESOURCE string = "RESOURCE"

	// WorkspacePromotionResultTypeENGINE captures enum value "ENGINE"
	WorkspacePromotionResultTypeENGINE string = "ENGINE"

	// WorkspacePromotionResultTypeCLUSTER captures enum value "CLUSTER"
	WorkspacePromotionResultTypeCLUSTER string = "CLUSTER"
)

// prop value enum
func (m *WorkspacePromotionResult) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspacePromotionResultTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkspacePromotionResult) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this workspace promotion result based on the context it is used
func (m *WorkspacePromotionResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnalyzeReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEngines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromotionReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspacePromotionResult) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Actions); i++ {

		if m.Actions[i] != nil {
			if err := m.Actions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidateAnalyzeReport(ctx context.Context, formats strfmt.Registry) error {

	if m.AnalyzeReport != nil {
		if err := m.AnalyzeReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analyzeReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analyzeReport")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {
			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidateEngines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Engines); i++ {

		if m.Engines[i] != nil {
			if err := m.Engines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("engines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("engines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidateFlows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Flows); i++ {

		if m.Flows[i] != nil {
			if err := m.Flows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidatePlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plans); i++ {

		if m.Plans[i] != nil {
			if err := m.Plans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidatePromotionReport(ctx context.Context, formats strfmt.Registry) error {

	if m.PromotionReport != nil {
		if err := m.PromotionReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotionReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotionReport")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspacePromotionResult) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspacePromotionResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspacePromotionResult) UnmarshalBinary(b []byte) error {
	var res WorkspacePromotionResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
