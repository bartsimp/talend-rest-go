// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Message message
//
// swagger:model Message
type Message struct {

	// info
	// Read Only: true
	Info string `json:"info,omitempty"`

	// level
	// Read Only: true
	// Enum: [INFO WARN ERROR]
	Level string `json:"level,omitempty"`
}

// Validate validates this message
func (m *Message) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var messageTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFO","WARN","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageTypeLevelPropEnum = append(messageTypeLevelPropEnum, v)
	}
}

const (

	// MessageLevelINFO captures enum value "INFO"
	MessageLevelINFO string = "INFO"

	// MessageLevelWARN captures enum value "WARN"
	MessageLevelWARN string = "WARN"

	// MessageLevelERROR captures enum value "ERROR"
	MessageLevelERROR string = "ERROR"
)

// prop value enum
func (m *Message) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Message) validateLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this message based on the context it is used
func (m *Message) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Message) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "info", "body", string(m.Info)); err != nil {
		return err
	}

	return nil
}

func (m *Message) contextValidateLevel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "level", "body", string(m.Level)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Message) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Message) UnmarshalBinary(b []byte) error {
	var res Message
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
