// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobExecutionStatus Execution info
//
// swagger:model JobExecutionStatus
type JobExecutionStatus struct {

	// Account ID
	// Example: 8494b016-b5ef-4b9c-b16d-8b1f824d7616
	// Required: true
	AccountID *string `json:"accountId"`

	// Container ID
	ContainerID string `json:"containerId,omitempty"`

	// Execution environment version
	// Example: 1.3
	// Required: true
	// Enum: [1.2 1.3]
	EnvironmentVersion *string `json:"environmentVersion"`

	// Error message if error occurs
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Error type if error occurs
	ErrorType string `json:"errorType,omitempty"`

	// Destination of execution
	// Example: REMOTE_ENGINE
	// Required: true
	// Enum: [CLOUD CLOUD_EXCLUSIVE REMOTE_ENGINE REMOTE_ENGINE_CLUSTER]
	ExecutionDestination *string `json:"executionDestination"`

	// Job execution ID
	// Example: 7b2b122e-d6b8-42de-b0ba-fa2f0d36306e
	// Required: true
	ExecutionID *string `json:"executionId"`

	// Execution status
	// Required: true
	// Enum: [EXECUTION_EVENT_RECEIVED DISPATCHING_FLOW STARTING_FLOW_EXECUTION STOPPING_FLOW_EXECUTION EXECUTION_TERMINATED EXECUTION_TERMINATED_TIMEOUT DEPLOY_FAILED EXECUTION_FAILED EXECUTION_REJECTED EXECUTION_SUCCESS]
	ExecutionStatus *string `json:"executionStatus"`

	// Execution type
	// Example: SCHEDULED
	// Required: true
	// Enum: [MANUAL SCHEDULED WEBHOOK PLAN]
	ExecutionType *string `json:"executionType"`

	// End time of job execution (UTC)
	// Format: date-time
	FinishTimestamp strfmt.DateTime `json:"finishTimestamp,omitempty"`

	// Job ID
	// Example: 57f64991e4b0b689a64feed0
	// Required: true
	JobID *string `json:"jobId"`

	// The version of the executed job
	// Example: 5.2
	// Required: true
	JobVersion *string `json:"jobVersion"`

	// Number of processed rows
	// Example: 1234567890
	NumberOfProcessedRows int64 `json:"numberOfProcessedRows,omitempty"`

	// Number of rejected rows
	// Example: 0
	NumberOfRejectedRows int64 `json:"numberOfRejectedRows,omitempty"`

	// Plan execution ID
	PlanID string `json:"planId,omitempty"`

	// Remote engine cluster ID
	RemoteEngineClusterID string `json:"remoteEngineClusterId,omitempty"`

	// Remote engine ID
	// Example: 157f818f-a901-4425-b592-0f9282687784
	RemoteEngineID string `json:"remoteEngineId,omitempty"`

	// Run profile ID
	// Example: 157f818f-a901-4425-b592-0f9282687784
	RunProfileID string `json:"runProfileId,omitempty"`

	// Start time of job execution (UTC)
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"startTimestamp"`

	// Trigger time of job execution (UTC)
	// Required: true
	// Format: date-time
	TriggerTimestamp *strfmt.DateTime `json:"triggerTimestamp"`

	// User who triggered or scheduled the execution
	// Example: fupton
	// Required: true
	UserID *string `json:"userId"`

	// Type of user who triggered or scheduled the execution
	// Example: HUMAN
	// Required: true
	// Enum: [HUMAN SERVICE]
	UserType *string `json:"userType"`

	// Workspace ID
	// Example: 57ce63d3e4b0681c36d1a1c4
	// Required: true
	WorkspaceID *string `json:"workspaceId"`
}

// Validate validates this job execution status
func (m *JobExecutionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobExecutionStatus) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusTypeEnvironmentVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1.2","1.3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusTypeEnvironmentVersionPropEnum = append(jobExecutionStatusTypeEnvironmentVersionPropEnum, v)
	}
}

const (

	// JobExecutionStatusEnvironmentVersionNr1Dot2 captures enum value "1.2"
	JobExecutionStatusEnvironmentVersionNr1Dot2 string = "1.2"

	// JobExecutionStatusEnvironmentVersionNr1Dot3 captures enum value "1.3"
	JobExecutionStatusEnvironmentVersionNr1Dot3 string = "1.3"
)

// prop value enum
func (m *JobExecutionStatus) validateEnvironmentVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusTypeEnvironmentVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatus) validateEnvironmentVersion(formats strfmt.Registry) error {

	if err := validate.Required("environmentVersion", "body", m.EnvironmentVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvironmentVersionEnum("environmentVersion", "body", *m.EnvironmentVersion); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusTypeExecutionDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUD","CLOUD_EXCLUSIVE","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusTypeExecutionDestinationPropEnum = append(jobExecutionStatusTypeExecutionDestinationPropEnum, v)
	}
}

const (

	// JobExecutionStatusExecutionDestinationCLOUD captures enum value "CLOUD"
	JobExecutionStatusExecutionDestinationCLOUD string = "CLOUD"

	// JobExecutionStatusExecutionDestinationCLOUDEXCLUSIVE captures enum value "CLOUD_EXCLUSIVE"
	JobExecutionStatusExecutionDestinationCLOUDEXCLUSIVE string = "CLOUD_EXCLUSIVE"

	// JobExecutionStatusExecutionDestinationREMOTEENGINE captures enum value "REMOTE_ENGINE"
	JobExecutionStatusExecutionDestinationREMOTEENGINE string = "REMOTE_ENGINE"

	// JobExecutionStatusExecutionDestinationREMOTEENGINECLUSTER captures enum value "REMOTE_ENGINE_CLUSTER"
	JobExecutionStatusExecutionDestinationREMOTEENGINECLUSTER string = "REMOTE_ENGINE_CLUSTER"
)

// prop value enum
func (m *JobExecutionStatus) validateExecutionDestinationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusTypeExecutionDestinationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatus) validateExecutionDestination(formats strfmt.Registry) error {

	if err := validate.Required("executionDestination", "body", m.ExecutionDestination); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionDestinationEnum("executionDestination", "body", *m.ExecutionDestination); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("executionId", "body", m.ExecutionID); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusTypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXECUTION_EVENT_RECEIVED","DISPATCHING_FLOW","STARTING_FLOW_EXECUTION","STOPPING_FLOW_EXECUTION","EXECUTION_TERMINATED","EXECUTION_TERMINATED_TIMEOUT","DEPLOY_FAILED","EXECUTION_FAILED","EXECUTION_REJECTED","EXECUTION_SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusTypeExecutionStatusPropEnum = append(jobExecutionStatusTypeExecutionStatusPropEnum, v)
	}
}

const (

	// JobExecutionStatusExecutionStatusEXECUTIONEVENTRECEIVED captures enum value "EXECUTION_EVENT_RECEIVED"
	JobExecutionStatusExecutionStatusEXECUTIONEVENTRECEIVED string = "EXECUTION_EVENT_RECEIVED"

	// JobExecutionStatusExecutionStatusDISPATCHINGFLOW captures enum value "DISPATCHING_FLOW"
	JobExecutionStatusExecutionStatusDISPATCHINGFLOW string = "DISPATCHING_FLOW"

	// JobExecutionStatusExecutionStatusSTARTINGFLOWEXECUTION captures enum value "STARTING_FLOW_EXECUTION"
	JobExecutionStatusExecutionStatusSTARTINGFLOWEXECUTION string = "STARTING_FLOW_EXECUTION"

	// JobExecutionStatusExecutionStatusSTOPPINGFLOWEXECUTION captures enum value "STOPPING_FLOW_EXECUTION"
	JobExecutionStatusExecutionStatusSTOPPINGFLOWEXECUTION string = "STOPPING_FLOW_EXECUTION"

	// JobExecutionStatusExecutionStatusEXECUTIONTERMINATED captures enum value "EXECUTION_TERMINATED"
	JobExecutionStatusExecutionStatusEXECUTIONTERMINATED string = "EXECUTION_TERMINATED"

	// JobExecutionStatusExecutionStatusEXECUTIONTERMINATEDTIMEOUT captures enum value "EXECUTION_TERMINATED_TIMEOUT"
	JobExecutionStatusExecutionStatusEXECUTIONTERMINATEDTIMEOUT string = "EXECUTION_TERMINATED_TIMEOUT"

	// JobExecutionStatusExecutionStatusDEPLOYFAILED captures enum value "DEPLOY_FAILED"
	JobExecutionStatusExecutionStatusDEPLOYFAILED string = "DEPLOY_FAILED"

	// JobExecutionStatusExecutionStatusEXECUTIONFAILED captures enum value "EXECUTION_FAILED"
	JobExecutionStatusExecutionStatusEXECUTIONFAILED string = "EXECUTION_FAILED"

	// JobExecutionStatusExecutionStatusEXECUTIONREJECTED captures enum value "EXECUTION_REJECTED"
	JobExecutionStatusExecutionStatusEXECUTIONREJECTED string = "EXECUTION_REJECTED"

	// JobExecutionStatusExecutionStatusEXECUTIONSUCCESS captures enum value "EXECUTION_SUCCESS"
	JobExecutionStatusExecutionStatusEXECUTIONSUCCESS string = "EXECUTION_SUCCESS"
)

// prop value enum
func (m *JobExecutionStatus) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusTypeExecutionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatus) validateExecutionStatus(formats strfmt.Registry) error {

	if err := validate.Required("executionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionStatusEnum("executionStatus", "body", *m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusTypeExecutionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","SCHEDULED","WEBHOOK","PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusTypeExecutionTypePropEnum = append(jobExecutionStatusTypeExecutionTypePropEnum, v)
	}
}

const (

	// JobExecutionStatusExecutionTypeMANUAL captures enum value "MANUAL"
	JobExecutionStatusExecutionTypeMANUAL string = "MANUAL"

	// JobExecutionStatusExecutionTypeSCHEDULED captures enum value "SCHEDULED"
	JobExecutionStatusExecutionTypeSCHEDULED string = "SCHEDULED"

	// JobExecutionStatusExecutionTypeWEBHOOK captures enum value "WEBHOOK"
	JobExecutionStatusExecutionTypeWEBHOOK string = "WEBHOOK"

	// JobExecutionStatusExecutionTypePLAN captures enum value "PLAN"
	JobExecutionStatusExecutionTypePLAN string = "PLAN"
)

// prop value enum
func (m *JobExecutionStatus) validateExecutionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusTypeExecutionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatus) validateExecutionType(formats strfmt.Registry) error {

	if err := validate.Required("executionType", "body", m.ExecutionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateExecutionTypeEnum("executionType", "body", *m.ExecutionType); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateFinishTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTimestamp", "body", "date-time", m.FinishTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("jobId", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateJobVersion(formats strfmt.Registry) error {

	if err := validate.Required("jobVersion", "body", m.JobVersion); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("startTimestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("startTimestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateTriggerTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("triggerTimestamp", "body", m.TriggerTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("triggerTimestamp", "body", "date-time", m.TriggerTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

var jobExecutionStatusTypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionStatusTypeUserTypePropEnum = append(jobExecutionStatusTypeUserTypePropEnum, v)
	}
}

const (

	// JobExecutionStatusUserTypeHUMAN captures enum value "HUMAN"
	JobExecutionStatusUserTypeHUMAN string = "HUMAN"

	// JobExecutionStatusUserTypeSERVICE captures enum value "SERVICE"
	JobExecutionStatusUserTypeSERVICE string = "SERVICE"
)

// prop value enum
func (m *JobExecutionStatus) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobExecutionStatusTypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobExecutionStatus) validateUserType(formats strfmt.Registry) error {

	if err := validate.Required("userType", "body", m.UserType); err != nil {
		return err
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", *m.UserType); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionStatus) validateWorkspaceID(formats strfmt.Registry) error {

	if err := validate.Required("workspaceId", "body", m.WorkspaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this job execution status based on context it is used
func (m *JobExecutionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobExecutionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobExecutionStatus) UnmarshalBinary(b []byte) error {
	var res JobExecutionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
