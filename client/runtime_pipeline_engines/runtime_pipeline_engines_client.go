// Code generated by go-swagger; DO NOT EDIT.

package runtime_pipeline_engines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runtime pipeline engines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime pipeline engines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePipelineEngine(params *CreatePipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePipelineEngineCreated, error)

	DeletePipelineEngine(params *DeletePipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePipelineEngineNoContent, error)

	GetPipelineEngine(params *GetPipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPipelineEngineOK, error)

	GetPipelineEngines(params *GetPipelineEnginesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPipelineEnginesOK, error)

	UnpairPipelineEngine(params *UnpairPipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnpairPipelineEngineOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePipelineEngine creates new pipeline engine

Create new Pipeline Engine
*/
func (a *Client) CreatePipelineEngine(params *CreatePipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePipelineEngineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePipelineEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPipelineEngine",
		Method:             "POST",
		PathPattern:        "/runtimes/pipeline-engines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePipelineEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePipelineEngineCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPipelineEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePipelineEngine deletes pipeline engine by id

Delete Pipeline Engine by id
*/
func (a *Client) DeletePipelineEngine(params *DeletePipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePipelineEngineNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePipelineEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePipelineEngine",
		Method:             "DELETE",
		PathPattern:        "/runtimes/pipeline-engines/{engineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePipelineEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePipelineEngineNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePipelineEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineEngine gets pipeline engine by id

Get Pipeline Engine by id
*/
func (a *Client) GetPipelineEngine(params *GetPipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPipelineEngineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPipelineEngine",
		Method:             "GET",
		PathPattern:        "/runtimes/pipeline-engines/{engineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineEngineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineEngines gets pipeline engines

Get Pipeline Engines
*/
func (a *Client) GetPipelineEngines(params *GetPipelineEnginesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPipelineEnginesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineEnginesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPipelineEngines",
		Method:             "GET",
		PathPattern:        "/runtimes/pipeline-engines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineEnginesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineEnginesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineEngines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnpairPipelineEngine unpairs pipeline engine

Unpair Pipeline Engine
*/
func (a *Client) UnpairPipelineEngine(params *UnpairPipelineEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnpairPipelineEngineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnpairPipelineEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unpairPipelineEngine",
		Method:             "DELETE",
		PathPattern:        "/runtimes/pipeline-engines/{engineId}/pairing",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnpairPipelineEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnpairPipelineEngineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unpairPipelineEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
