// Code generated by go-swagger; DO NOT EDIT.

package executions_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// GetTaskExecutionLogReader is a Reader for the GetTaskExecutionLog structure.
type GetTaskExecutionLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskExecutionLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTaskExecutionLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTaskExecutionLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTaskExecutionLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTaskExecutionLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTaskExecutionLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTaskExecutionLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTaskExecutionLogOK creates a GetTaskExecutionLogOK with default headers values
func NewGetTaskExecutionLogOK() *GetTaskExecutionLogOK {
	return &GetTaskExecutionLogOK{}
}

/*
GetTaskExecutionLogOK describes a response with status code 200, with default header values.

Successful response
*/
type GetTaskExecutionLogOK struct {
	Payload *models.ExecutionLogs
}

// IsSuccess returns true when this get task execution log o k response has a 2xx status code
func (o *GetTaskExecutionLogOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get task execution log o k response has a 3xx status code
func (o *GetTaskExecutionLogOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task execution log o k response has a 4xx status code
func (o *GetTaskExecutionLogOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task execution log o k response has a 5xx status code
func (o *GetTaskExecutionLogOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get task execution log o k response a status code equal to that given
func (o *GetTaskExecutionLogOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTaskExecutionLogOK) Error() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogOK  %+v", 200, o.Payload)
}

func (o *GetTaskExecutionLogOK) String() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogOK  %+v", 200, o.Payload)
}

func (o *GetTaskExecutionLogOK) GetPayload() *models.ExecutionLogs {
	return o.Payload
}

func (o *GetTaskExecutionLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExecutionLogs)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskExecutionLogBadRequest creates a GetTaskExecutionLogBadRequest with default headers values
func NewGetTaskExecutionLogBadRequest() *GetTaskExecutionLogBadRequest {
	return &GetTaskExecutionLogBadRequest{}
}

/*
GetTaskExecutionLogBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTaskExecutionLogBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task execution log bad request response has a 2xx status code
func (o *GetTaskExecutionLogBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task execution log bad request response has a 3xx status code
func (o *GetTaskExecutionLogBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task execution log bad request response has a 4xx status code
func (o *GetTaskExecutionLogBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task execution log bad request response has a 5xx status code
func (o *GetTaskExecutionLogBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get task execution log bad request response a status code equal to that given
func (o *GetTaskExecutionLogBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetTaskExecutionLogBadRequest) Error() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogBadRequest  %+v", 400, o.Payload)
}

func (o *GetTaskExecutionLogBadRequest) String() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogBadRequest  %+v", 400, o.Payload)
}

func (o *GetTaskExecutionLogBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskExecutionLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskExecutionLogUnauthorized creates a GetTaskExecutionLogUnauthorized with default headers values
func NewGetTaskExecutionLogUnauthorized() *GetTaskExecutionLogUnauthorized {
	return &GetTaskExecutionLogUnauthorized{}
}

/*
GetTaskExecutionLogUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTaskExecutionLogUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task execution log unauthorized response has a 2xx status code
func (o *GetTaskExecutionLogUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task execution log unauthorized response has a 3xx status code
func (o *GetTaskExecutionLogUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task execution log unauthorized response has a 4xx status code
func (o *GetTaskExecutionLogUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task execution log unauthorized response has a 5xx status code
func (o *GetTaskExecutionLogUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get task execution log unauthorized response a status code equal to that given
func (o *GetTaskExecutionLogUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetTaskExecutionLogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTaskExecutionLogUnauthorized) String() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTaskExecutionLogUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskExecutionLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskExecutionLogForbidden creates a GetTaskExecutionLogForbidden with default headers values
func NewGetTaskExecutionLogForbidden() *GetTaskExecutionLogForbidden {
	return &GetTaskExecutionLogForbidden{}
}

/*
GetTaskExecutionLogForbidden describes a response with status code 403, with default header values.

Forbidden - no permissions to access resource
*/
type GetTaskExecutionLogForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task execution log forbidden response has a 2xx status code
func (o *GetTaskExecutionLogForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task execution log forbidden response has a 3xx status code
func (o *GetTaskExecutionLogForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task execution log forbidden response has a 4xx status code
func (o *GetTaskExecutionLogForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task execution log forbidden response has a 5xx status code
func (o *GetTaskExecutionLogForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get task execution log forbidden response a status code equal to that given
func (o *GetTaskExecutionLogForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetTaskExecutionLogForbidden) Error() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogForbidden  %+v", 403, o.Payload)
}

func (o *GetTaskExecutionLogForbidden) String() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogForbidden  %+v", 403, o.Payload)
}

func (o *GetTaskExecutionLogForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskExecutionLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskExecutionLogNotFound creates a GetTaskExecutionLogNotFound with default headers values
func NewGetTaskExecutionLogNotFound() *GetTaskExecutionLogNotFound {
	return &GetTaskExecutionLogNotFound{}
}

/*
GetTaskExecutionLogNotFound describes a response with status code 404, with default header values.

Not found - resource not found
*/
type GetTaskExecutionLogNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task execution log not found response has a 2xx status code
func (o *GetTaskExecutionLogNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task execution log not found response has a 3xx status code
func (o *GetTaskExecutionLogNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task execution log not found response has a 4xx status code
func (o *GetTaskExecutionLogNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task execution log not found response has a 5xx status code
func (o *GetTaskExecutionLogNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get task execution log not found response a status code equal to that given
func (o *GetTaskExecutionLogNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetTaskExecutionLogNotFound) Error() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogNotFound  %+v", 404, o.Payload)
}

func (o *GetTaskExecutionLogNotFound) String() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogNotFound  %+v", 404, o.Payload)
}

func (o *GetTaskExecutionLogNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskExecutionLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskExecutionLogInternalServerError creates a GetTaskExecutionLogInternalServerError with default headers values
func NewGetTaskExecutionLogInternalServerError() *GetTaskExecutionLogInternalServerError {
	return &GetTaskExecutionLogInternalServerError{}
}

/*
GetTaskExecutionLogInternalServerError describes a response with status code 500, with default header values.

Server error - something went wrong on server side
*/
type GetTaskExecutionLogInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task execution log internal server error response has a 2xx status code
func (o *GetTaskExecutionLogInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task execution log internal server error response has a 3xx status code
func (o *GetTaskExecutionLogInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task execution log internal server error response has a 4xx status code
func (o *GetTaskExecutionLogInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task execution log internal server error response has a 5xx status code
func (o *GetTaskExecutionLogInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get task execution log internal server error response a status code equal to that given
func (o *GetTaskExecutionLogInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTaskExecutionLogInternalServerError) Error() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTaskExecutionLogInternalServerError) String() string {
	return fmt.Sprintf("[GET /executions/{id}/logs][%d] getTaskExecutionLogInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTaskExecutionLogInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskExecutionLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
