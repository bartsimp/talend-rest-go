// Code generated by go-swagger; DO NOT EDIT.

package executions_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// CheckDownloadTokenStatusReader is a Reader for the CheckDownloadTokenStatus structure.
type CheckDownloadTokenStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckDownloadTokenStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckDownloadTokenStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckDownloadTokenStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckDownloadTokenStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckDownloadTokenStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckDownloadTokenStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckDownloadTokenStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckDownloadTokenStatusOK creates a CheckDownloadTokenStatusOK with default headers values
func NewCheckDownloadTokenStatusOK() *CheckDownloadTokenStatusOK {
	return &CheckDownloadTokenStatusOK{}
}

/*
CheckDownloadTokenStatusOK describes a response with status code 200, with default header values.

Successful response
*/
type CheckDownloadTokenStatusOK struct {
	Payload *models.DownloadLogsStatus
}

// IsSuccess returns true when this check download token status o k response has a 2xx status code
func (o *CheckDownloadTokenStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this check download token status o k response has a 3xx status code
func (o *CheckDownloadTokenStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check download token status o k response has a 4xx status code
func (o *CheckDownloadTokenStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this check download token status o k response has a 5xx status code
func (o *CheckDownloadTokenStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this check download token status o k response a status code equal to that given
func (o *CheckDownloadTokenStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *CheckDownloadTokenStatusOK) Error() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusOK  %+v", 200, o.Payload)
}

func (o *CheckDownloadTokenStatusOK) String() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusOK  %+v", 200, o.Payload)
}

func (o *CheckDownloadTokenStatusOK) GetPayload() *models.DownloadLogsStatus {
	return o.Payload
}

func (o *CheckDownloadTokenStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DownloadLogsStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDownloadTokenStatusBadRequest creates a CheckDownloadTokenStatusBadRequest with default headers values
func NewCheckDownloadTokenStatusBadRequest() *CheckDownloadTokenStatusBadRequest {
	return &CheckDownloadTokenStatusBadRequest{}
}

/*
CheckDownloadTokenStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckDownloadTokenStatusBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this check download token status bad request response has a 2xx status code
func (o *CheckDownloadTokenStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check download token status bad request response has a 3xx status code
func (o *CheckDownloadTokenStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check download token status bad request response has a 4xx status code
func (o *CheckDownloadTokenStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this check download token status bad request response has a 5xx status code
func (o *CheckDownloadTokenStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this check download token status bad request response a status code equal to that given
func (o *CheckDownloadTokenStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CheckDownloadTokenStatusBadRequest) Error() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusBadRequest  %+v", 400, o.Payload)
}

func (o *CheckDownloadTokenStatusBadRequest) String() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusBadRequest  %+v", 400, o.Payload)
}

func (o *CheckDownloadTokenStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDownloadTokenStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDownloadTokenStatusUnauthorized creates a CheckDownloadTokenStatusUnauthorized with default headers values
func NewCheckDownloadTokenStatusUnauthorized() *CheckDownloadTokenStatusUnauthorized {
	return &CheckDownloadTokenStatusUnauthorized{}
}

/*
CheckDownloadTokenStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckDownloadTokenStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this check download token status unauthorized response has a 2xx status code
func (o *CheckDownloadTokenStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check download token status unauthorized response has a 3xx status code
func (o *CheckDownloadTokenStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check download token status unauthorized response has a 4xx status code
func (o *CheckDownloadTokenStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this check download token status unauthorized response has a 5xx status code
func (o *CheckDownloadTokenStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this check download token status unauthorized response a status code equal to that given
func (o *CheckDownloadTokenStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CheckDownloadTokenStatusUnauthorized) Error() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckDownloadTokenStatusUnauthorized) String() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckDownloadTokenStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDownloadTokenStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDownloadTokenStatusForbidden creates a CheckDownloadTokenStatusForbidden with default headers values
func NewCheckDownloadTokenStatusForbidden() *CheckDownloadTokenStatusForbidden {
	return &CheckDownloadTokenStatusForbidden{}
}

/*
CheckDownloadTokenStatusForbidden describes a response with status code 403, with default header values.

Forbidden - no permissions to access resource
*/
type CheckDownloadTokenStatusForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this check download token status forbidden response has a 2xx status code
func (o *CheckDownloadTokenStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check download token status forbidden response has a 3xx status code
func (o *CheckDownloadTokenStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check download token status forbidden response has a 4xx status code
func (o *CheckDownloadTokenStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this check download token status forbidden response has a 5xx status code
func (o *CheckDownloadTokenStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this check download token status forbidden response a status code equal to that given
func (o *CheckDownloadTokenStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CheckDownloadTokenStatusForbidden) Error() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusForbidden  %+v", 403, o.Payload)
}

func (o *CheckDownloadTokenStatusForbidden) String() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusForbidden  %+v", 403, o.Payload)
}

func (o *CheckDownloadTokenStatusForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDownloadTokenStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDownloadTokenStatusNotFound creates a CheckDownloadTokenStatusNotFound with default headers values
func NewCheckDownloadTokenStatusNotFound() *CheckDownloadTokenStatusNotFound {
	return &CheckDownloadTokenStatusNotFound{}
}

/*
CheckDownloadTokenStatusNotFound describes a response with status code 404, with default header values.

Not found - resource not found
*/
type CheckDownloadTokenStatusNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this check download token status not found response has a 2xx status code
func (o *CheckDownloadTokenStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check download token status not found response has a 3xx status code
func (o *CheckDownloadTokenStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check download token status not found response has a 4xx status code
func (o *CheckDownloadTokenStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this check download token status not found response has a 5xx status code
func (o *CheckDownloadTokenStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this check download token status not found response a status code equal to that given
func (o *CheckDownloadTokenStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CheckDownloadTokenStatusNotFound) Error() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusNotFound  %+v", 404, o.Payload)
}

func (o *CheckDownloadTokenStatusNotFound) String() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusNotFound  %+v", 404, o.Payload)
}

func (o *CheckDownloadTokenStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDownloadTokenStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDownloadTokenStatusInternalServerError creates a CheckDownloadTokenStatusInternalServerError with default headers values
func NewCheckDownloadTokenStatusInternalServerError() *CheckDownloadTokenStatusInternalServerError {
	return &CheckDownloadTokenStatusInternalServerError{}
}

/*
CheckDownloadTokenStatusInternalServerError describes a response with status code 500, with default header values.

Server error - something went wrong on server side
*/
type CheckDownloadTokenStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this check download token status internal server error response has a 2xx status code
func (o *CheckDownloadTokenStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check download token status internal server error response has a 3xx status code
func (o *CheckDownloadTokenStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check download token status internal server error response has a 4xx status code
func (o *CheckDownloadTokenStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this check download token status internal server error response has a 5xx status code
func (o *CheckDownloadTokenStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this check download token status internal server error response a status code equal to that given
func (o *CheckDownloadTokenStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CheckDownloadTokenStatusInternalServerError) Error() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *CheckDownloadTokenStatusInternalServerError) String() string {
	return fmt.Sprintf("[POST /executions/{id}/logs/status][%d] checkDownloadTokenStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *CheckDownloadTokenStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDownloadTokenStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
