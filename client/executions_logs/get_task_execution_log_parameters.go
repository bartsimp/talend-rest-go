// Code generated by go-swagger; DO NOT EDIT.

package executions_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTaskExecutionLogParams creates a new GetTaskExecutionLogParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTaskExecutionLogParams() *GetTaskExecutionLogParams {
	return &GetTaskExecutionLogParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTaskExecutionLogParamsWithTimeout creates a new GetTaskExecutionLogParams object
// with the ability to set a timeout on a request.
func NewGetTaskExecutionLogParamsWithTimeout(timeout time.Duration) *GetTaskExecutionLogParams {
	return &GetTaskExecutionLogParams{
		timeout: timeout,
	}
}

// NewGetTaskExecutionLogParamsWithContext creates a new GetTaskExecutionLogParams object
// with the ability to set a context for a request.
func NewGetTaskExecutionLogParamsWithContext(ctx context.Context) *GetTaskExecutionLogParams {
	return &GetTaskExecutionLogParams{
		Context: ctx,
	}
}

// NewGetTaskExecutionLogParamsWithHTTPClient creates a new GetTaskExecutionLogParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTaskExecutionLogParamsWithHTTPClient(client *http.Client) *GetTaskExecutionLogParams {
	return &GetTaskExecutionLogParams{
		HTTPClient: client,
	}
}

/*
GetTaskExecutionLogParams contains all the parameters to send to the API endpoint

	for the get task execution log operation.

	Typically these are written to a http.Request.
*/
type GetTaskExecutionLogParams struct {

	/* Count.

	   Number of log messages, default value is equal to 50, the maximum value is equal to 200

	   Format: int32
	   Default: 50
	*/
	Count *int32

	/* EndTime.

	   Latest log date and time, default value is set to the current time when the request is received. Floored to minute unit. Example: 2021-06-14T15:04:45Z
	*/
	EndTime *string

	/* ID.

	   ID of Task Execution
	*/
	ID string

	/* Order.

	   Sort order (ASC, DESC) for logs by logTimestamp, default is DESC : last logs are first.

	   Default: "DESC"
	*/
	Order *string

	/* StartIndex.

	   Index for pagination to start with, default value is set to 0

	   Format: int32
	*/
	StartIndex *int32

	/* StartTime.

	   Earliest log date and time, default value is set to the start time of the execution. Floored to minute unit. Example: 2021-06-14T07:01:45Z
	*/
	StartTime *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get task execution log params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTaskExecutionLogParams) WithDefaults() *GetTaskExecutionLogParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get task execution log params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTaskExecutionLogParams) SetDefaults() {
	var (
		countDefault = int32(50)

		orderDefault = string("DESC")

		startIndexDefault = int32(0)
	)

	val := GetTaskExecutionLogParams{
		Count:      &countDefault,
		Order:      &orderDefault,
		StartIndex: &startIndexDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get task execution log params
func (o *GetTaskExecutionLogParams) WithTimeout(timeout time.Duration) *GetTaskExecutionLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get task execution log params
func (o *GetTaskExecutionLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get task execution log params
func (o *GetTaskExecutionLogParams) WithContext(ctx context.Context) *GetTaskExecutionLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get task execution log params
func (o *GetTaskExecutionLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get task execution log params
func (o *GetTaskExecutionLogParams) WithHTTPClient(client *http.Client) *GetTaskExecutionLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get task execution log params
func (o *GetTaskExecutionLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get task execution log params
func (o *GetTaskExecutionLogParams) WithCount(count *int32) *GetTaskExecutionLogParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get task execution log params
func (o *GetTaskExecutionLogParams) SetCount(count *int32) {
	o.Count = count
}

// WithEndTime adds the endTime to the get task execution log params
func (o *GetTaskExecutionLogParams) WithEndTime(endTime *string) *GetTaskExecutionLogParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get task execution log params
func (o *GetTaskExecutionLogParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithID adds the id to the get task execution log params
func (o *GetTaskExecutionLogParams) WithID(id string) *GetTaskExecutionLogParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get task execution log params
func (o *GetTaskExecutionLogParams) SetID(id string) {
	o.ID = id
}

// WithOrder adds the order to the get task execution log params
func (o *GetTaskExecutionLogParams) WithOrder(order *string) *GetTaskExecutionLogParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get task execution log params
func (o *GetTaskExecutionLogParams) SetOrder(order *string) {
	o.Order = order
}

// WithStartIndex adds the startIndex to the get task execution log params
func (o *GetTaskExecutionLogParams) WithStartIndex(startIndex *int32) *GetTaskExecutionLogParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the get task execution log params
func (o *GetTaskExecutionLogParams) SetStartIndex(startIndex *int32) {
	o.StartIndex = startIndex
}

// WithStartTime adds the startTime to the get task execution log params
func (o *GetTaskExecutionLogParams) WithStartTime(startTime *string) *GetTaskExecutionLogParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get task execution log params
func (o *GetTaskExecutionLogParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetTaskExecutionLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int32

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt32(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
