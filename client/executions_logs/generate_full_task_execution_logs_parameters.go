// Code generated by go-swagger; DO NOT EDIT.

package executions_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGenerateFullTaskExecutionLogsParams creates a new GenerateFullTaskExecutionLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGenerateFullTaskExecutionLogsParams() *GenerateFullTaskExecutionLogsParams {
	return &GenerateFullTaskExecutionLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateFullTaskExecutionLogsParamsWithTimeout creates a new GenerateFullTaskExecutionLogsParams object
// with the ability to set a timeout on a request.
func NewGenerateFullTaskExecutionLogsParamsWithTimeout(timeout time.Duration) *GenerateFullTaskExecutionLogsParams {
	return &GenerateFullTaskExecutionLogsParams{
		timeout: timeout,
	}
}

// NewGenerateFullTaskExecutionLogsParamsWithContext creates a new GenerateFullTaskExecutionLogsParams object
// with the ability to set a context for a request.
func NewGenerateFullTaskExecutionLogsParamsWithContext(ctx context.Context) *GenerateFullTaskExecutionLogsParams {
	return &GenerateFullTaskExecutionLogsParams{
		Context: ctx,
	}
}

// NewGenerateFullTaskExecutionLogsParamsWithHTTPClient creates a new GenerateFullTaskExecutionLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGenerateFullTaskExecutionLogsParamsWithHTTPClient(client *http.Client) *GenerateFullTaskExecutionLogsParams {
	return &GenerateFullTaskExecutionLogsParams{
		HTTPClient: client,
	}
}

/*
GenerateFullTaskExecutionLogsParams contains all the parameters to send to the API endpoint

	for the generate full task execution logs operation.

	Typically these are written to a http.Request.
*/
type GenerateFullTaskExecutionLogsParams struct {

	/* EndTime.

	   Latest log date and time
	*/
	EndTime *string

	/* FileFormat.

	   Generated file format JSON/TEXT

	   Default: "JSON"
	*/
	FileFormat *string

	/* ID.

	   ID of Task Execution
	*/
	ID string

	/* NewFileName.

	   Use new file name for generated file: taskId_executionId.log
	*/
	NewFileName *string

	/* StartTime.

	   Earliest log date and time
	*/
	StartTime *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the generate full task execution logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateFullTaskExecutionLogsParams) WithDefaults() *GenerateFullTaskExecutionLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the generate full task execution logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateFullTaskExecutionLogsParams) SetDefaults() {
	var (
		fileFormatDefault = string("JSON")
	)

	val := GenerateFullTaskExecutionLogsParams{
		FileFormat: &fileFormatDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithTimeout(timeout time.Duration) *GenerateFullTaskExecutionLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithContext(ctx context.Context) *GenerateFullTaskExecutionLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithHTTPClient(client *http.Client) *GenerateFullTaskExecutionLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithEndTime(endTime *string) *GenerateFullTaskExecutionLogsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithFileFormat adds the fileFormat to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithFileFormat(fileFormat *string) *GenerateFullTaskExecutionLogsParams {
	o.SetFileFormat(fileFormat)
	return o
}

// SetFileFormat adds the fileFormat to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetFileFormat(fileFormat *string) {
	o.FileFormat = fileFormat
}

// WithID adds the id to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithID(id string) *GenerateFullTaskExecutionLogsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetID(id string) {
	o.ID = id
}

// WithNewFileName adds the newFileName to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithNewFileName(newFileName *string) *GenerateFullTaskExecutionLogsParams {
	o.SetNewFileName(newFileName)
	return o
}

// SetNewFileName adds the newFileName to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetNewFileName(newFileName *string) {
	o.NewFileName = newFileName
}

// WithStartTime adds the startTime to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) WithStartTime(startTime *string) *GenerateFullTaskExecutionLogsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the generate full task execution logs params
func (o *GenerateFullTaskExecutionLogsParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateFullTaskExecutionLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.FileFormat != nil {

		// query param fileFormat
		var qrFileFormat string

		if o.FileFormat != nil {
			qrFileFormat = *o.FileFormat
		}
		qFileFormat := qrFileFormat
		if qFileFormat != "" {

			if err := r.SetQueryParam("fileFormat", qFileFormat); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.NewFileName != nil {

		// query param newFileName
		var qrNewFileName string

		if o.NewFileName != nil {
			qrNewFileName = *o.NewFileName
		}
		qNewFileName := qrNewFileName
		if qNewFileName != "" {

			if err := r.SetQueryParam("newFileName", qNewFileName); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
