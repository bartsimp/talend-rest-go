// Code generated by go-swagger; DO NOT EDIT.

package plans_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// ExecutePlanReader is a Reader for the ExecutePlan structure.
type ExecutePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecutePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewExecutePlanCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecutePlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecutePlanUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecutePlanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecutePlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewExecutePlanMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewExecutePlanUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecutePlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewExecutePlanNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExecutePlanCreated creates a ExecutePlanCreated with default headers values
func NewExecutePlanCreated() *ExecutePlanCreated {
	return &ExecutePlanCreated{}
}

/*
ExecutePlanCreated describes a response with status code 201, with default header values.

Execution started
*/
type ExecutePlanCreated struct {
	Payload *models.Executionidentifier
}

// IsSuccess returns true when this execute plan created response has a 2xx status code
func (o *ExecutePlanCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute plan created response has a 3xx status code
func (o *ExecutePlanCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan created response has a 4xx status code
func (o *ExecutePlanCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute plan created response has a 5xx status code
func (o *ExecutePlanCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this execute plan created response a status code equal to that given
func (o *ExecutePlanCreated) IsCode(code int) bool {
	return code == 201
}

func (o *ExecutePlanCreated) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanCreated  %+v", 201, o.Payload)
}

func (o *ExecutePlanCreated) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanCreated  %+v", 201, o.Payload)
}

func (o *ExecutePlanCreated) GetPayload() *models.Executionidentifier {
	return o.Payload
}

func (o *ExecutePlanCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Executionidentifier)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanBadRequest creates a ExecutePlanBadRequest with default headers values
func NewExecutePlanBadRequest() *ExecutePlanBadRequest {
	return &ExecutePlanBadRequest{}
}

/*
ExecutePlanBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecutePlanBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan bad request response has a 2xx status code
func (o *ExecutePlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan bad request response has a 3xx status code
func (o *ExecutePlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan bad request response has a 4xx status code
func (o *ExecutePlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute plan bad request response has a 5xx status code
func (o *ExecutePlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute plan bad request response a status code equal to that given
func (o *ExecutePlanBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ExecutePlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutePlanBadRequest) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutePlanBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanUnauthorized creates a ExecutePlanUnauthorized with default headers values
func NewExecutePlanUnauthorized() *ExecutePlanUnauthorized {
	return &ExecutePlanUnauthorized{}
}

/*
ExecutePlanUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecutePlanUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan unauthorized response has a 2xx status code
func (o *ExecutePlanUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan unauthorized response has a 3xx status code
func (o *ExecutePlanUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan unauthorized response has a 4xx status code
func (o *ExecutePlanUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute plan unauthorized response has a 5xx status code
func (o *ExecutePlanUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute plan unauthorized response a status code equal to that given
func (o *ExecutePlanUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ExecutePlanUnauthorized) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecutePlanUnauthorized) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecutePlanUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanForbidden creates a ExecutePlanForbidden with default headers values
func NewExecutePlanForbidden() *ExecutePlanForbidden {
	return &ExecutePlanForbidden{}
}

/*
ExecutePlanForbidden describes a response with status code 403, with default header values.

Forbidden - no permissions to access resource
*/
type ExecutePlanForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan forbidden response has a 2xx status code
func (o *ExecutePlanForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan forbidden response has a 3xx status code
func (o *ExecutePlanForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan forbidden response has a 4xx status code
func (o *ExecutePlanForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute plan forbidden response has a 5xx status code
func (o *ExecutePlanForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute plan forbidden response a status code equal to that given
func (o *ExecutePlanForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ExecutePlanForbidden) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanForbidden  %+v", 403, o.Payload)
}

func (o *ExecutePlanForbidden) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanForbidden  %+v", 403, o.Payload)
}

func (o *ExecutePlanForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanNotFound creates a ExecutePlanNotFound with default headers values
func NewExecutePlanNotFound() *ExecutePlanNotFound {
	return &ExecutePlanNotFound{}
}

/*
ExecutePlanNotFound describes a response with status code 404, with default header values.

Not found - resource not found
*/
type ExecutePlanNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan not found response has a 2xx status code
func (o *ExecutePlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan not found response has a 3xx status code
func (o *ExecutePlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan not found response has a 4xx status code
func (o *ExecutePlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute plan not found response has a 5xx status code
func (o *ExecutePlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execute plan not found response a status code equal to that given
func (o *ExecutePlanNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ExecutePlanNotFound) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanNotFound  %+v", 404, o.Payload)
}

func (o *ExecutePlanNotFound) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanNotFound  %+v", 404, o.Payload)
}

func (o *ExecutePlanNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanMethodNotAllowed creates a ExecutePlanMethodNotAllowed with default headers values
func NewExecutePlanMethodNotAllowed() *ExecutePlanMethodNotAllowed {
	return &ExecutePlanMethodNotAllowed{}
}

/*
ExecutePlanMethodNotAllowed describes a response with status code 405, with default header values.

Operation not allowed - Plan execution paused
*/
type ExecutePlanMethodNotAllowed struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan method not allowed response has a 2xx status code
func (o *ExecutePlanMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan method not allowed response has a 3xx status code
func (o *ExecutePlanMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan method not allowed response has a 4xx status code
func (o *ExecutePlanMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute plan method not allowed response has a 5xx status code
func (o *ExecutePlanMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this execute plan method not allowed response a status code equal to that given
func (o *ExecutePlanMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *ExecutePlanMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ExecutePlanMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ExecutePlanMethodNotAllowed) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanUnprocessableEntity creates a ExecutePlanUnprocessableEntity with default headers values
func NewExecutePlanUnprocessableEntity() *ExecutePlanUnprocessableEntity {
	return &ExecutePlanUnprocessableEntity{}
}

/*
ExecutePlanUnprocessableEntity describes a response with status code 422, with default header values.

Entity exists but cannot be processed, because too old or plan exec didn't fail
*/
type ExecutePlanUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan unprocessable entity response has a 2xx status code
func (o *ExecutePlanUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan unprocessable entity response has a 3xx status code
func (o *ExecutePlanUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan unprocessable entity response has a 4xx status code
func (o *ExecutePlanUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute plan unprocessable entity response has a 5xx status code
func (o *ExecutePlanUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this execute plan unprocessable entity response a status code equal to that given
func (o *ExecutePlanUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *ExecutePlanUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ExecutePlanUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ExecutePlanUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanInternalServerError creates a ExecutePlanInternalServerError with default headers values
func NewExecutePlanInternalServerError() *ExecutePlanInternalServerError {
	return &ExecutePlanInternalServerError{}
}

/*
ExecutePlanInternalServerError describes a response with status code 500, with default header values.

Server error - something went wrong on server side
*/
type ExecutePlanInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan internal server error response has a 2xx status code
func (o *ExecutePlanInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan internal server error response has a 3xx status code
func (o *ExecutePlanInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan internal server error response has a 4xx status code
func (o *ExecutePlanInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute plan internal server error response has a 5xx status code
func (o *ExecutePlanInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute plan internal server error response a status code equal to that given
func (o *ExecutePlanInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ExecutePlanInternalServerError) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutePlanInternalServerError) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutePlanInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePlanNotImplemented creates a ExecutePlanNotImplemented with default headers values
func NewExecutePlanNotImplemented() *ExecutePlanNotImplemented {
	return &ExecutePlanNotImplemented{}
}

/*
ExecutePlanNotImplemented describes a response with status code 501, with default header values.

Plan cannot be deployed because it is not configured
*/
type ExecutePlanNotImplemented struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute plan not implemented response has a 2xx status code
func (o *ExecutePlanNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute plan not implemented response has a 3xx status code
func (o *ExecutePlanNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute plan not implemented response has a 4xx status code
func (o *ExecutePlanNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute plan not implemented response has a 5xx status code
func (o *ExecutePlanNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this execute plan not implemented response a status code equal to that given
func (o *ExecutePlanNotImplemented) IsCode(code int) bool {
	return code == 501
}

func (o *ExecutePlanNotImplemented) Error() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanNotImplemented  %+v", 501, o.Payload)
}

func (o *ExecutePlanNotImplemented) String() string {
	return fmt.Sprintf("[POST /executions/plans][%d] executePlanNotImplemented  %+v", 501, o.Payload)
}

func (o *ExecutePlanNotImplemented) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutePlanNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
