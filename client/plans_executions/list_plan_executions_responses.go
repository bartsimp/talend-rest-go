// Code generated by go-swagger; DO NOT EDIT.

package plans_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// ListPlanExecutionsReader is a Reader for the ListPlanExecutions structure.
type ListPlanExecutionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPlanExecutionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPlanExecutionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPlanExecutionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListPlanExecutionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPlanExecutionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPlanExecutionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPlanExecutionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListPlanExecutionsOK creates a ListPlanExecutionsOK with default headers values
func NewListPlanExecutionsOK() *ListPlanExecutionsOK {
	return &ListPlanExecutionsOK{}
}

/*
ListPlanExecutionsOK describes a response with status code 200, with default header values.

OK
*/
type ListPlanExecutionsOK struct {
	Payload *models.Page
}

// IsSuccess returns true when this list plan executions o k response has a 2xx status code
func (o *ListPlanExecutionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list plan executions o k response has a 3xx status code
func (o *ListPlanExecutionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list plan executions o k response has a 4xx status code
func (o *ListPlanExecutionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list plan executions o k response has a 5xx status code
func (o *ListPlanExecutionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list plan executions o k response a status code equal to that given
func (o *ListPlanExecutionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListPlanExecutionsOK) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsOK  %+v", 200, o.Payload)
}

func (o *ListPlanExecutionsOK) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsOK  %+v", 200, o.Payload)
}

func (o *ListPlanExecutionsOK) GetPayload() *models.Page {
	return o.Payload
}

func (o *ListPlanExecutionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Page)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlanExecutionsBadRequest creates a ListPlanExecutionsBadRequest with default headers values
func NewListPlanExecutionsBadRequest() *ListPlanExecutionsBadRequest {
	return &ListPlanExecutionsBadRequest{}
}

/*
ListPlanExecutionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListPlanExecutionsBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list plan executions bad request response has a 2xx status code
func (o *ListPlanExecutionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list plan executions bad request response has a 3xx status code
func (o *ListPlanExecutionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list plan executions bad request response has a 4xx status code
func (o *ListPlanExecutionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list plan executions bad request response has a 5xx status code
func (o *ListPlanExecutionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list plan executions bad request response a status code equal to that given
func (o *ListPlanExecutionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListPlanExecutionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPlanExecutionsBadRequest) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPlanExecutionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListPlanExecutionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlanExecutionsUnauthorized creates a ListPlanExecutionsUnauthorized with default headers values
func NewListPlanExecutionsUnauthorized() *ListPlanExecutionsUnauthorized {
	return &ListPlanExecutionsUnauthorized{}
}

/*
ListPlanExecutionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListPlanExecutionsUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list plan executions unauthorized response has a 2xx status code
func (o *ListPlanExecutionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list plan executions unauthorized response has a 3xx status code
func (o *ListPlanExecutionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list plan executions unauthorized response has a 4xx status code
func (o *ListPlanExecutionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list plan executions unauthorized response has a 5xx status code
func (o *ListPlanExecutionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list plan executions unauthorized response a status code equal to that given
func (o *ListPlanExecutionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListPlanExecutionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPlanExecutionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPlanExecutionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListPlanExecutionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlanExecutionsForbidden creates a ListPlanExecutionsForbidden with default headers values
func NewListPlanExecutionsForbidden() *ListPlanExecutionsForbidden {
	return &ListPlanExecutionsForbidden{}
}

/*
ListPlanExecutionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListPlanExecutionsForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list plan executions forbidden response has a 2xx status code
func (o *ListPlanExecutionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list plan executions forbidden response has a 3xx status code
func (o *ListPlanExecutionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list plan executions forbidden response has a 4xx status code
func (o *ListPlanExecutionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list plan executions forbidden response has a 5xx status code
func (o *ListPlanExecutionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list plan executions forbidden response a status code equal to that given
func (o *ListPlanExecutionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListPlanExecutionsForbidden) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ListPlanExecutionsForbidden) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ListPlanExecutionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListPlanExecutionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlanExecutionsNotFound creates a ListPlanExecutionsNotFound with default headers values
func NewListPlanExecutionsNotFound() *ListPlanExecutionsNotFound {
	return &ListPlanExecutionsNotFound{}
}

/*
ListPlanExecutionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListPlanExecutionsNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list plan executions not found response has a 2xx status code
func (o *ListPlanExecutionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list plan executions not found response has a 3xx status code
func (o *ListPlanExecutionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list plan executions not found response has a 4xx status code
func (o *ListPlanExecutionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list plan executions not found response has a 5xx status code
func (o *ListPlanExecutionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list plan executions not found response a status code equal to that given
func (o *ListPlanExecutionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListPlanExecutionsNotFound) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsNotFound  %+v", 404, o.Payload)
}

func (o *ListPlanExecutionsNotFound) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsNotFound  %+v", 404, o.Payload)
}

func (o *ListPlanExecutionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListPlanExecutionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlanExecutionsInternalServerError creates a ListPlanExecutionsInternalServerError with default headers values
func NewListPlanExecutionsInternalServerError() *ListPlanExecutionsInternalServerError {
	return &ListPlanExecutionsInternalServerError{}
}

/*
ListPlanExecutionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListPlanExecutionsInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list plan executions internal server error response has a 2xx status code
func (o *ListPlanExecutionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list plan executions internal server error response has a 3xx status code
func (o *ListPlanExecutionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list plan executions internal server error response has a 4xx status code
func (o *ListPlanExecutionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list plan executions internal server error response has a 5xx status code
func (o *ListPlanExecutionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list plan executions internal server error response a status code equal to that given
func (o *ListPlanExecutionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListPlanExecutionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPlanExecutionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/executions][%d] listPlanExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPlanExecutionsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListPlanExecutionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
