// Code generated by go-swagger; DO NOT EDIT.

package plans_executables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// LinkPlanScheduleReader is a Reader for the LinkPlanSchedule structure.
type LinkPlanScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkPlanScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkPlanScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkPlanScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLinkPlanScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLinkPlanScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkPlanScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkPlanScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLinkPlanScheduleOK creates a LinkPlanScheduleOK with default headers values
func NewLinkPlanScheduleOK() *LinkPlanScheduleOK {
	return &LinkPlanScheduleOK{}
}

/*
LinkPlanScheduleOK describes a response with status code 200, with default header values.

OK
*/
type LinkPlanScheduleOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this link plan schedule o k response has a 2xx status code
func (o *LinkPlanScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link plan schedule o k response has a 3xx status code
func (o *LinkPlanScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link plan schedule o k response has a 4xx status code
func (o *LinkPlanScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link plan schedule o k response has a 5xx status code
func (o *LinkPlanScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link plan schedule o k response a status code equal to that given
func (o *LinkPlanScheduleOK) IsCode(code int) bool {
	return code == 200
}

func (o *LinkPlanScheduleOK) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleOK  %+v", 200, o.Payload)
}

func (o *LinkPlanScheduleOK) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleOK  %+v", 200, o.Payload)
}

func (o *LinkPlanScheduleOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *LinkPlanScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkPlanScheduleBadRequest creates a LinkPlanScheduleBadRequest with default headers values
func NewLinkPlanScheduleBadRequest() *LinkPlanScheduleBadRequest {
	return &LinkPlanScheduleBadRequest{}
}

/*
LinkPlanScheduleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkPlanScheduleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link plan schedule bad request response has a 2xx status code
func (o *LinkPlanScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link plan schedule bad request response has a 3xx status code
func (o *LinkPlanScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link plan schedule bad request response has a 4xx status code
func (o *LinkPlanScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link plan schedule bad request response has a 5xx status code
func (o *LinkPlanScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link plan schedule bad request response a status code equal to that given
func (o *LinkPlanScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *LinkPlanScheduleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *LinkPlanScheduleBadRequest) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *LinkPlanScheduleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkPlanScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkPlanScheduleUnauthorized creates a LinkPlanScheduleUnauthorized with default headers values
func NewLinkPlanScheduleUnauthorized() *LinkPlanScheduleUnauthorized {
	return &LinkPlanScheduleUnauthorized{}
}

/*
LinkPlanScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LinkPlanScheduleUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link plan schedule unauthorized response has a 2xx status code
func (o *LinkPlanScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link plan schedule unauthorized response has a 3xx status code
func (o *LinkPlanScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link plan schedule unauthorized response has a 4xx status code
func (o *LinkPlanScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this link plan schedule unauthorized response has a 5xx status code
func (o *LinkPlanScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this link plan schedule unauthorized response a status code equal to that given
func (o *LinkPlanScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *LinkPlanScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *LinkPlanScheduleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *LinkPlanScheduleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkPlanScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkPlanScheduleForbidden creates a LinkPlanScheduleForbidden with default headers values
func NewLinkPlanScheduleForbidden() *LinkPlanScheduleForbidden {
	return &LinkPlanScheduleForbidden{}
}

/*
LinkPlanScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LinkPlanScheduleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link plan schedule forbidden response has a 2xx status code
func (o *LinkPlanScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link plan schedule forbidden response has a 3xx status code
func (o *LinkPlanScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link plan schedule forbidden response has a 4xx status code
func (o *LinkPlanScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this link plan schedule forbidden response has a 5xx status code
func (o *LinkPlanScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this link plan schedule forbidden response a status code equal to that given
func (o *LinkPlanScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *LinkPlanScheduleForbidden) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleForbidden  %+v", 403, o.Payload)
}

func (o *LinkPlanScheduleForbidden) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleForbidden  %+v", 403, o.Payload)
}

func (o *LinkPlanScheduleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkPlanScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkPlanScheduleNotFound creates a LinkPlanScheduleNotFound with default headers values
func NewLinkPlanScheduleNotFound() *LinkPlanScheduleNotFound {
	return &LinkPlanScheduleNotFound{}
}

/*
LinkPlanScheduleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkPlanScheduleNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link plan schedule not found response has a 2xx status code
func (o *LinkPlanScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link plan schedule not found response has a 3xx status code
func (o *LinkPlanScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link plan schedule not found response has a 4xx status code
func (o *LinkPlanScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link plan schedule not found response has a 5xx status code
func (o *LinkPlanScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link plan schedule not found response a status code equal to that given
func (o *LinkPlanScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *LinkPlanScheduleNotFound) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleNotFound  %+v", 404, o.Payload)
}

func (o *LinkPlanScheduleNotFound) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleNotFound  %+v", 404, o.Payload)
}

func (o *LinkPlanScheduleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkPlanScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkPlanScheduleInternalServerError creates a LinkPlanScheduleInternalServerError with default headers values
func NewLinkPlanScheduleInternalServerError() *LinkPlanScheduleInternalServerError {
	return &LinkPlanScheduleInternalServerError{}
}

/*
LinkPlanScheduleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkPlanScheduleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link plan schedule internal server error response has a 2xx status code
func (o *LinkPlanScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link plan schedule internal server error response has a 3xx status code
func (o *LinkPlanScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link plan schedule internal server error response has a 4xx status code
func (o *LinkPlanScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link plan schedule internal server error response has a 5xx status code
func (o *LinkPlanScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link plan schedule internal server error response a status code equal to that given
func (o *LinkPlanScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *LinkPlanScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *LinkPlanScheduleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/schedule][%d] linkPlanScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *LinkPlanScheduleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkPlanScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
