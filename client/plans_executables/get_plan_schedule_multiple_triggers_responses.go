// Code generated by go-swagger; DO NOT EDIT.

package plans_executables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// GetPlanScheduleMultipleTriggersReader is a Reader for the GetPlanScheduleMultipleTriggers structure.
type GetPlanScheduleMultipleTriggersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPlanScheduleMultipleTriggersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPlanScheduleMultipleTriggersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPlanScheduleMultipleTriggersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPlanScheduleMultipleTriggersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPlanScheduleMultipleTriggersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPlanScheduleMultipleTriggersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPlanScheduleMultipleTriggersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPlanScheduleMultipleTriggersOK creates a GetPlanScheduleMultipleTriggersOK with default headers values
func NewGetPlanScheduleMultipleTriggersOK() *GetPlanScheduleMultipleTriggersOK {
	return &GetPlanScheduleMultipleTriggersOK{}
}

/*
GetPlanScheduleMultipleTriggersOK describes a response with status code 200, with default header values.

OK
*/
type GetPlanScheduleMultipleTriggersOK struct {
	Payload *models.Schedule
}

// IsSuccess returns true when this get plan schedule multiple triggers o k response has a 2xx status code
func (o *GetPlanScheduleMultipleTriggersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get plan schedule multiple triggers o k response has a 3xx status code
func (o *GetPlanScheduleMultipleTriggersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan schedule multiple triggers o k response has a 4xx status code
func (o *GetPlanScheduleMultipleTriggersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get plan schedule multiple triggers o k response has a 5xx status code
func (o *GetPlanScheduleMultipleTriggersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan schedule multiple triggers o k response a status code equal to that given
func (o *GetPlanScheduleMultipleTriggersOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPlanScheduleMultipleTriggersOK) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersOK  %+v", 200, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersOK) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersOK  %+v", 200, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersOK) GetPayload() *models.Schedule {
	return o.Payload
}

func (o *GetPlanScheduleMultipleTriggersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Schedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanScheduleMultipleTriggersBadRequest creates a GetPlanScheduleMultipleTriggersBadRequest with default headers values
func NewGetPlanScheduleMultipleTriggersBadRequest() *GetPlanScheduleMultipleTriggersBadRequest {
	return &GetPlanScheduleMultipleTriggersBadRequest{}
}

/*
GetPlanScheduleMultipleTriggersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPlanScheduleMultipleTriggersBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get plan schedule multiple triggers bad request response has a 2xx status code
func (o *GetPlanScheduleMultipleTriggersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan schedule multiple triggers bad request response has a 3xx status code
func (o *GetPlanScheduleMultipleTriggersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan schedule multiple triggers bad request response has a 4xx status code
func (o *GetPlanScheduleMultipleTriggersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get plan schedule multiple triggers bad request response has a 5xx status code
func (o *GetPlanScheduleMultipleTriggersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan schedule multiple triggers bad request response a status code equal to that given
func (o *GetPlanScheduleMultipleTriggersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetPlanScheduleMultipleTriggersBadRequest) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersBadRequest  %+v", 400, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersBadRequest) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersBadRequest  %+v", 400, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPlanScheduleMultipleTriggersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanScheduleMultipleTriggersUnauthorized creates a GetPlanScheduleMultipleTriggersUnauthorized with default headers values
func NewGetPlanScheduleMultipleTriggersUnauthorized() *GetPlanScheduleMultipleTriggersUnauthorized {
	return &GetPlanScheduleMultipleTriggersUnauthorized{}
}

/*
GetPlanScheduleMultipleTriggersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPlanScheduleMultipleTriggersUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get plan schedule multiple triggers unauthorized response has a 2xx status code
func (o *GetPlanScheduleMultipleTriggersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan schedule multiple triggers unauthorized response has a 3xx status code
func (o *GetPlanScheduleMultipleTriggersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan schedule multiple triggers unauthorized response has a 4xx status code
func (o *GetPlanScheduleMultipleTriggersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get plan schedule multiple triggers unauthorized response has a 5xx status code
func (o *GetPlanScheduleMultipleTriggersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan schedule multiple triggers unauthorized response a status code equal to that given
func (o *GetPlanScheduleMultipleTriggersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetPlanScheduleMultipleTriggersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersUnauthorized) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPlanScheduleMultipleTriggersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanScheduleMultipleTriggersForbidden creates a GetPlanScheduleMultipleTriggersForbidden with default headers values
func NewGetPlanScheduleMultipleTriggersForbidden() *GetPlanScheduleMultipleTriggersForbidden {
	return &GetPlanScheduleMultipleTriggersForbidden{}
}

/*
GetPlanScheduleMultipleTriggersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPlanScheduleMultipleTriggersForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get plan schedule multiple triggers forbidden response has a 2xx status code
func (o *GetPlanScheduleMultipleTriggersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan schedule multiple triggers forbidden response has a 3xx status code
func (o *GetPlanScheduleMultipleTriggersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan schedule multiple triggers forbidden response has a 4xx status code
func (o *GetPlanScheduleMultipleTriggersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get plan schedule multiple triggers forbidden response has a 5xx status code
func (o *GetPlanScheduleMultipleTriggersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan schedule multiple triggers forbidden response a status code equal to that given
func (o *GetPlanScheduleMultipleTriggersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetPlanScheduleMultipleTriggersForbidden) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersForbidden  %+v", 403, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersForbidden) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersForbidden  %+v", 403, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPlanScheduleMultipleTriggersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanScheduleMultipleTriggersNotFound creates a GetPlanScheduleMultipleTriggersNotFound with default headers values
func NewGetPlanScheduleMultipleTriggersNotFound() *GetPlanScheduleMultipleTriggersNotFound {
	return &GetPlanScheduleMultipleTriggersNotFound{}
}

/*
GetPlanScheduleMultipleTriggersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetPlanScheduleMultipleTriggersNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get plan schedule multiple triggers not found response has a 2xx status code
func (o *GetPlanScheduleMultipleTriggersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan schedule multiple triggers not found response has a 3xx status code
func (o *GetPlanScheduleMultipleTriggersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan schedule multiple triggers not found response has a 4xx status code
func (o *GetPlanScheduleMultipleTriggersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get plan schedule multiple triggers not found response has a 5xx status code
func (o *GetPlanScheduleMultipleTriggersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan schedule multiple triggers not found response a status code equal to that given
func (o *GetPlanScheduleMultipleTriggersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetPlanScheduleMultipleTriggersNotFound) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersNotFound  %+v", 404, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersNotFound) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersNotFound  %+v", 404, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPlanScheduleMultipleTriggersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanScheduleMultipleTriggersInternalServerError creates a GetPlanScheduleMultipleTriggersInternalServerError with default headers values
func NewGetPlanScheduleMultipleTriggersInternalServerError() *GetPlanScheduleMultipleTriggersInternalServerError {
	return &GetPlanScheduleMultipleTriggersInternalServerError{}
}

/*
GetPlanScheduleMultipleTriggersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetPlanScheduleMultipleTriggersInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get plan schedule multiple triggers internal server error response has a 2xx status code
func (o *GetPlanScheduleMultipleTriggersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan schedule multiple triggers internal server error response has a 3xx status code
func (o *GetPlanScheduleMultipleTriggersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan schedule multiple triggers internal server error response has a 4xx status code
func (o *GetPlanScheduleMultipleTriggersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get plan schedule multiple triggers internal server error response has a 5xx status code
func (o *GetPlanScheduleMultipleTriggersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get plan schedule multiple triggers internal server error response a status code equal to that given
func (o *GetPlanScheduleMultipleTriggersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetPlanScheduleMultipleTriggersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersInternalServerError) String() string {
	return fmt.Sprintf("[GET /executables/plans/{planId}/schedule][%d] getPlanScheduleMultipleTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPlanScheduleMultipleTriggersInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPlanScheduleMultipleTriggersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
