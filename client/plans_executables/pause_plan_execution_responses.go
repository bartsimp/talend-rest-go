// Code generated by go-swagger; DO NOT EDIT.

package plans_executables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// PausePlanExecutionReader is a Reader for the PausePlanExecution structure.
type PausePlanExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PausePlanExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPausePlanExecutionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPausePlanExecutionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPausePlanExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPausePlanExecutionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPausePlanExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPausePlanExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPausePlanExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPausePlanExecutionAccepted creates a PausePlanExecutionAccepted with default headers values
func NewPausePlanExecutionAccepted() *PausePlanExecutionAccepted {
	return &PausePlanExecutionAccepted{}
}

/*
PausePlanExecutionAccepted describes a response with status code 202, with default header values.

Plan execution state changed
*/
type PausePlanExecutionAccepted struct {
}

// IsSuccess returns true when this pause plan execution accepted response has a 2xx status code
func (o *PausePlanExecutionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause plan execution accepted response has a 3xx status code
func (o *PausePlanExecutionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause plan execution accepted response has a 4xx status code
func (o *PausePlanExecutionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause plan execution accepted response has a 5xx status code
func (o *PausePlanExecutionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this pause plan execution accepted response a status code equal to that given
func (o *PausePlanExecutionAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PausePlanExecutionAccepted) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionAccepted ", 202)
}

func (o *PausePlanExecutionAccepted) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionAccepted ", 202)
}

func (o *PausePlanExecutionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPausePlanExecutionNoContent creates a PausePlanExecutionNoContent with default headers values
func NewPausePlanExecutionNoContent() *PausePlanExecutionNoContent {
	return &PausePlanExecutionNoContent{}
}

/*
PausePlanExecutionNoContent describes a response with status code 204, with default header values.

Plan execution already in same pause state
*/
type PausePlanExecutionNoContent struct {
}

// IsSuccess returns true when this pause plan execution no content response has a 2xx status code
func (o *PausePlanExecutionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause plan execution no content response has a 3xx status code
func (o *PausePlanExecutionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause plan execution no content response has a 4xx status code
func (o *PausePlanExecutionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause plan execution no content response has a 5xx status code
func (o *PausePlanExecutionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this pause plan execution no content response a status code equal to that given
func (o *PausePlanExecutionNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PausePlanExecutionNoContent) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionNoContent ", 204)
}

func (o *PausePlanExecutionNoContent) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionNoContent ", 204)
}

func (o *PausePlanExecutionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPausePlanExecutionBadRequest creates a PausePlanExecutionBadRequest with default headers values
func NewPausePlanExecutionBadRequest() *PausePlanExecutionBadRequest {
	return &PausePlanExecutionBadRequest{}
}

/*
PausePlanExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PausePlanExecutionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause plan execution bad request response has a 2xx status code
func (o *PausePlanExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause plan execution bad request response has a 3xx status code
func (o *PausePlanExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause plan execution bad request response has a 4xx status code
func (o *PausePlanExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause plan execution bad request response has a 5xx status code
func (o *PausePlanExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pause plan execution bad request response a status code equal to that given
func (o *PausePlanExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PausePlanExecutionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *PausePlanExecutionBadRequest) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *PausePlanExecutionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PausePlanExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPausePlanExecutionUnauthorized creates a PausePlanExecutionUnauthorized with default headers values
func NewPausePlanExecutionUnauthorized() *PausePlanExecutionUnauthorized {
	return &PausePlanExecutionUnauthorized{}
}

/*
PausePlanExecutionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PausePlanExecutionUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause plan execution unauthorized response has a 2xx status code
func (o *PausePlanExecutionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause plan execution unauthorized response has a 3xx status code
func (o *PausePlanExecutionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause plan execution unauthorized response has a 4xx status code
func (o *PausePlanExecutionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause plan execution unauthorized response has a 5xx status code
func (o *PausePlanExecutionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pause plan execution unauthorized response a status code equal to that given
func (o *PausePlanExecutionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PausePlanExecutionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *PausePlanExecutionUnauthorized) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *PausePlanExecutionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PausePlanExecutionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPausePlanExecutionForbidden creates a PausePlanExecutionForbidden with default headers values
func NewPausePlanExecutionForbidden() *PausePlanExecutionForbidden {
	return &PausePlanExecutionForbidden{}
}

/*
PausePlanExecutionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PausePlanExecutionForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause plan execution forbidden response has a 2xx status code
func (o *PausePlanExecutionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause plan execution forbidden response has a 3xx status code
func (o *PausePlanExecutionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause plan execution forbidden response has a 4xx status code
func (o *PausePlanExecutionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause plan execution forbidden response has a 5xx status code
func (o *PausePlanExecutionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this pause plan execution forbidden response a status code equal to that given
func (o *PausePlanExecutionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PausePlanExecutionForbidden) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionForbidden  %+v", 403, o.Payload)
}

func (o *PausePlanExecutionForbidden) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionForbidden  %+v", 403, o.Payload)
}

func (o *PausePlanExecutionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PausePlanExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPausePlanExecutionNotFound creates a PausePlanExecutionNotFound with default headers values
func NewPausePlanExecutionNotFound() *PausePlanExecutionNotFound {
	return &PausePlanExecutionNotFound{}
}

/*
PausePlanExecutionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PausePlanExecutionNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause plan execution not found response has a 2xx status code
func (o *PausePlanExecutionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause plan execution not found response has a 3xx status code
func (o *PausePlanExecutionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause plan execution not found response has a 4xx status code
func (o *PausePlanExecutionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause plan execution not found response has a 5xx status code
func (o *PausePlanExecutionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pause plan execution not found response a status code equal to that given
func (o *PausePlanExecutionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PausePlanExecutionNotFound) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionNotFound  %+v", 404, o.Payload)
}

func (o *PausePlanExecutionNotFound) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionNotFound  %+v", 404, o.Payload)
}

func (o *PausePlanExecutionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PausePlanExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPausePlanExecutionInternalServerError creates a PausePlanExecutionInternalServerError with default headers values
func NewPausePlanExecutionInternalServerError() *PausePlanExecutionInternalServerError {
	return &PausePlanExecutionInternalServerError{}
}

/*
PausePlanExecutionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PausePlanExecutionInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause plan execution internal server error response has a 2xx status code
func (o *PausePlanExecutionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause plan execution internal server error response has a 3xx status code
func (o *PausePlanExecutionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause plan execution internal server error response has a 4xx status code
func (o *PausePlanExecutionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause plan execution internal server error response has a 5xx status code
func (o *PausePlanExecutionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pause plan execution internal server error response a status code equal to that given
func (o *PausePlanExecutionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PausePlanExecutionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *PausePlanExecutionInternalServerError) String() string {
	return fmt.Sprintf("[PUT /executables/plans/{planId}/pause][%d] pausePlanExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *PausePlanExecutionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PausePlanExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
