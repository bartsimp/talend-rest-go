// Code generated by go-swagger; DO NOT EDIT.

package plans_executables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// UnlinkPlanScheduleReader is a Reader for the UnlinkPlanSchedule structure.
type UnlinkPlanScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnlinkPlanScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUnlinkPlanScheduleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnlinkPlanScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUnlinkPlanScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUnlinkPlanScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnlinkPlanScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUnlinkPlanScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUnlinkPlanScheduleNoContent creates a UnlinkPlanScheduleNoContent with default headers values
func NewUnlinkPlanScheduleNoContent() *UnlinkPlanScheduleNoContent {
	return &UnlinkPlanScheduleNoContent{}
}

/*
UnlinkPlanScheduleNoContent describes a response with status code 204, with default header values.

No Content
*/
type UnlinkPlanScheduleNoContent struct {
	Payload *models.Response
}

// IsSuccess returns true when this unlink plan schedule no content response has a 2xx status code
func (o *UnlinkPlanScheduleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unlink plan schedule no content response has a 3xx status code
func (o *UnlinkPlanScheduleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink plan schedule no content response has a 4xx status code
func (o *UnlinkPlanScheduleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this unlink plan schedule no content response has a 5xx status code
func (o *UnlinkPlanScheduleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink plan schedule no content response a status code equal to that given
func (o *UnlinkPlanScheduleNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UnlinkPlanScheduleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleNoContent  %+v", 204, o.Payload)
}

func (o *UnlinkPlanScheduleNoContent) String() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleNoContent  %+v", 204, o.Payload)
}

func (o *UnlinkPlanScheduleNoContent) GetPayload() *models.Response {
	return o.Payload
}

func (o *UnlinkPlanScheduleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkPlanScheduleBadRequest creates a UnlinkPlanScheduleBadRequest with default headers values
func NewUnlinkPlanScheduleBadRequest() *UnlinkPlanScheduleBadRequest {
	return &UnlinkPlanScheduleBadRequest{}
}

/*
UnlinkPlanScheduleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UnlinkPlanScheduleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink plan schedule bad request response has a 2xx status code
func (o *UnlinkPlanScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink plan schedule bad request response has a 3xx status code
func (o *UnlinkPlanScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink plan schedule bad request response has a 4xx status code
func (o *UnlinkPlanScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink plan schedule bad request response has a 5xx status code
func (o *UnlinkPlanScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink plan schedule bad request response a status code equal to that given
func (o *UnlinkPlanScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UnlinkPlanScheduleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UnlinkPlanScheduleBadRequest) String() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UnlinkPlanScheduleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkPlanScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkPlanScheduleUnauthorized creates a UnlinkPlanScheduleUnauthorized with default headers values
func NewUnlinkPlanScheduleUnauthorized() *UnlinkPlanScheduleUnauthorized {
	return &UnlinkPlanScheduleUnauthorized{}
}

/*
UnlinkPlanScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UnlinkPlanScheduleUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink plan schedule unauthorized response has a 2xx status code
func (o *UnlinkPlanScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink plan schedule unauthorized response has a 3xx status code
func (o *UnlinkPlanScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink plan schedule unauthorized response has a 4xx status code
func (o *UnlinkPlanScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink plan schedule unauthorized response has a 5xx status code
func (o *UnlinkPlanScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink plan schedule unauthorized response a status code equal to that given
func (o *UnlinkPlanScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UnlinkPlanScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *UnlinkPlanScheduleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *UnlinkPlanScheduleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkPlanScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkPlanScheduleForbidden creates a UnlinkPlanScheduleForbidden with default headers values
func NewUnlinkPlanScheduleForbidden() *UnlinkPlanScheduleForbidden {
	return &UnlinkPlanScheduleForbidden{}
}

/*
UnlinkPlanScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UnlinkPlanScheduleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink plan schedule forbidden response has a 2xx status code
func (o *UnlinkPlanScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink plan schedule forbidden response has a 3xx status code
func (o *UnlinkPlanScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink plan schedule forbidden response has a 4xx status code
func (o *UnlinkPlanScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink plan schedule forbidden response has a 5xx status code
func (o *UnlinkPlanScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink plan schedule forbidden response a status code equal to that given
func (o *UnlinkPlanScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UnlinkPlanScheduleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleForbidden  %+v", 403, o.Payload)
}

func (o *UnlinkPlanScheduleForbidden) String() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleForbidden  %+v", 403, o.Payload)
}

func (o *UnlinkPlanScheduleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkPlanScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkPlanScheduleNotFound creates a UnlinkPlanScheduleNotFound with default headers values
func NewUnlinkPlanScheduleNotFound() *UnlinkPlanScheduleNotFound {
	return &UnlinkPlanScheduleNotFound{}
}

/*
UnlinkPlanScheduleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UnlinkPlanScheduleNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink plan schedule not found response has a 2xx status code
func (o *UnlinkPlanScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink plan schedule not found response has a 3xx status code
func (o *UnlinkPlanScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink plan schedule not found response has a 4xx status code
func (o *UnlinkPlanScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink plan schedule not found response has a 5xx status code
func (o *UnlinkPlanScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink plan schedule not found response a status code equal to that given
func (o *UnlinkPlanScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UnlinkPlanScheduleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UnlinkPlanScheduleNotFound) String() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UnlinkPlanScheduleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkPlanScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkPlanScheduleInternalServerError creates a UnlinkPlanScheduleInternalServerError with default headers values
func NewUnlinkPlanScheduleInternalServerError() *UnlinkPlanScheduleInternalServerError {
	return &UnlinkPlanScheduleInternalServerError{}
}

/*
UnlinkPlanScheduleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UnlinkPlanScheduleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink plan schedule internal server error response has a 2xx status code
func (o *UnlinkPlanScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink plan schedule internal server error response has a 3xx status code
func (o *UnlinkPlanScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink plan schedule internal server error response has a 4xx status code
func (o *UnlinkPlanScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this unlink plan schedule internal server error response has a 5xx status code
func (o *UnlinkPlanScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this unlink plan schedule internal server error response a status code equal to that given
func (o *UnlinkPlanScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UnlinkPlanScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UnlinkPlanScheduleInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /executables/plans/{planId}/schedule][%d] unlinkPlanScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UnlinkPlanScheduleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkPlanScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
