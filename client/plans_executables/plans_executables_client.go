// Code generated by go-swagger; DO NOT EDIT.

package plans_executables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new plans executables API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plans executables API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigurePlanExecution(params *ConfigurePlanExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigurePlanExecutionOK, error)

	CreatePlan(params *CreatePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePlanCreated, error)

	DeletePlan(params *DeletePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePlanNoContent, error)

	GetAvailablePlans(params *GetAvailablePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailablePlansOK, error)

	GetExecutableDetails(params *GetExecutableDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExecutableDetailsOK, error)

	GetPlanRunConfiguration(params *GetPlanRunConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanRunConfigurationOK, error)

	GetPlanScheduleMultipleTriggers(params *GetPlanScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanScheduleMultipleTriggersOK, error)

	GetPlanScheduledEvents(params *GetPlanScheduledEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanScheduledEventsOK, error)

	LinkPlanSchedule(params *LinkPlanScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkPlanScheduleOK, error)

	PausePlanExecution(params *PausePlanExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PausePlanExecutionAccepted, *PausePlanExecutionNoContent, error)

	StopScheduleForPlan(params *StopScheduleForPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopScheduleForPlanNoContent, error)

	UnlinkPlanSchedule(params *UnlinkPlanScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnlinkPlanScheduleNoContent, error)

	UpdatePlan(params *UpdatePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigurePlanExecution configures plan execution

Configure Plan execution
*/
func (a *Client) ConfigurePlanExecution(params *ConfigurePlanExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigurePlanExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurePlanExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configurePlanExecution",
		Method:             "PUT",
		PathPattern:        "/executables/plans/{planId}/run-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigurePlanExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigurePlanExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configurePlanExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePlan creates plan

Create Plan
*/
func (a *Client) CreatePlan(params *CreatePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPlan",
		Method:             "POST",
		PathPattern:        "/executables/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePlan deletes plan

Delete Plan
*/
func (a *Client) DeletePlan(params *DeletePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePlan",
		Method:             "DELETE",
		PathPattern:        "/executables/plans/{planId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvailablePlans gets available plans

Get available Plans
*/
func (a *Client) GetAvailablePlans(params *GetAvailablePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailablePlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailablePlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAvailablePlans",
		Method:             "GET",
		PathPattern:        "/executables/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvailablePlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailablePlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAvailablePlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutableDetails gets plan details

Get Plan details
*/
func (a *Client) GetExecutableDetails(params *GetExecutableDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExecutableDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutableDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExecutableDetails",
		Method:             "GET",
		PathPattern:        "/executables/plans/{planId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutableDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutableDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutableDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlanRunConfiguration gets plan configuration

Get Plan configuration
*/
func (a *Client) GetPlanRunConfiguration(params *GetPlanRunConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanRunConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanRunConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlanRunConfiguration",
		Method:             "GET",
		PathPattern:        "/executables/plans/{planId}/run-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlanRunConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanRunConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlanRunConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlanScheduleMultipleTriggers gets plan schedule

Get plan schedule multiple triggers
*/
func (a *Client) GetPlanScheduleMultipleTriggers(params *GetPlanScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanScheduleMultipleTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanScheduleMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlanScheduleMultipleTriggers",
		Method:             "GET",
		PathPattern:        "/executables/plans/{planId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlanScheduleMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanScheduleMultipleTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlanScheduleMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlanScheduledEvents gets plan scheduled triggers

Get plan triggers
*/
func (a *Client) GetPlanScheduledEvents(params *GetPlanScheduledEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanScheduledEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanScheduledEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlanScheduledEvents",
		Method:             "GET",
		PathPattern:        "/executables/plans/{planId}/run-config/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlanScheduledEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanScheduledEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlanScheduledEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkPlanSchedule links plan schedule

Link schedule with plan
*/
func (a *Client) LinkPlanSchedule(params *LinkPlanScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkPlanScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkPlanScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkPlanSchedule",
		Method:             "PUT",
		PathPattern:        "/executables/plans/{planId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkPlanScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkPlanScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkPlanSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PausePlanExecution pauses resume plan execution
*/
func (a *Client) PausePlanExecution(params *PausePlanExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PausePlanExecutionAccepted, *PausePlanExecutionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPausePlanExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pausePlanExecution",
		Method:             "PUT",
		PathPattern:        "/executables/plans/{planId}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PausePlanExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PausePlanExecutionAccepted:
		return value, nil, nil
	case *PausePlanExecutionNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for plans_executables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopScheduleForPlan stops schedule for plan

Stop schedule for plan
*/
func (a *Client) StopScheduleForPlan(params *StopScheduleForPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopScheduleForPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopScheduleForPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopScheduleForPlan",
		Method:             "DELETE",
		PathPattern:        "/executables/plans/{planId}/run-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopScheduleForPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopScheduleForPlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopScheduleForPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnlinkPlanSchedule unlinks plan schedule

Unlink schedule from plan
*/
func (a *Client) UnlinkPlanSchedule(params *UnlinkPlanScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnlinkPlanScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkPlanScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unlinkPlanSchedule",
		Method:             "DELETE",
		PathPattern:        "/executables/plans/{planId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkPlanScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkPlanScheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unlinkPlanSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePlan updates plan

Update Plan
*/
func (a *Client) UpdatePlan(params *UpdatePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePlan",
		Method:             "PUT",
		PathPattern:        "/executables/plans/{planId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
