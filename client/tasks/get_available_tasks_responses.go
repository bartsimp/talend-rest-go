// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// GetAvailableTasksReader is a Reader for the GetAvailableTasks structure.
type GetAvailableTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAvailableTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAvailableTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAvailableTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAvailableTasksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAvailableTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAvailableTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAvailableTasksOK creates a GetAvailableTasksOK with default headers values
func NewGetAvailableTasksOK() *GetAvailableTasksOK {
	return &GetAvailableTasksOK{}
}

/*
GetAvailableTasksOK describes a response with status code 200, with default header values.

OK
*/
type GetAvailableTasksOK struct {
	Payload *models.Page
}

// IsSuccess returns true when this get available tasks o k response has a 2xx status code
func (o *GetAvailableTasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get available tasks o k response has a 3xx status code
func (o *GetAvailableTasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get available tasks o k response has a 4xx status code
func (o *GetAvailableTasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get available tasks o k response has a 5xx status code
func (o *GetAvailableTasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get available tasks o k response a status code equal to that given
func (o *GetAvailableTasksOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAvailableTasksOK) Error() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksOK  %+v", 200, o.Payload)
}

func (o *GetAvailableTasksOK) String() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksOK  %+v", 200, o.Payload)
}

func (o *GetAvailableTasksOK) GetPayload() *models.Page {
	return o.Payload
}

func (o *GetAvailableTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Page)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAvailableTasksBadRequest creates a GetAvailableTasksBadRequest with default headers values
func NewGetAvailableTasksBadRequest() *GetAvailableTasksBadRequest {
	return &GetAvailableTasksBadRequest{}
}

/*
GetAvailableTasksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAvailableTasksBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get available tasks bad request response has a 2xx status code
func (o *GetAvailableTasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get available tasks bad request response has a 3xx status code
func (o *GetAvailableTasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get available tasks bad request response has a 4xx status code
func (o *GetAvailableTasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get available tasks bad request response has a 5xx status code
func (o *GetAvailableTasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get available tasks bad request response a status code equal to that given
func (o *GetAvailableTasksBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAvailableTasksBadRequest) Error() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksBadRequest  %+v", 400, o.Payload)
}

func (o *GetAvailableTasksBadRequest) String() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksBadRequest  %+v", 400, o.Payload)
}

func (o *GetAvailableTasksBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAvailableTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAvailableTasksUnauthorized creates a GetAvailableTasksUnauthorized with default headers values
func NewGetAvailableTasksUnauthorized() *GetAvailableTasksUnauthorized {
	return &GetAvailableTasksUnauthorized{}
}

/*
GetAvailableTasksUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAvailableTasksUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get available tasks unauthorized response has a 2xx status code
func (o *GetAvailableTasksUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get available tasks unauthorized response has a 3xx status code
func (o *GetAvailableTasksUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get available tasks unauthorized response has a 4xx status code
func (o *GetAvailableTasksUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get available tasks unauthorized response has a 5xx status code
func (o *GetAvailableTasksUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get available tasks unauthorized response a status code equal to that given
func (o *GetAvailableTasksUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAvailableTasksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAvailableTasksUnauthorized) String() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAvailableTasksUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAvailableTasksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAvailableTasksForbidden creates a GetAvailableTasksForbidden with default headers values
func NewGetAvailableTasksForbidden() *GetAvailableTasksForbidden {
	return &GetAvailableTasksForbidden{}
}

/*
GetAvailableTasksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAvailableTasksForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get available tasks forbidden response has a 2xx status code
func (o *GetAvailableTasksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get available tasks forbidden response has a 3xx status code
func (o *GetAvailableTasksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get available tasks forbidden response has a 4xx status code
func (o *GetAvailableTasksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get available tasks forbidden response has a 5xx status code
func (o *GetAvailableTasksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get available tasks forbidden response a status code equal to that given
func (o *GetAvailableTasksForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAvailableTasksForbidden) Error() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksForbidden  %+v", 403, o.Payload)
}

func (o *GetAvailableTasksForbidden) String() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksForbidden  %+v", 403, o.Payload)
}

func (o *GetAvailableTasksForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAvailableTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAvailableTasksInternalServerError creates a GetAvailableTasksInternalServerError with default headers values
func NewGetAvailableTasksInternalServerError() *GetAvailableTasksInternalServerError {
	return &GetAvailableTasksInternalServerError{}
}

/*
GetAvailableTasksInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAvailableTasksInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get available tasks internal server error response has a 2xx status code
func (o *GetAvailableTasksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get available tasks internal server error response has a 3xx status code
func (o *GetAvailableTasksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get available tasks internal server error response has a 4xx status code
func (o *GetAvailableTasksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get available tasks internal server error response has a 5xx status code
func (o *GetAvailableTasksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get available tasks internal server error response a status code equal to that given
func (o *GetAvailableTasksInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAvailableTasksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAvailableTasksInternalServerError) String() string {
	return fmt.Sprintf("[GET /executables/tasks][%d] getAvailableTasksInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAvailableTasksInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAvailableTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
