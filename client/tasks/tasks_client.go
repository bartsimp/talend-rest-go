// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigureTaskExecution(params *ConfigureTaskExecutionParams, opts ...ClientOption) (*ConfigureTaskExecutionOK, error)

	CreateTask(params *CreateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaskCreated, error)

	DeleteTask(params *DeleteTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskNoContent, error)

	ExecutablelistAvailableTaskExecutions(params *ExecutablelistAvailableTaskExecutionsParams, opts ...ClientOption) (*ExecutablelistAvailableTaskExecutionsOK, error)

	GetAvailableTasks(params *GetAvailableTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableTasksOK, error)

	GetScheduledEvents(params *GetScheduledEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduledEventsOK, error)

	GetTask(params *GetTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskOK, error)

	GetTaskConfiguration(params *GetTaskConfigurationParams, opts ...ClientOption) (*GetTaskConfigurationOK, error)

	GetTaskScheduleMultipleTriggers(params *GetTaskScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskScheduleMultipleTriggersOK, error)

	GetTaskScheduledEvents(params *GetTaskScheduledEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskScheduledEventsOK, error)

	LinkTaskSchedule(params *LinkTaskScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkTaskScheduleOK, error)

	ListAvailableTaskExecutions(params *ListAvailableTaskExecutionsParams, opts ...ClientOption) (*ListAvailableTaskExecutionsOK, error)

	ListTaskExecutions(params *ListTaskExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTaskExecutionsOK, error)

	PauseTaskExecution(params *PauseTaskExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseTaskExecutionAccepted, *PauseTaskExecutionNoContent, error)

	SearchTasks(params *SearchTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTasksOK, error)

	StopSchedule(params *StopScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopScheduleNoContent, error)

	UnlinkTaskSchedule(params *UnlinkTaskScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnlinkTaskScheduleNoContent, error)

	UpdateTask(params *UpdateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTaskOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigureTaskExecution configures task execution

Configure Task execution.<br>User must have the specific permission "Run Profile - Manage" or "Engines - Manage". Usage of attribute `parallelExecutionAllowed` with `REMOTE_ENGINE` runtime type requires API v2.6 and higher.
*/
func (a *Client) ConfigureTaskExecution(params *ConfigureTaskExecutionParams, opts ...ClientOption) (*ConfigureTaskExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureTaskExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureTaskExecution",
		Method:             "PUT",
		PathPattern:        "/executables/tasks/{taskId}/run-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigureTaskExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigureTaskExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configureTaskExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTask creates task

Create Task. By default the created task will have 'CLOUD' as its execution environment
*/
func (a *Client) CreateTask(params *CreateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTask",
		Method:             "POST",
		PathPattern:        "/executables/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTask deletes task

Delete Task
*/
func (a *Client) DeleteTask(params *DeleteTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTask",
		Method:             "DELETE",
		PathPattern:        "/executables/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutablelistAvailableTaskExecutions gets available tasks executions

Get available Tasks Executions
*/
func (a *Client) ExecutablelistAvailableTaskExecutions(params *ExecutablelistAvailableTaskExecutionsParams, opts ...ClientOption) (*ExecutablelistAvailableTaskExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutablelistAvailableTaskExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executablelistAvailableTaskExecutions",
		Method:             "POST",
		PathPattern:        "/executables/tasks/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutablelistAvailableTaskExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutablelistAvailableTaskExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for executablelistAvailableTaskExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvailableTasks gets available tasks

Get available Tasks
*/
func (a *Client) GetAvailableTasks(params *GetAvailableTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailableTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAvailableTasks",
		Method:             "GET",
		PathPattern:        "/executables/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvailableTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailableTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAvailableTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduledEvents gets scheduled executions

Get scheduled executions of all types
*/
func (a *Client) GetScheduledEvents(params *GetScheduledEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduledEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduledEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getScheduledEvents",
		Method:             "POST",
		PathPattern:        "/executables/events/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduledEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduledEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScheduledEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTask gets task by id

Get Task by id
*/
func (a *Client) GetTask(params *GetTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTask",
		Method:             "GET",
		PathPattern:        "/executables/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskConfiguration gets task configuration

Get Task configuration
*/
func (a *Client) GetTaskConfiguration(params *GetTaskConfigurationParams, opts ...ClientOption) (*GetTaskConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskConfiguration",
		Method:             "GET",
		PathPattern:        "/executables/tasks/{taskId}/run-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskScheduleMultipleTriggers gets task schedule

Get task schedule multiple triggers
*/
func (a *Client) GetTaskScheduleMultipleTriggers(params *GetTaskScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskScheduleMultipleTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskScheduleMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskScheduleMultipleTriggers",
		Method:             "GET",
		PathPattern:        "/executables/tasks/{taskId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskScheduleMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskScheduleMultipleTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskScheduleMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskScheduledEvents gets task scheduled triggers

Get task triggers
*/
func (a *Client) GetTaskScheduledEvents(params *GetTaskScheduledEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskScheduledEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskScheduledEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskScheduledEvents",
		Method:             "GET",
		PathPattern:        "/executables/tasks/{taskId}/run-config/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskScheduledEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskScheduledEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskScheduledEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkTaskSchedule links task schedule

Link schedule with task
*/
func (a *Client) LinkTaskSchedule(params *LinkTaskScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkTaskScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkTaskScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkTaskSchedule",
		Method:             "PUT",
		PathPattern:        "/executables/tasks/{taskId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkTaskScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkTaskScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkTaskSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAvailableTaskExecutions gets available tasks executions

Get available Tasks Executions
*/
func (a *Client) ListAvailableTaskExecutions(params *ListAvailableTaskExecutionsParams, opts ...ClientOption) (*ListAvailableTaskExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAvailableTaskExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAvailableTaskExecutions",
		Method:             "GET",
		PathPattern:        "/executables/tasks/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAvailableTaskExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAvailableTaskExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAvailableTaskExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTaskExecutions gets task executions

Get task executions
*/
func (a *Client) ListTaskExecutions(params *ListTaskExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTaskExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTaskExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTaskExecutions",
		Method:             "GET",
		PathPattern:        "/executables/tasks/{taskId}/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTaskExecutionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTaskExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTaskExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseTaskExecution pauses resume task execution
*/
func (a *Client) PauseTaskExecution(params *PauseTaskExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseTaskExecutionAccepted, *PauseTaskExecutionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseTaskExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pauseTaskExecution",
		Method:             "PUT",
		PathPattern:        "/executables/tasks/{taskId}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PauseTaskExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PauseTaskExecutionAccepted:
		return value, nil, nil
	case *PauseTaskExecutionNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTasks searches tasks

Search Tasks
*/
func (a *Client) SearchTasks(params *SearchTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTasks",
		Method:             "POST",
		PathPattern:        "/executables/tasks/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopSchedule stops schedule for task

Stop schedule for task
*/
func (a *Client) StopSchedule(params *StopScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopSchedule",
		Method:             "DELETE",
		PathPattern:        "/executables/tasks/{taskId}/run-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopScheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnlinkTaskSchedule unlinks task schedule

Unlink schedule from task
*/
func (a *Client) UnlinkTaskSchedule(params *UnlinkTaskScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnlinkTaskScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkTaskScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unlinkTaskSchedule",
		Method:             "DELETE",
		PathPattern:        "/executables/tasks/{taskId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkTaskScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkTaskScheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unlinkTaskSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTask updates task

Update Task
*/
func (a *Client) UpdateTask(params *UpdateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTask",
		Method:             "PUT",
		PathPattern:        "/executables/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
