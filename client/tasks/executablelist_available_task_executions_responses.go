// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// ExecutablelistAvailableTaskExecutionsReader is a Reader for the ExecutablelistAvailableTaskExecutions structure.
type ExecutablelistAvailableTaskExecutionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecutablelistAvailableTaskExecutionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecutablelistAvailableTaskExecutionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecutablelistAvailableTaskExecutionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecutablelistAvailableTaskExecutionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecutablelistAvailableTaskExecutionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecutablelistAvailableTaskExecutionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecutablelistAvailableTaskExecutionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExecutablelistAvailableTaskExecutionsOK creates a ExecutablelistAvailableTaskExecutionsOK with default headers values
func NewExecutablelistAvailableTaskExecutionsOK() *ExecutablelistAvailableTaskExecutionsOK {
	return &ExecutablelistAvailableTaskExecutionsOK{}
}

/*
ExecutablelistAvailableTaskExecutionsOK describes a response with status code 200, with default header values.

OK
*/
type ExecutablelistAvailableTaskExecutionsOK struct {
	Payload *models.Page
}

// IsSuccess returns true when this executablelist available task executions o k response has a 2xx status code
func (o *ExecutablelistAvailableTaskExecutionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this executablelist available task executions o k response has a 3xx status code
func (o *ExecutablelistAvailableTaskExecutionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executablelist available task executions o k response has a 4xx status code
func (o *ExecutablelistAvailableTaskExecutionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this executablelist available task executions o k response has a 5xx status code
func (o *ExecutablelistAvailableTaskExecutionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this executablelist available task executions o k response a status code equal to that given
func (o *ExecutablelistAvailableTaskExecutionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ExecutablelistAvailableTaskExecutionsOK) Error() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsOK) String() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsOK) GetPayload() *models.Page {
	return o.Payload
}

func (o *ExecutablelistAvailableTaskExecutionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Page)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutablelistAvailableTaskExecutionsBadRequest creates a ExecutablelistAvailableTaskExecutionsBadRequest with default headers values
func NewExecutablelistAvailableTaskExecutionsBadRequest() *ExecutablelistAvailableTaskExecutionsBadRequest {
	return &ExecutablelistAvailableTaskExecutionsBadRequest{}
}

/*
ExecutablelistAvailableTaskExecutionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecutablelistAvailableTaskExecutionsBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this executablelist available task executions bad request response has a 2xx status code
func (o *ExecutablelistAvailableTaskExecutionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executablelist available task executions bad request response has a 3xx status code
func (o *ExecutablelistAvailableTaskExecutionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executablelist available task executions bad request response has a 4xx status code
func (o *ExecutablelistAvailableTaskExecutionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this executablelist available task executions bad request response has a 5xx status code
func (o *ExecutablelistAvailableTaskExecutionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this executablelist available task executions bad request response a status code equal to that given
func (o *ExecutablelistAvailableTaskExecutionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ExecutablelistAvailableTaskExecutionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsBadRequest) String() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutablelistAvailableTaskExecutionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutablelistAvailableTaskExecutionsUnauthorized creates a ExecutablelistAvailableTaskExecutionsUnauthorized with default headers values
func NewExecutablelistAvailableTaskExecutionsUnauthorized() *ExecutablelistAvailableTaskExecutionsUnauthorized {
	return &ExecutablelistAvailableTaskExecutionsUnauthorized{}
}

/*
ExecutablelistAvailableTaskExecutionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecutablelistAvailableTaskExecutionsUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this executablelist available task executions unauthorized response has a 2xx status code
func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executablelist available task executions unauthorized response has a 3xx status code
func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executablelist available task executions unauthorized response has a 4xx status code
func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this executablelist available task executions unauthorized response has a 5xx status code
func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this executablelist available task executions unauthorized response a status code equal to that given
func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) String() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutablelistAvailableTaskExecutionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutablelistAvailableTaskExecutionsForbidden creates a ExecutablelistAvailableTaskExecutionsForbidden with default headers values
func NewExecutablelistAvailableTaskExecutionsForbidden() *ExecutablelistAvailableTaskExecutionsForbidden {
	return &ExecutablelistAvailableTaskExecutionsForbidden{}
}

/*
ExecutablelistAvailableTaskExecutionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecutablelistAvailableTaskExecutionsForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this executablelist available task executions forbidden response has a 2xx status code
func (o *ExecutablelistAvailableTaskExecutionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executablelist available task executions forbidden response has a 3xx status code
func (o *ExecutablelistAvailableTaskExecutionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executablelist available task executions forbidden response has a 4xx status code
func (o *ExecutablelistAvailableTaskExecutionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this executablelist available task executions forbidden response has a 5xx status code
func (o *ExecutablelistAvailableTaskExecutionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this executablelist available task executions forbidden response a status code equal to that given
func (o *ExecutablelistAvailableTaskExecutionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ExecutablelistAvailableTaskExecutionsForbidden) Error() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsForbidden) String() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutablelistAvailableTaskExecutionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutablelistAvailableTaskExecutionsNotFound creates a ExecutablelistAvailableTaskExecutionsNotFound with default headers values
func NewExecutablelistAvailableTaskExecutionsNotFound() *ExecutablelistAvailableTaskExecutionsNotFound {
	return &ExecutablelistAvailableTaskExecutionsNotFound{}
}

/*
ExecutablelistAvailableTaskExecutionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExecutablelistAvailableTaskExecutionsNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this executablelist available task executions not found response has a 2xx status code
func (o *ExecutablelistAvailableTaskExecutionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executablelist available task executions not found response has a 3xx status code
func (o *ExecutablelistAvailableTaskExecutionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executablelist available task executions not found response has a 4xx status code
func (o *ExecutablelistAvailableTaskExecutionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this executablelist available task executions not found response has a 5xx status code
func (o *ExecutablelistAvailableTaskExecutionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this executablelist available task executions not found response a status code equal to that given
func (o *ExecutablelistAvailableTaskExecutionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ExecutablelistAvailableTaskExecutionsNotFound) Error() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsNotFound  %+v", 404, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsNotFound) String() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsNotFound  %+v", 404, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutablelistAvailableTaskExecutionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutablelistAvailableTaskExecutionsInternalServerError creates a ExecutablelistAvailableTaskExecutionsInternalServerError with default headers values
func NewExecutablelistAvailableTaskExecutionsInternalServerError() *ExecutablelistAvailableTaskExecutionsInternalServerError {
	return &ExecutablelistAvailableTaskExecutionsInternalServerError{}
}

/*
ExecutablelistAvailableTaskExecutionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExecutablelistAvailableTaskExecutionsInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this executablelist available task executions internal server error response has a 2xx status code
func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executablelist available task executions internal server error response has a 3xx status code
func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executablelist available task executions internal server error response has a 4xx status code
func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this executablelist available task executions internal server error response has a 5xx status code
func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this executablelist available task executions internal server error response a status code equal to that given
func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /executables/tasks/executions][%d] executablelistAvailableTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecutablelistAvailableTaskExecutionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
