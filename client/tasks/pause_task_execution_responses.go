// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// PauseTaskExecutionReader is a Reader for the PauseTaskExecution structure.
type PauseTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PauseTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPauseTaskExecutionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPauseTaskExecutionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPauseTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPauseTaskExecutionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPauseTaskExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPauseTaskExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPauseTaskExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPauseTaskExecutionAccepted creates a PauseTaskExecutionAccepted with default headers values
func NewPauseTaskExecutionAccepted() *PauseTaskExecutionAccepted {
	return &PauseTaskExecutionAccepted{}
}

/*
PauseTaskExecutionAccepted describes a response with status code 202, with default header values.

Task execution state changed
*/
type PauseTaskExecutionAccepted struct {
}

// IsSuccess returns true when this pause task execution accepted response has a 2xx status code
func (o *PauseTaskExecutionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause task execution accepted response has a 3xx status code
func (o *PauseTaskExecutionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause task execution accepted response has a 4xx status code
func (o *PauseTaskExecutionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause task execution accepted response has a 5xx status code
func (o *PauseTaskExecutionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this pause task execution accepted response a status code equal to that given
func (o *PauseTaskExecutionAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PauseTaskExecutionAccepted) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionAccepted ", 202)
}

func (o *PauseTaskExecutionAccepted) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionAccepted ", 202)
}

func (o *PauseTaskExecutionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPauseTaskExecutionNoContent creates a PauseTaskExecutionNoContent with default headers values
func NewPauseTaskExecutionNoContent() *PauseTaskExecutionNoContent {
	return &PauseTaskExecutionNoContent{}
}

/*
PauseTaskExecutionNoContent describes a response with status code 204, with default header values.

Task execution already in same state
*/
type PauseTaskExecutionNoContent struct {
}

// IsSuccess returns true when this pause task execution no content response has a 2xx status code
func (o *PauseTaskExecutionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause task execution no content response has a 3xx status code
func (o *PauseTaskExecutionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause task execution no content response has a 4xx status code
func (o *PauseTaskExecutionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause task execution no content response has a 5xx status code
func (o *PauseTaskExecutionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this pause task execution no content response a status code equal to that given
func (o *PauseTaskExecutionNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PauseTaskExecutionNoContent) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionNoContent ", 204)
}

func (o *PauseTaskExecutionNoContent) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionNoContent ", 204)
}

func (o *PauseTaskExecutionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPauseTaskExecutionBadRequest creates a PauseTaskExecutionBadRequest with default headers values
func NewPauseTaskExecutionBadRequest() *PauseTaskExecutionBadRequest {
	return &PauseTaskExecutionBadRequest{}
}

/*
PauseTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PauseTaskExecutionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause task execution bad request response has a 2xx status code
func (o *PauseTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause task execution bad request response has a 3xx status code
func (o *PauseTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause task execution bad request response has a 4xx status code
func (o *PauseTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause task execution bad request response has a 5xx status code
func (o *PauseTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pause task execution bad request response a status code equal to that given
func (o *PauseTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PauseTaskExecutionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *PauseTaskExecutionBadRequest) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *PauseTaskExecutionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PauseTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseTaskExecutionUnauthorized creates a PauseTaskExecutionUnauthorized with default headers values
func NewPauseTaskExecutionUnauthorized() *PauseTaskExecutionUnauthorized {
	return &PauseTaskExecutionUnauthorized{}
}

/*
PauseTaskExecutionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PauseTaskExecutionUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause task execution unauthorized response has a 2xx status code
func (o *PauseTaskExecutionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause task execution unauthorized response has a 3xx status code
func (o *PauseTaskExecutionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause task execution unauthorized response has a 4xx status code
func (o *PauseTaskExecutionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause task execution unauthorized response has a 5xx status code
func (o *PauseTaskExecutionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pause task execution unauthorized response a status code equal to that given
func (o *PauseTaskExecutionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PauseTaskExecutionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *PauseTaskExecutionUnauthorized) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *PauseTaskExecutionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PauseTaskExecutionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseTaskExecutionForbidden creates a PauseTaskExecutionForbidden with default headers values
func NewPauseTaskExecutionForbidden() *PauseTaskExecutionForbidden {
	return &PauseTaskExecutionForbidden{}
}

/*
PauseTaskExecutionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PauseTaskExecutionForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause task execution forbidden response has a 2xx status code
func (o *PauseTaskExecutionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause task execution forbidden response has a 3xx status code
func (o *PauseTaskExecutionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause task execution forbidden response has a 4xx status code
func (o *PauseTaskExecutionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause task execution forbidden response has a 5xx status code
func (o *PauseTaskExecutionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this pause task execution forbidden response a status code equal to that given
func (o *PauseTaskExecutionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PauseTaskExecutionForbidden) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *PauseTaskExecutionForbidden) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *PauseTaskExecutionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PauseTaskExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseTaskExecutionNotFound creates a PauseTaskExecutionNotFound with default headers values
func NewPauseTaskExecutionNotFound() *PauseTaskExecutionNotFound {
	return &PauseTaskExecutionNotFound{}
}

/*
PauseTaskExecutionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PauseTaskExecutionNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause task execution not found response has a 2xx status code
func (o *PauseTaskExecutionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause task execution not found response has a 3xx status code
func (o *PauseTaskExecutionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause task execution not found response has a 4xx status code
func (o *PauseTaskExecutionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause task execution not found response has a 5xx status code
func (o *PauseTaskExecutionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pause task execution not found response a status code equal to that given
func (o *PauseTaskExecutionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PauseTaskExecutionNotFound) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *PauseTaskExecutionNotFound) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *PauseTaskExecutionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PauseTaskExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseTaskExecutionInternalServerError creates a PauseTaskExecutionInternalServerError with default headers values
func NewPauseTaskExecutionInternalServerError() *PauseTaskExecutionInternalServerError {
	return &PauseTaskExecutionInternalServerError{}
}

/*
PauseTaskExecutionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PauseTaskExecutionInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this pause task execution internal server error response has a 2xx status code
func (o *PauseTaskExecutionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause task execution internal server error response has a 3xx status code
func (o *PauseTaskExecutionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause task execution internal server error response has a 4xx status code
func (o *PauseTaskExecutionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause task execution internal server error response has a 5xx status code
func (o *PauseTaskExecutionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pause task execution internal server error response a status code equal to that given
func (o *PauseTaskExecutionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PauseTaskExecutionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *PauseTaskExecutionInternalServerError) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/pause][%d] pauseTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *PauseTaskExecutionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PauseTaskExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
