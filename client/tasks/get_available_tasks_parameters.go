// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAvailableTasksParams creates a new GetAvailableTasksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAvailableTasksParams() *GetAvailableTasksParams {
	return &GetAvailableTasksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAvailableTasksParamsWithTimeout creates a new GetAvailableTasksParams object
// with the ability to set a timeout on a request.
func NewGetAvailableTasksParamsWithTimeout(timeout time.Duration) *GetAvailableTasksParams {
	return &GetAvailableTasksParams{
		timeout: timeout,
	}
}

// NewGetAvailableTasksParamsWithContext creates a new GetAvailableTasksParams object
// with the ability to set a context for a request.
func NewGetAvailableTasksParamsWithContext(ctx context.Context) *GetAvailableTasksParams {
	return &GetAvailableTasksParams{
		Context: ctx,
	}
}

// NewGetAvailableTasksParamsWithHTTPClient creates a new GetAvailableTasksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAvailableTasksParamsWithHTTPClient(client *http.Client) *GetAvailableTasksParams {
	return &GetAvailableTasksParams{
		HTTPClient: client,
	}
}

/*
GetAvailableTasksParams contains all the parameters to send to the API endpoint

	for the get available tasks operation.

	Typically these are written to a http.Request.
*/
type GetAvailableTasksParams struct {

	/* ArtifactID.

	   artifact id
	*/
	ArtifactID *string

	/* EnvironmentID.

	   environment id
	*/
	EnvironmentID *string

	/* Limit.

	   the number of items to return. Must be in range [1, 100]. Default value - 100

	   Format: int32
	*/
	Limit *int32

	/* Name.

	   task name filter
	*/
	Name *string

	/* Offset.

	   the position of the first item. Must be greater than or equal to 0. Default value - 0

	   Format: int32
	*/
	Offset *int32

	/* RuntimeID.

	   runtime id
	*/
	RuntimeID *string

	/* RuntimeRunProfileID.

	   runtime run profile id
	*/
	RuntimeRunProfileID *string

	/* RuntimeType.

	   runtime type
	*/
	RuntimeType *string

	/* WorkspaceID.

	   workspace id
	*/
	WorkspaceID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get available tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAvailableTasksParams) WithDefaults() *GetAvailableTasksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get available tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAvailableTasksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get available tasks params
func (o *GetAvailableTasksParams) WithTimeout(timeout time.Duration) *GetAvailableTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get available tasks params
func (o *GetAvailableTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get available tasks params
func (o *GetAvailableTasksParams) WithContext(ctx context.Context) *GetAvailableTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get available tasks params
func (o *GetAvailableTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get available tasks params
func (o *GetAvailableTasksParams) WithHTTPClient(client *http.Client) *GetAvailableTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get available tasks params
func (o *GetAvailableTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactID adds the artifactID to the get available tasks params
func (o *GetAvailableTasksParams) WithArtifactID(artifactID *string) *GetAvailableTasksParams {
	o.SetArtifactID(artifactID)
	return o
}

// SetArtifactID adds the artifactId to the get available tasks params
func (o *GetAvailableTasksParams) SetArtifactID(artifactID *string) {
	o.ArtifactID = artifactID
}

// WithEnvironmentID adds the environmentID to the get available tasks params
func (o *GetAvailableTasksParams) WithEnvironmentID(environmentID *string) *GetAvailableTasksParams {
	o.SetEnvironmentID(environmentID)
	return o
}

// SetEnvironmentID adds the environmentId to the get available tasks params
func (o *GetAvailableTasksParams) SetEnvironmentID(environmentID *string) {
	o.EnvironmentID = environmentID
}

// WithLimit adds the limit to the get available tasks params
func (o *GetAvailableTasksParams) WithLimit(limit *int32) *GetAvailableTasksParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get available tasks params
func (o *GetAvailableTasksParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithName adds the name to the get available tasks params
func (o *GetAvailableTasksParams) WithName(name *string) *GetAvailableTasksParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get available tasks params
func (o *GetAvailableTasksParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get available tasks params
func (o *GetAvailableTasksParams) WithOffset(offset *int32) *GetAvailableTasksParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get available tasks params
func (o *GetAvailableTasksParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithRuntimeID adds the runtimeID to the get available tasks params
func (o *GetAvailableTasksParams) WithRuntimeID(runtimeID *string) *GetAvailableTasksParams {
	o.SetRuntimeID(runtimeID)
	return o
}

// SetRuntimeID adds the runtimeId to the get available tasks params
func (o *GetAvailableTasksParams) SetRuntimeID(runtimeID *string) {
	o.RuntimeID = runtimeID
}

// WithRuntimeRunProfileID adds the runtimeRunProfileID to the get available tasks params
func (o *GetAvailableTasksParams) WithRuntimeRunProfileID(runtimeRunProfileID *string) *GetAvailableTasksParams {
	o.SetRuntimeRunProfileID(runtimeRunProfileID)
	return o
}

// SetRuntimeRunProfileID adds the runtimeRunProfileId to the get available tasks params
func (o *GetAvailableTasksParams) SetRuntimeRunProfileID(runtimeRunProfileID *string) {
	o.RuntimeRunProfileID = runtimeRunProfileID
}

// WithRuntimeType adds the runtimeType to the get available tasks params
func (o *GetAvailableTasksParams) WithRuntimeType(runtimeType *string) *GetAvailableTasksParams {
	o.SetRuntimeType(runtimeType)
	return o
}

// SetRuntimeType adds the runtimeType to the get available tasks params
func (o *GetAvailableTasksParams) SetRuntimeType(runtimeType *string) {
	o.RuntimeType = runtimeType
}

// WithWorkspaceID adds the workspaceID to the get available tasks params
func (o *GetAvailableTasksParams) WithWorkspaceID(workspaceID *string) *GetAvailableTasksParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the get available tasks params
func (o *GetAvailableTasksParams) SetWorkspaceID(workspaceID *string) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAvailableTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArtifactID != nil {

		// query param artifactId
		var qrArtifactID string

		if o.ArtifactID != nil {
			qrArtifactID = *o.ArtifactID
		}
		qArtifactID := qrArtifactID
		if qArtifactID != "" {

			if err := r.SetQueryParam("artifactId", qArtifactID); err != nil {
				return err
			}
		}
	}

	if o.EnvironmentID != nil {

		// query param environmentId
		var qrEnvironmentID string

		if o.EnvironmentID != nil {
			qrEnvironmentID = *o.EnvironmentID
		}
		qEnvironmentID := qrEnvironmentID
		if qEnvironmentID != "" {

			if err := r.SetQueryParam("environmentId", qEnvironmentID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.RuntimeID != nil {

		// query param runtimeId
		var qrRuntimeID string

		if o.RuntimeID != nil {
			qrRuntimeID = *o.RuntimeID
		}
		qRuntimeID := qrRuntimeID
		if qRuntimeID != "" {

			if err := r.SetQueryParam("runtimeId", qRuntimeID); err != nil {
				return err
			}
		}
	}

	if o.RuntimeRunProfileID != nil {

		// query param runtimeRunProfileId
		var qrRuntimeRunProfileID string

		if o.RuntimeRunProfileID != nil {
			qrRuntimeRunProfileID = *o.RuntimeRunProfileID
		}
		qRuntimeRunProfileID := qrRuntimeRunProfileID
		if qRuntimeRunProfileID != "" {

			if err := r.SetQueryParam("runtimeRunProfileId", qRuntimeRunProfileID); err != nil {
				return err
			}
		}
	}

	if o.RuntimeType != nil {

		// query param runtimeType
		var qrRuntimeType string

		if o.RuntimeType != nil {
			qrRuntimeType = *o.RuntimeType
		}
		qRuntimeType := qrRuntimeType
		if qRuntimeType != "" {

			if err := r.SetQueryParam("runtimeType", qRuntimeType); err != nil {
				return err
			}
		}
	}

	if o.WorkspaceID != nil {

		// query param workspaceId
		var qrWorkspaceID string

		if o.WorkspaceID != nil {
			qrWorkspaceID = *o.WorkspaceID
		}
		qWorkspaceID := qrWorkspaceID
		if qWorkspaceID != "" {

			if err := r.SetQueryParam("workspaceId", qWorkspaceID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
