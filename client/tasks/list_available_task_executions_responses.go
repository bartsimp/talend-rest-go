// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// ListAvailableTaskExecutionsReader is a Reader for the ListAvailableTaskExecutions structure.
type ListAvailableTaskExecutionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAvailableTaskExecutionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAvailableTaskExecutionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAvailableTaskExecutionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAvailableTaskExecutionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAvailableTaskExecutionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAvailableTaskExecutionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListAvailableTaskExecutionsOK creates a ListAvailableTaskExecutionsOK with default headers values
func NewListAvailableTaskExecutionsOK() *ListAvailableTaskExecutionsOK {
	return &ListAvailableTaskExecutionsOK{}
}

/*
ListAvailableTaskExecutionsOK describes a response with status code 200, with default header values.

OK
*/
type ListAvailableTaskExecutionsOK struct {
	Payload *models.Page
}

// IsSuccess returns true when this list available task executions o k response has a 2xx status code
func (o *ListAvailableTaskExecutionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list available task executions o k response has a 3xx status code
func (o *ListAvailableTaskExecutionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list available task executions o k response has a 4xx status code
func (o *ListAvailableTaskExecutionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list available task executions o k response has a 5xx status code
func (o *ListAvailableTaskExecutionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list available task executions o k response a status code equal to that given
func (o *ListAvailableTaskExecutionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListAvailableTaskExecutionsOK) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ListAvailableTaskExecutionsOK) String() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ListAvailableTaskExecutionsOK) GetPayload() *models.Page {
	return o.Payload
}

func (o *ListAvailableTaskExecutionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Page)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAvailableTaskExecutionsBadRequest creates a ListAvailableTaskExecutionsBadRequest with default headers values
func NewListAvailableTaskExecutionsBadRequest() *ListAvailableTaskExecutionsBadRequest {
	return &ListAvailableTaskExecutionsBadRequest{}
}

/*
ListAvailableTaskExecutionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListAvailableTaskExecutionsBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list available task executions bad request response has a 2xx status code
func (o *ListAvailableTaskExecutionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list available task executions bad request response has a 3xx status code
func (o *ListAvailableTaskExecutionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list available task executions bad request response has a 4xx status code
func (o *ListAvailableTaskExecutionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list available task executions bad request response has a 5xx status code
func (o *ListAvailableTaskExecutionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list available task executions bad request response a status code equal to that given
func (o *ListAvailableTaskExecutionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListAvailableTaskExecutionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListAvailableTaskExecutionsBadRequest) String() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListAvailableTaskExecutionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAvailableTaskExecutionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAvailableTaskExecutionsUnauthorized creates a ListAvailableTaskExecutionsUnauthorized with default headers values
func NewListAvailableTaskExecutionsUnauthorized() *ListAvailableTaskExecutionsUnauthorized {
	return &ListAvailableTaskExecutionsUnauthorized{}
}

/*
ListAvailableTaskExecutionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListAvailableTaskExecutionsUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list available task executions unauthorized response has a 2xx status code
func (o *ListAvailableTaskExecutionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list available task executions unauthorized response has a 3xx status code
func (o *ListAvailableTaskExecutionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list available task executions unauthorized response has a 4xx status code
func (o *ListAvailableTaskExecutionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list available task executions unauthorized response has a 5xx status code
func (o *ListAvailableTaskExecutionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list available task executions unauthorized response a status code equal to that given
func (o *ListAvailableTaskExecutionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListAvailableTaskExecutionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAvailableTaskExecutionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAvailableTaskExecutionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAvailableTaskExecutionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAvailableTaskExecutionsForbidden creates a ListAvailableTaskExecutionsForbidden with default headers values
func NewListAvailableTaskExecutionsForbidden() *ListAvailableTaskExecutionsForbidden {
	return &ListAvailableTaskExecutionsForbidden{}
}

/*
ListAvailableTaskExecutionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListAvailableTaskExecutionsForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list available task executions forbidden response has a 2xx status code
func (o *ListAvailableTaskExecutionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list available task executions forbidden response has a 3xx status code
func (o *ListAvailableTaskExecutionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list available task executions forbidden response has a 4xx status code
func (o *ListAvailableTaskExecutionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list available task executions forbidden response has a 5xx status code
func (o *ListAvailableTaskExecutionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list available task executions forbidden response a status code equal to that given
func (o *ListAvailableTaskExecutionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListAvailableTaskExecutionsForbidden) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ListAvailableTaskExecutionsForbidden) String() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ListAvailableTaskExecutionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAvailableTaskExecutionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAvailableTaskExecutionsInternalServerError creates a ListAvailableTaskExecutionsInternalServerError with default headers values
func NewListAvailableTaskExecutionsInternalServerError() *ListAvailableTaskExecutionsInternalServerError {
	return &ListAvailableTaskExecutionsInternalServerError{}
}

/*
ListAvailableTaskExecutionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListAvailableTaskExecutionsInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list available task executions internal server error response has a 2xx status code
func (o *ListAvailableTaskExecutionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list available task executions internal server error response has a 3xx status code
func (o *ListAvailableTaskExecutionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list available task executions internal server error response has a 4xx status code
func (o *ListAvailableTaskExecutionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list available task executions internal server error response has a 5xx status code
func (o *ListAvailableTaskExecutionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list available task executions internal server error response a status code equal to that given
func (o *ListAvailableTaskExecutionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListAvailableTaskExecutionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAvailableTaskExecutionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /executables/tasks/executions][%d] listAvailableTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAvailableTaskExecutionsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAvailableTaskExecutionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
