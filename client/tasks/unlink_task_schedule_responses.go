// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// UnlinkTaskScheduleReader is a Reader for the UnlinkTaskSchedule structure.
type UnlinkTaskScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnlinkTaskScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUnlinkTaskScheduleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnlinkTaskScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUnlinkTaskScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUnlinkTaskScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnlinkTaskScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUnlinkTaskScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUnlinkTaskScheduleNoContent creates a UnlinkTaskScheduleNoContent with default headers values
func NewUnlinkTaskScheduleNoContent() *UnlinkTaskScheduleNoContent {
	return &UnlinkTaskScheduleNoContent{}
}

/*
UnlinkTaskScheduleNoContent describes a response with status code 204, with default header values.

No content
*/
type UnlinkTaskScheduleNoContent struct {
	Payload *models.Response
}

// IsSuccess returns true when this unlink task schedule no content response has a 2xx status code
func (o *UnlinkTaskScheduleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unlink task schedule no content response has a 3xx status code
func (o *UnlinkTaskScheduleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink task schedule no content response has a 4xx status code
func (o *UnlinkTaskScheduleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this unlink task schedule no content response has a 5xx status code
func (o *UnlinkTaskScheduleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink task schedule no content response a status code equal to that given
func (o *UnlinkTaskScheduleNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UnlinkTaskScheduleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleNoContent  %+v", 204, o.Payload)
}

func (o *UnlinkTaskScheduleNoContent) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleNoContent  %+v", 204, o.Payload)
}

func (o *UnlinkTaskScheduleNoContent) GetPayload() *models.Response {
	return o.Payload
}

func (o *UnlinkTaskScheduleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkTaskScheduleBadRequest creates a UnlinkTaskScheduleBadRequest with default headers values
func NewUnlinkTaskScheduleBadRequest() *UnlinkTaskScheduleBadRequest {
	return &UnlinkTaskScheduleBadRequest{}
}

/*
UnlinkTaskScheduleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UnlinkTaskScheduleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink task schedule bad request response has a 2xx status code
func (o *UnlinkTaskScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink task schedule bad request response has a 3xx status code
func (o *UnlinkTaskScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink task schedule bad request response has a 4xx status code
func (o *UnlinkTaskScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink task schedule bad request response has a 5xx status code
func (o *UnlinkTaskScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink task schedule bad request response a status code equal to that given
func (o *UnlinkTaskScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UnlinkTaskScheduleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UnlinkTaskScheduleBadRequest) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UnlinkTaskScheduleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkTaskScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkTaskScheduleUnauthorized creates a UnlinkTaskScheduleUnauthorized with default headers values
func NewUnlinkTaskScheduleUnauthorized() *UnlinkTaskScheduleUnauthorized {
	return &UnlinkTaskScheduleUnauthorized{}
}

/*
UnlinkTaskScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UnlinkTaskScheduleUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink task schedule unauthorized response has a 2xx status code
func (o *UnlinkTaskScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink task schedule unauthorized response has a 3xx status code
func (o *UnlinkTaskScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink task schedule unauthorized response has a 4xx status code
func (o *UnlinkTaskScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink task schedule unauthorized response has a 5xx status code
func (o *UnlinkTaskScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink task schedule unauthorized response a status code equal to that given
func (o *UnlinkTaskScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UnlinkTaskScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *UnlinkTaskScheduleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *UnlinkTaskScheduleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkTaskScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkTaskScheduleForbidden creates a UnlinkTaskScheduleForbidden with default headers values
func NewUnlinkTaskScheduleForbidden() *UnlinkTaskScheduleForbidden {
	return &UnlinkTaskScheduleForbidden{}
}

/*
UnlinkTaskScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UnlinkTaskScheduleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink task schedule forbidden response has a 2xx status code
func (o *UnlinkTaskScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink task schedule forbidden response has a 3xx status code
func (o *UnlinkTaskScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink task schedule forbidden response has a 4xx status code
func (o *UnlinkTaskScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink task schedule forbidden response has a 5xx status code
func (o *UnlinkTaskScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink task schedule forbidden response a status code equal to that given
func (o *UnlinkTaskScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UnlinkTaskScheduleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleForbidden  %+v", 403, o.Payload)
}

func (o *UnlinkTaskScheduleForbidden) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleForbidden  %+v", 403, o.Payload)
}

func (o *UnlinkTaskScheduleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkTaskScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkTaskScheduleNotFound creates a UnlinkTaskScheduleNotFound with default headers values
func NewUnlinkTaskScheduleNotFound() *UnlinkTaskScheduleNotFound {
	return &UnlinkTaskScheduleNotFound{}
}

/*
UnlinkTaskScheduleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UnlinkTaskScheduleNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink task schedule not found response has a 2xx status code
func (o *UnlinkTaskScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink task schedule not found response has a 3xx status code
func (o *UnlinkTaskScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink task schedule not found response has a 4xx status code
func (o *UnlinkTaskScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink task schedule not found response has a 5xx status code
func (o *UnlinkTaskScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink task schedule not found response a status code equal to that given
func (o *UnlinkTaskScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UnlinkTaskScheduleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UnlinkTaskScheduleNotFound) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UnlinkTaskScheduleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkTaskScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkTaskScheduleInternalServerError creates a UnlinkTaskScheduleInternalServerError with default headers values
func NewUnlinkTaskScheduleInternalServerError() *UnlinkTaskScheduleInternalServerError {
	return &UnlinkTaskScheduleInternalServerError{}
}

/*
UnlinkTaskScheduleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UnlinkTaskScheduleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this unlink task schedule internal server error response has a 2xx status code
func (o *UnlinkTaskScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink task schedule internal server error response has a 3xx status code
func (o *UnlinkTaskScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink task schedule internal server error response has a 4xx status code
func (o *UnlinkTaskScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this unlink task schedule internal server error response has a 5xx status code
func (o *UnlinkTaskScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this unlink task schedule internal server error response a status code equal to that given
func (o *UnlinkTaskScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UnlinkTaskScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UnlinkTaskScheduleInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/schedule][%d] unlinkTaskScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UnlinkTaskScheduleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UnlinkTaskScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
