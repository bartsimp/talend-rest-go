// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// StopScheduleReader is a Reader for the StopSchedule structure.
type StopScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStopScheduleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopScheduleNoContent creates a StopScheduleNoContent with default headers values
func NewStopScheduleNoContent() *StopScheduleNoContent {
	return &StopScheduleNoContent{}
}

/*
StopScheduleNoContent describes a response with status code 204, with default header values.

No Content
*/
type StopScheduleNoContent struct {
}

// IsSuccess returns true when this stop schedule no content response has a 2xx status code
func (o *StopScheduleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop schedule no content response has a 3xx status code
func (o *StopScheduleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop schedule no content response has a 4xx status code
func (o *StopScheduleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop schedule no content response has a 5xx status code
func (o *StopScheduleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stop schedule no content response a status code equal to that given
func (o *StopScheduleNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *StopScheduleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleNoContent ", 204)
}

func (o *StopScheduleNoContent) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleNoContent ", 204)
}

func (o *StopScheduleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopScheduleBadRequest creates a StopScheduleBadRequest with default headers values
func NewStopScheduleBadRequest() *StopScheduleBadRequest {
	return &StopScheduleBadRequest{}
}

/*
StopScheduleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StopScheduleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stop schedule bad request response has a 2xx status code
func (o *StopScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop schedule bad request response has a 3xx status code
func (o *StopScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop schedule bad request response has a 4xx status code
func (o *StopScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop schedule bad request response has a 5xx status code
func (o *StopScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop schedule bad request response a status code equal to that given
func (o *StopScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StopScheduleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *StopScheduleBadRequest) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *StopScheduleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StopScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScheduleUnauthorized creates a StopScheduleUnauthorized with default headers values
func NewStopScheduleUnauthorized() *StopScheduleUnauthorized {
	return &StopScheduleUnauthorized{}
}

/*
StopScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StopScheduleUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stop schedule unauthorized response has a 2xx status code
func (o *StopScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop schedule unauthorized response has a 3xx status code
func (o *StopScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop schedule unauthorized response has a 4xx status code
func (o *StopScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop schedule unauthorized response has a 5xx status code
func (o *StopScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop schedule unauthorized response a status code equal to that given
func (o *StopScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StopScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *StopScheduleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *StopScheduleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StopScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScheduleForbidden creates a StopScheduleForbidden with default headers values
func NewStopScheduleForbidden() *StopScheduleForbidden {
	return &StopScheduleForbidden{}
}

/*
StopScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StopScheduleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stop schedule forbidden response has a 2xx status code
func (o *StopScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop schedule forbidden response has a 3xx status code
func (o *StopScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop schedule forbidden response has a 4xx status code
func (o *StopScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop schedule forbidden response has a 5xx status code
func (o *StopScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop schedule forbidden response a status code equal to that given
func (o *StopScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StopScheduleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleForbidden  %+v", 403, o.Payload)
}

func (o *StopScheduleForbidden) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleForbidden  %+v", 403, o.Payload)
}

func (o *StopScheduleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StopScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScheduleNotFound creates a StopScheduleNotFound with default headers values
func NewStopScheduleNotFound() *StopScheduleNotFound {
	return &StopScheduleNotFound{}
}

/*
StopScheduleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StopScheduleNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stop schedule not found response has a 2xx status code
func (o *StopScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop schedule not found response has a 3xx status code
func (o *StopScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop schedule not found response has a 4xx status code
func (o *StopScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop schedule not found response has a 5xx status code
func (o *StopScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop schedule not found response a status code equal to that given
func (o *StopScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StopScheduleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleNotFound  %+v", 404, o.Payload)
}

func (o *StopScheduleNotFound) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleNotFound  %+v", 404, o.Payload)
}

func (o *StopScheduleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StopScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScheduleInternalServerError creates a StopScheduleInternalServerError with default headers values
func NewStopScheduleInternalServerError() *StopScheduleInternalServerError {
	return &StopScheduleInternalServerError{}
}

/*
StopScheduleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type StopScheduleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stop schedule internal server error response has a 2xx status code
func (o *StopScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop schedule internal server error response has a 3xx status code
func (o *StopScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop schedule internal server error response has a 4xx status code
func (o *StopScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop schedule internal server error response has a 5xx status code
func (o *StopScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop schedule internal server error response a status code equal to that given
func (o *StopScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StopScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *StopScheduleInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /executables/tasks/{taskId}/run-config][%d] stopScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *StopScheduleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StopScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
