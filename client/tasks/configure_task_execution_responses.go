// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// ConfigureTaskExecutionReader is a Reader for the ConfigureTaskExecution structure.
type ConfigureTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigureTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConfigureTaskExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfigureTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConfigureTaskExecutionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfigureTaskExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfigureTaskExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfigureTaskExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfigureTaskExecutionOK creates a ConfigureTaskExecutionOK with default headers values
func NewConfigureTaskExecutionOK() *ConfigureTaskExecutionOK {
	return &ConfigureTaskExecutionOK{}
}

/*
ConfigureTaskExecutionOK describes a response with status code 200, with default header values.

OK
*/
type ConfigureTaskExecutionOK struct {
	Payload *models.TaskRunConfig
}

// IsSuccess returns true when this configure task execution o k response has a 2xx status code
func (o *ConfigureTaskExecutionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this configure task execution o k response has a 3xx status code
func (o *ConfigureTaskExecutionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure task execution o k response has a 4xx status code
func (o *ConfigureTaskExecutionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this configure task execution o k response has a 5xx status code
func (o *ConfigureTaskExecutionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this configure task execution o k response a status code equal to that given
func (o *ConfigureTaskExecutionOK) IsCode(code int) bool {
	return code == 200
}

func (o *ConfigureTaskExecutionOK) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *ConfigureTaskExecutionOK) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *ConfigureTaskExecutionOK) GetPayload() *models.TaskRunConfig {
	return o.Payload
}

func (o *ConfigureTaskExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskRunConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureTaskExecutionBadRequest creates a ConfigureTaskExecutionBadRequest with default headers values
func NewConfigureTaskExecutionBadRequest() *ConfigureTaskExecutionBadRequest {
	return &ConfigureTaskExecutionBadRequest{}
}

/*
ConfigureTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ConfigureTaskExecutionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this configure task execution bad request response has a 2xx status code
func (o *ConfigureTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this configure task execution bad request response has a 3xx status code
func (o *ConfigureTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure task execution bad request response has a 4xx status code
func (o *ConfigureTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this configure task execution bad request response has a 5xx status code
func (o *ConfigureTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this configure task execution bad request response a status code equal to that given
func (o *ConfigureTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfigureTaskExecutionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ConfigureTaskExecutionBadRequest) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ConfigureTaskExecutionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigureTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureTaskExecutionUnauthorized creates a ConfigureTaskExecutionUnauthorized with default headers values
func NewConfigureTaskExecutionUnauthorized() *ConfigureTaskExecutionUnauthorized {
	return &ConfigureTaskExecutionUnauthorized{}
}

/*
ConfigureTaskExecutionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ConfigureTaskExecutionUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this configure task execution unauthorized response has a 2xx status code
func (o *ConfigureTaskExecutionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this configure task execution unauthorized response has a 3xx status code
func (o *ConfigureTaskExecutionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure task execution unauthorized response has a 4xx status code
func (o *ConfigureTaskExecutionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this configure task execution unauthorized response has a 5xx status code
func (o *ConfigureTaskExecutionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this configure task execution unauthorized response a status code equal to that given
func (o *ConfigureTaskExecutionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ConfigureTaskExecutionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfigureTaskExecutionUnauthorized) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfigureTaskExecutionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigureTaskExecutionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureTaskExecutionForbidden creates a ConfigureTaskExecutionForbidden with default headers values
func NewConfigureTaskExecutionForbidden() *ConfigureTaskExecutionForbidden {
	return &ConfigureTaskExecutionForbidden{}
}

/*
ConfigureTaskExecutionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ConfigureTaskExecutionForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this configure task execution forbidden response has a 2xx status code
func (o *ConfigureTaskExecutionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this configure task execution forbidden response has a 3xx status code
func (o *ConfigureTaskExecutionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure task execution forbidden response has a 4xx status code
func (o *ConfigureTaskExecutionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this configure task execution forbidden response has a 5xx status code
func (o *ConfigureTaskExecutionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this configure task execution forbidden response a status code equal to that given
func (o *ConfigureTaskExecutionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfigureTaskExecutionForbidden) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ConfigureTaskExecutionForbidden) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ConfigureTaskExecutionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigureTaskExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureTaskExecutionNotFound creates a ConfigureTaskExecutionNotFound with default headers values
func NewConfigureTaskExecutionNotFound() *ConfigureTaskExecutionNotFound {
	return &ConfigureTaskExecutionNotFound{}
}

/*
ConfigureTaskExecutionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ConfigureTaskExecutionNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this configure task execution not found response has a 2xx status code
func (o *ConfigureTaskExecutionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this configure task execution not found response has a 3xx status code
func (o *ConfigureTaskExecutionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure task execution not found response has a 4xx status code
func (o *ConfigureTaskExecutionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this configure task execution not found response has a 5xx status code
func (o *ConfigureTaskExecutionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this configure task execution not found response a status code equal to that given
func (o *ConfigureTaskExecutionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfigureTaskExecutionNotFound) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *ConfigureTaskExecutionNotFound) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *ConfigureTaskExecutionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigureTaskExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureTaskExecutionInternalServerError creates a ConfigureTaskExecutionInternalServerError with default headers values
func NewConfigureTaskExecutionInternalServerError() *ConfigureTaskExecutionInternalServerError {
	return &ConfigureTaskExecutionInternalServerError{}
}

/*
ConfigureTaskExecutionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ConfigureTaskExecutionInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this configure task execution internal server error response has a 2xx status code
func (o *ConfigureTaskExecutionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this configure task execution internal server error response has a 3xx status code
func (o *ConfigureTaskExecutionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure task execution internal server error response has a 4xx status code
func (o *ConfigureTaskExecutionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this configure task execution internal server error response has a 5xx status code
func (o *ConfigureTaskExecutionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this configure task execution internal server error response a status code equal to that given
func (o *ConfigureTaskExecutionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfigureTaskExecutionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigureTaskExecutionInternalServerError) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/run-config][%d] configureTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigureTaskExecutionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigureTaskExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
