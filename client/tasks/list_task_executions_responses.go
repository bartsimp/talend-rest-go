// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// ListTaskExecutionsReader is a Reader for the ListTaskExecutions structure.
type ListTaskExecutionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTaskExecutionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTaskExecutionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListTaskExecutionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListTaskExecutionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListTaskExecutionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListTaskExecutionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListTaskExecutionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListTaskExecutionsOK creates a ListTaskExecutionsOK with default headers values
func NewListTaskExecutionsOK() *ListTaskExecutionsOK {
	return &ListTaskExecutionsOK{}
}

/*
ListTaskExecutionsOK describes a response with status code 200, with default header values.

OK
*/
type ListTaskExecutionsOK struct {
	Payload *models.Page
}

// IsSuccess returns true when this list task executions o k response has a 2xx status code
func (o *ListTaskExecutionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list task executions o k response has a 3xx status code
func (o *ListTaskExecutionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list task executions o k response has a 4xx status code
func (o *ListTaskExecutionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list task executions o k response has a 5xx status code
func (o *ListTaskExecutionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list task executions o k response a status code equal to that given
func (o *ListTaskExecutionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListTaskExecutionsOK) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ListTaskExecutionsOK) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ListTaskExecutionsOK) GetPayload() *models.Page {
	return o.Payload
}

func (o *ListTaskExecutionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Page)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTaskExecutionsBadRequest creates a ListTaskExecutionsBadRequest with default headers values
func NewListTaskExecutionsBadRequest() *ListTaskExecutionsBadRequest {
	return &ListTaskExecutionsBadRequest{}
}

/*
ListTaskExecutionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListTaskExecutionsBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list task executions bad request response has a 2xx status code
func (o *ListTaskExecutionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list task executions bad request response has a 3xx status code
func (o *ListTaskExecutionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list task executions bad request response has a 4xx status code
func (o *ListTaskExecutionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list task executions bad request response has a 5xx status code
func (o *ListTaskExecutionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list task executions bad request response a status code equal to that given
func (o *ListTaskExecutionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListTaskExecutionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListTaskExecutionsBadRequest) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListTaskExecutionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListTaskExecutionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTaskExecutionsUnauthorized creates a ListTaskExecutionsUnauthorized with default headers values
func NewListTaskExecutionsUnauthorized() *ListTaskExecutionsUnauthorized {
	return &ListTaskExecutionsUnauthorized{}
}

/*
ListTaskExecutionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListTaskExecutionsUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list task executions unauthorized response has a 2xx status code
func (o *ListTaskExecutionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list task executions unauthorized response has a 3xx status code
func (o *ListTaskExecutionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list task executions unauthorized response has a 4xx status code
func (o *ListTaskExecutionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list task executions unauthorized response has a 5xx status code
func (o *ListTaskExecutionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list task executions unauthorized response a status code equal to that given
func (o *ListTaskExecutionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListTaskExecutionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTaskExecutionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTaskExecutionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListTaskExecutionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTaskExecutionsForbidden creates a ListTaskExecutionsForbidden with default headers values
func NewListTaskExecutionsForbidden() *ListTaskExecutionsForbidden {
	return &ListTaskExecutionsForbidden{}
}

/*
ListTaskExecutionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListTaskExecutionsForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list task executions forbidden response has a 2xx status code
func (o *ListTaskExecutionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list task executions forbidden response has a 3xx status code
func (o *ListTaskExecutionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list task executions forbidden response has a 4xx status code
func (o *ListTaskExecutionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list task executions forbidden response has a 5xx status code
func (o *ListTaskExecutionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list task executions forbidden response a status code equal to that given
func (o *ListTaskExecutionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListTaskExecutionsForbidden) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ListTaskExecutionsForbidden) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ListTaskExecutionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListTaskExecutionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTaskExecutionsNotFound creates a ListTaskExecutionsNotFound with default headers values
func NewListTaskExecutionsNotFound() *ListTaskExecutionsNotFound {
	return &ListTaskExecutionsNotFound{}
}

/*
ListTaskExecutionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListTaskExecutionsNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list task executions not found response has a 2xx status code
func (o *ListTaskExecutionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list task executions not found response has a 3xx status code
func (o *ListTaskExecutionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list task executions not found response has a 4xx status code
func (o *ListTaskExecutionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list task executions not found response has a 5xx status code
func (o *ListTaskExecutionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list task executions not found response a status code equal to that given
func (o *ListTaskExecutionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListTaskExecutionsNotFound) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsNotFound  %+v", 404, o.Payload)
}

func (o *ListTaskExecutionsNotFound) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsNotFound  %+v", 404, o.Payload)
}

func (o *ListTaskExecutionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListTaskExecutionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTaskExecutionsInternalServerError creates a ListTaskExecutionsInternalServerError with default headers values
func NewListTaskExecutionsInternalServerError() *ListTaskExecutionsInternalServerError {
	return &ListTaskExecutionsInternalServerError{}
}

/*
ListTaskExecutionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListTaskExecutionsInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list task executions internal server error response has a 2xx status code
func (o *ListTaskExecutionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list task executions internal server error response has a 3xx status code
func (o *ListTaskExecutionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list task executions internal server error response has a 4xx status code
func (o *ListTaskExecutionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list task executions internal server error response has a 5xx status code
func (o *ListTaskExecutionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list task executions internal server error response a status code equal to that given
func (o *ListTaskExecutionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListTaskExecutionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTaskExecutionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/executions][%d] listTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTaskExecutionsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListTaskExecutionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
