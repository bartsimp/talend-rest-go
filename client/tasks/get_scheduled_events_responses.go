// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// GetScheduledEventsReader is a Reader for the GetScheduledEvents structure.
type GetScheduledEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScheduledEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScheduledEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScheduledEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetScheduledEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScheduledEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScheduledEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScheduledEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScheduledEventsOK creates a GetScheduledEventsOK with default headers values
func NewGetScheduledEventsOK() *GetScheduledEventsOK {
	return &GetScheduledEventsOK{}
}

/*
GetScheduledEventsOK describes a response with status code 200, with default header values.

OK
*/
type GetScheduledEventsOK struct {
	Payload *models.PageScheduledEventsResponse
}

// IsSuccess returns true when this get scheduled events o k response has a 2xx status code
func (o *GetScheduledEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get scheduled events o k response has a 3xx status code
func (o *GetScheduledEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheduled events o k response has a 4xx status code
func (o *GetScheduledEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scheduled events o k response has a 5xx status code
func (o *GetScheduledEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheduled events o k response a status code equal to that given
func (o *GetScheduledEventsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetScheduledEventsOK) Error() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsOK  %+v", 200, o.Payload)
}

func (o *GetScheduledEventsOK) String() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsOK  %+v", 200, o.Payload)
}

func (o *GetScheduledEventsOK) GetPayload() *models.PageScheduledEventsResponse {
	return o.Payload
}

func (o *GetScheduledEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageScheduledEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduledEventsBadRequest creates a GetScheduledEventsBadRequest with default headers values
func NewGetScheduledEventsBadRequest() *GetScheduledEventsBadRequest {
	return &GetScheduledEventsBadRequest{}
}

/*
GetScheduledEventsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetScheduledEventsBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this get scheduled events bad request response has a 2xx status code
func (o *GetScheduledEventsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheduled events bad request response has a 3xx status code
func (o *GetScheduledEventsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheduled events bad request response has a 4xx status code
func (o *GetScheduledEventsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheduled events bad request response has a 5xx status code
func (o *GetScheduledEventsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheduled events bad request response a status code equal to that given
func (o *GetScheduledEventsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetScheduledEventsBadRequest) Error() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsBadRequest  %+v", 400, o.Payload)
}

func (o *GetScheduledEventsBadRequest) String() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsBadRequest  %+v", 400, o.Payload)
}

func (o *GetScheduledEventsBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *GetScheduledEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduledEventsUnauthorized creates a GetScheduledEventsUnauthorized with default headers values
func NewGetScheduledEventsUnauthorized() *GetScheduledEventsUnauthorized {
	return &GetScheduledEventsUnauthorized{}
}

/*
GetScheduledEventsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetScheduledEventsUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this get scheduled events unauthorized response has a 2xx status code
func (o *GetScheduledEventsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheduled events unauthorized response has a 3xx status code
func (o *GetScheduledEventsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheduled events unauthorized response has a 4xx status code
func (o *GetScheduledEventsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheduled events unauthorized response has a 5xx status code
func (o *GetScheduledEventsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheduled events unauthorized response a status code equal to that given
func (o *GetScheduledEventsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetScheduledEventsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScheduledEventsUnauthorized) String() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScheduledEventsUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *GetScheduledEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduledEventsForbidden creates a GetScheduledEventsForbidden with default headers values
func NewGetScheduledEventsForbidden() *GetScheduledEventsForbidden {
	return &GetScheduledEventsForbidden{}
}

/*
GetScheduledEventsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetScheduledEventsForbidden struct {
	Payload *models.Response
}

// IsSuccess returns true when this get scheduled events forbidden response has a 2xx status code
func (o *GetScheduledEventsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheduled events forbidden response has a 3xx status code
func (o *GetScheduledEventsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheduled events forbidden response has a 4xx status code
func (o *GetScheduledEventsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheduled events forbidden response has a 5xx status code
func (o *GetScheduledEventsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheduled events forbidden response a status code equal to that given
func (o *GetScheduledEventsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetScheduledEventsForbidden) Error() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsForbidden  %+v", 403, o.Payload)
}

func (o *GetScheduledEventsForbidden) String() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsForbidden  %+v", 403, o.Payload)
}

func (o *GetScheduledEventsForbidden) GetPayload() *models.Response {
	return o.Payload
}

func (o *GetScheduledEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduledEventsNotFound creates a GetScheduledEventsNotFound with default headers values
func NewGetScheduledEventsNotFound() *GetScheduledEventsNotFound {
	return &GetScheduledEventsNotFound{}
}

/*
GetScheduledEventsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetScheduledEventsNotFound struct {
	Payload *models.Response
}

// IsSuccess returns true when this get scheduled events not found response has a 2xx status code
func (o *GetScheduledEventsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheduled events not found response has a 3xx status code
func (o *GetScheduledEventsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheduled events not found response has a 4xx status code
func (o *GetScheduledEventsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheduled events not found response has a 5xx status code
func (o *GetScheduledEventsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheduled events not found response a status code equal to that given
func (o *GetScheduledEventsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetScheduledEventsNotFound) Error() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsNotFound  %+v", 404, o.Payload)
}

func (o *GetScheduledEventsNotFound) String() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsNotFound  %+v", 404, o.Payload)
}

func (o *GetScheduledEventsNotFound) GetPayload() *models.Response {
	return o.Payload
}

func (o *GetScheduledEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduledEventsInternalServerError creates a GetScheduledEventsInternalServerError with default headers values
func NewGetScheduledEventsInternalServerError() *GetScheduledEventsInternalServerError {
	return &GetScheduledEventsInternalServerError{}
}

/*
GetScheduledEventsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetScheduledEventsInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this get scheduled events internal server error response has a 2xx status code
func (o *GetScheduledEventsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheduled events internal server error response has a 3xx status code
func (o *GetScheduledEventsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheduled events internal server error response has a 4xx status code
func (o *GetScheduledEventsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scheduled events internal server error response has a 5xx status code
func (o *GetScheduledEventsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get scheduled events internal server error response a status code equal to that given
func (o *GetScheduledEventsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetScheduledEventsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScheduledEventsInternalServerError) String() string {
	return fmt.Sprintf("[POST /executables/events/search][%d] getScheduledEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScheduledEventsInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *GetScheduledEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
