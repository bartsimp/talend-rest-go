// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// UpdateTaskReader is a Reader for the UpdateTask structure.
type UpdateTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateTaskOK creates a UpdateTaskOK with default headers values
func NewUpdateTaskOK() *UpdateTaskOK {
	return &UpdateTaskOK{}
}

/*
UpdateTaskOK describes a response with status code 200, with default header values.

OK
*/
type UpdateTaskOK struct {
	Payload *models.TaskV21
}

// IsSuccess returns true when this update task o k response has a 2xx status code
func (o *UpdateTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update task o k response has a 3xx status code
func (o *UpdateTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task o k response has a 4xx status code
func (o *UpdateTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update task o k response has a 5xx status code
func (o *UpdateTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update task o k response a status code equal to that given
func (o *UpdateTaskOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateTaskOK) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskOK  %+v", 200, o.Payload)
}

func (o *UpdateTaskOK) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskOK  %+v", 200, o.Payload)
}

func (o *UpdateTaskOK) GetPayload() *models.TaskV21 {
	return o.Payload
}

func (o *UpdateTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskV21)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskBadRequest creates a UpdateTaskBadRequest with default headers values
func NewUpdateTaskBadRequest() *UpdateTaskBadRequest {
	return &UpdateTaskBadRequest{}
}

/*
UpdateTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateTaskBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update task bad request response has a 2xx status code
func (o *UpdateTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task bad request response has a 3xx status code
func (o *UpdateTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task bad request response has a 4xx status code
func (o *UpdateTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task bad request response has a 5xx status code
func (o *UpdateTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update task bad request response a status code equal to that given
func (o *UpdateTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateTaskBadRequest) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTaskBadRequest) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTaskBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskUnauthorized creates a UpdateTaskUnauthorized with default headers values
func NewUpdateTaskUnauthorized() *UpdateTaskUnauthorized {
	return &UpdateTaskUnauthorized{}
}

/*
UpdateTaskUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateTaskUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update task unauthorized response has a 2xx status code
func (o *UpdateTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task unauthorized response has a 3xx status code
func (o *UpdateTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task unauthorized response has a 4xx status code
func (o *UpdateTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task unauthorized response has a 5xx status code
func (o *UpdateTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update task unauthorized response a status code equal to that given
func (o *UpdateTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateTaskUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateTaskUnauthorized) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateTaskUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskForbidden creates a UpdateTaskForbidden with default headers values
func NewUpdateTaskForbidden() *UpdateTaskForbidden {
	return &UpdateTaskForbidden{}
}

/*
UpdateTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateTaskForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update task forbidden response has a 2xx status code
func (o *UpdateTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task forbidden response has a 3xx status code
func (o *UpdateTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task forbidden response has a 4xx status code
func (o *UpdateTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task forbidden response has a 5xx status code
func (o *UpdateTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update task forbidden response a status code equal to that given
func (o *UpdateTaskForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateTaskForbidden) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTaskForbidden) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTaskForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskNotFound creates a UpdateTaskNotFound with default headers values
func NewUpdateTaskNotFound() *UpdateTaskNotFound {
	return &UpdateTaskNotFound{}
}

/*
UpdateTaskNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateTaskNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update task not found response has a 2xx status code
func (o *UpdateTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task not found response has a 3xx status code
func (o *UpdateTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task not found response has a 4xx status code
func (o *UpdateTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task not found response has a 5xx status code
func (o *UpdateTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update task not found response a status code equal to that given
func (o *UpdateTaskNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateTaskNotFound) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTaskNotFound) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTaskNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskInternalServerError creates a UpdateTaskInternalServerError with default headers values
func NewUpdateTaskInternalServerError() *UpdateTaskInternalServerError {
	return &UpdateTaskInternalServerError{}
}

/*
UpdateTaskInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateTaskInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update task internal server error response has a 2xx status code
func (o *UpdateTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task internal server error response has a 3xx status code
func (o *UpdateTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task internal server error response has a 4xx status code
func (o *UpdateTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update task internal server error response has a 5xx status code
func (o *UpdateTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update task internal server error response a status code equal to that given
func (o *UpdateTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateTaskInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateTaskInternalServerError) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}][%d] updateTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateTaskInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
