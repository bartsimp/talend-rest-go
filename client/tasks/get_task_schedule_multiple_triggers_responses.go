// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// GetTaskScheduleMultipleTriggersReader is a Reader for the GetTaskScheduleMultipleTriggers structure.
type GetTaskScheduleMultipleTriggersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskScheduleMultipleTriggersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTaskScheduleMultipleTriggersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTaskScheduleMultipleTriggersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTaskScheduleMultipleTriggersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTaskScheduleMultipleTriggersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTaskScheduleMultipleTriggersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTaskScheduleMultipleTriggersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTaskScheduleMultipleTriggersOK creates a GetTaskScheduleMultipleTriggersOK with default headers values
func NewGetTaskScheduleMultipleTriggersOK() *GetTaskScheduleMultipleTriggersOK {
	return &GetTaskScheduleMultipleTriggersOK{}
}

/*
GetTaskScheduleMultipleTriggersOK describes a response with status code 200, with default header values.

OK
*/
type GetTaskScheduleMultipleTriggersOK struct {
	Payload *models.Schedule
}

// IsSuccess returns true when this get task schedule multiple triggers o k response has a 2xx status code
func (o *GetTaskScheduleMultipleTriggersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get task schedule multiple triggers o k response has a 3xx status code
func (o *GetTaskScheduleMultipleTriggersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task schedule multiple triggers o k response has a 4xx status code
func (o *GetTaskScheduleMultipleTriggersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task schedule multiple triggers o k response has a 5xx status code
func (o *GetTaskScheduleMultipleTriggersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get task schedule multiple triggers o k response a status code equal to that given
func (o *GetTaskScheduleMultipleTriggersOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTaskScheduleMultipleTriggersOK) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersOK  %+v", 200, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersOK) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersOK  %+v", 200, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersOK) GetPayload() *models.Schedule {
	return o.Payload
}

func (o *GetTaskScheduleMultipleTriggersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Schedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskScheduleMultipleTriggersBadRequest creates a GetTaskScheduleMultipleTriggersBadRequest with default headers values
func NewGetTaskScheduleMultipleTriggersBadRequest() *GetTaskScheduleMultipleTriggersBadRequest {
	return &GetTaskScheduleMultipleTriggersBadRequest{}
}

/*
GetTaskScheduleMultipleTriggersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTaskScheduleMultipleTriggersBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task schedule multiple triggers bad request response has a 2xx status code
func (o *GetTaskScheduleMultipleTriggersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task schedule multiple triggers bad request response has a 3xx status code
func (o *GetTaskScheduleMultipleTriggersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task schedule multiple triggers bad request response has a 4xx status code
func (o *GetTaskScheduleMultipleTriggersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task schedule multiple triggers bad request response has a 5xx status code
func (o *GetTaskScheduleMultipleTriggersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get task schedule multiple triggers bad request response a status code equal to that given
func (o *GetTaskScheduleMultipleTriggersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetTaskScheduleMultipleTriggersBadRequest) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersBadRequest  %+v", 400, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersBadRequest) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersBadRequest  %+v", 400, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskScheduleMultipleTriggersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskScheduleMultipleTriggersUnauthorized creates a GetTaskScheduleMultipleTriggersUnauthorized with default headers values
func NewGetTaskScheduleMultipleTriggersUnauthorized() *GetTaskScheduleMultipleTriggersUnauthorized {
	return &GetTaskScheduleMultipleTriggersUnauthorized{}
}

/*
GetTaskScheduleMultipleTriggersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTaskScheduleMultipleTriggersUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task schedule multiple triggers unauthorized response has a 2xx status code
func (o *GetTaskScheduleMultipleTriggersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task schedule multiple triggers unauthorized response has a 3xx status code
func (o *GetTaskScheduleMultipleTriggersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task schedule multiple triggers unauthorized response has a 4xx status code
func (o *GetTaskScheduleMultipleTriggersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task schedule multiple triggers unauthorized response has a 5xx status code
func (o *GetTaskScheduleMultipleTriggersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get task schedule multiple triggers unauthorized response a status code equal to that given
func (o *GetTaskScheduleMultipleTriggersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetTaskScheduleMultipleTriggersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersUnauthorized) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskScheduleMultipleTriggersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskScheduleMultipleTriggersForbidden creates a GetTaskScheduleMultipleTriggersForbidden with default headers values
func NewGetTaskScheduleMultipleTriggersForbidden() *GetTaskScheduleMultipleTriggersForbidden {
	return &GetTaskScheduleMultipleTriggersForbidden{}
}

/*
GetTaskScheduleMultipleTriggersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTaskScheduleMultipleTriggersForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task schedule multiple triggers forbidden response has a 2xx status code
func (o *GetTaskScheduleMultipleTriggersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task schedule multiple triggers forbidden response has a 3xx status code
func (o *GetTaskScheduleMultipleTriggersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task schedule multiple triggers forbidden response has a 4xx status code
func (o *GetTaskScheduleMultipleTriggersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task schedule multiple triggers forbidden response has a 5xx status code
func (o *GetTaskScheduleMultipleTriggersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get task schedule multiple triggers forbidden response a status code equal to that given
func (o *GetTaskScheduleMultipleTriggersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetTaskScheduleMultipleTriggersForbidden) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersForbidden  %+v", 403, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersForbidden) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersForbidden  %+v", 403, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskScheduleMultipleTriggersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskScheduleMultipleTriggersNotFound creates a GetTaskScheduleMultipleTriggersNotFound with default headers values
func NewGetTaskScheduleMultipleTriggersNotFound() *GetTaskScheduleMultipleTriggersNotFound {
	return &GetTaskScheduleMultipleTriggersNotFound{}
}

/*
GetTaskScheduleMultipleTriggersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTaskScheduleMultipleTriggersNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task schedule multiple triggers not found response has a 2xx status code
func (o *GetTaskScheduleMultipleTriggersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task schedule multiple triggers not found response has a 3xx status code
func (o *GetTaskScheduleMultipleTriggersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task schedule multiple triggers not found response has a 4xx status code
func (o *GetTaskScheduleMultipleTriggersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task schedule multiple triggers not found response has a 5xx status code
func (o *GetTaskScheduleMultipleTriggersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get task schedule multiple triggers not found response a status code equal to that given
func (o *GetTaskScheduleMultipleTriggersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetTaskScheduleMultipleTriggersNotFound) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersNotFound  %+v", 404, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersNotFound) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersNotFound  %+v", 404, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskScheduleMultipleTriggersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskScheduleMultipleTriggersInternalServerError creates a GetTaskScheduleMultipleTriggersInternalServerError with default headers values
func NewGetTaskScheduleMultipleTriggersInternalServerError() *GetTaskScheduleMultipleTriggersInternalServerError {
	return &GetTaskScheduleMultipleTriggersInternalServerError{}
}

/*
GetTaskScheduleMultipleTriggersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTaskScheduleMultipleTriggersInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get task schedule multiple triggers internal server error response has a 2xx status code
func (o *GetTaskScheduleMultipleTriggersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task schedule multiple triggers internal server error response has a 3xx status code
func (o *GetTaskScheduleMultipleTriggersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task schedule multiple triggers internal server error response has a 4xx status code
func (o *GetTaskScheduleMultipleTriggersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task schedule multiple triggers internal server error response has a 5xx status code
func (o *GetTaskScheduleMultipleTriggersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get task schedule multiple triggers internal server error response a status code equal to that given
func (o *GetTaskScheduleMultipleTriggersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTaskScheduleMultipleTriggersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersInternalServerError) String() string {
	return fmt.Sprintf("[GET /executables/tasks/{taskId}/schedule][%d] getTaskScheduleMultipleTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTaskScheduleMultipleTriggersInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTaskScheduleMultipleTriggersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
