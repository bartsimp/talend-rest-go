// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// LinkTaskScheduleReader is a Reader for the LinkTaskSchedule structure.
type LinkTaskScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkTaskScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkTaskScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkTaskScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLinkTaskScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLinkTaskScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkTaskScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkTaskScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLinkTaskScheduleOK creates a LinkTaskScheduleOK with default headers values
func NewLinkTaskScheduleOK() *LinkTaskScheduleOK {
	return &LinkTaskScheduleOK{}
}

/*
LinkTaskScheduleOK describes a response with status code 200, with default header values.

OK
*/
type LinkTaskScheduleOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this link task schedule o k response has a 2xx status code
func (o *LinkTaskScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link task schedule o k response has a 3xx status code
func (o *LinkTaskScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link task schedule o k response has a 4xx status code
func (o *LinkTaskScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link task schedule o k response has a 5xx status code
func (o *LinkTaskScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link task schedule o k response a status code equal to that given
func (o *LinkTaskScheduleOK) IsCode(code int) bool {
	return code == 200
}

func (o *LinkTaskScheduleOK) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleOK  %+v", 200, o.Payload)
}

func (o *LinkTaskScheduleOK) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleOK  %+v", 200, o.Payload)
}

func (o *LinkTaskScheduleOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *LinkTaskScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkTaskScheduleBadRequest creates a LinkTaskScheduleBadRequest with default headers values
func NewLinkTaskScheduleBadRequest() *LinkTaskScheduleBadRequest {
	return &LinkTaskScheduleBadRequest{}
}

/*
LinkTaskScheduleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkTaskScheduleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link task schedule bad request response has a 2xx status code
func (o *LinkTaskScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link task schedule bad request response has a 3xx status code
func (o *LinkTaskScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link task schedule bad request response has a 4xx status code
func (o *LinkTaskScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link task schedule bad request response has a 5xx status code
func (o *LinkTaskScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link task schedule bad request response a status code equal to that given
func (o *LinkTaskScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *LinkTaskScheduleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *LinkTaskScheduleBadRequest) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *LinkTaskScheduleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkTaskScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkTaskScheduleUnauthorized creates a LinkTaskScheduleUnauthorized with default headers values
func NewLinkTaskScheduleUnauthorized() *LinkTaskScheduleUnauthorized {
	return &LinkTaskScheduleUnauthorized{}
}

/*
LinkTaskScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LinkTaskScheduleUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link task schedule unauthorized response has a 2xx status code
func (o *LinkTaskScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link task schedule unauthorized response has a 3xx status code
func (o *LinkTaskScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link task schedule unauthorized response has a 4xx status code
func (o *LinkTaskScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this link task schedule unauthorized response has a 5xx status code
func (o *LinkTaskScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this link task schedule unauthorized response a status code equal to that given
func (o *LinkTaskScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *LinkTaskScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *LinkTaskScheduleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *LinkTaskScheduleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkTaskScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkTaskScheduleForbidden creates a LinkTaskScheduleForbidden with default headers values
func NewLinkTaskScheduleForbidden() *LinkTaskScheduleForbidden {
	return &LinkTaskScheduleForbidden{}
}

/*
LinkTaskScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LinkTaskScheduleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link task schedule forbidden response has a 2xx status code
func (o *LinkTaskScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link task schedule forbidden response has a 3xx status code
func (o *LinkTaskScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link task schedule forbidden response has a 4xx status code
func (o *LinkTaskScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this link task schedule forbidden response has a 5xx status code
func (o *LinkTaskScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this link task schedule forbidden response a status code equal to that given
func (o *LinkTaskScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *LinkTaskScheduleForbidden) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleForbidden  %+v", 403, o.Payload)
}

func (o *LinkTaskScheduleForbidden) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleForbidden  %+v", 403, o.Payload)
}

func (o *LinkTaskScheduleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkTaskScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkTaskScheduleNotFound creates a LinkTaskScheduleNotFound with default headers values
func NewLinkTaskScheduleNotFound() *LinkTaskScheduleNotFound {
	return &LinkTaskScheduleNotFound{}
}

/*
LinkTaskScheduleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkTaskScheduleNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link task schedule not found response has a 2xx status code
func (o *LinkTaskScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link task schedule not found response has a 3xx status code
func (o *LinkTaskScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link task schedule not found response has a 4xx status code
func (o *LinkTaskScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link task schedule not found response has a 5xx status code
func (o *LinkTaskScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link task schedule not found response a status code equal to that given
func (o *LinkTaskScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *LinkTaskScheduleNotFound) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleNotFound  %+v", 404, o.Payload)
}

func (o *LinkTaskScheduleNotFound) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleNotFound  %+v", 404, o.Payload)
}

func (o *LinkTaskScheduleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkTaskScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkTaskScheduleInternalServerError creates a LinkTaskScheduleInternalServerError with default headers values
func NewLinkTaskScheduleInternalServerError() *LinkTaskScheduleInternalServerError {
	return &LinkTaskScheduleInternalServerError{}
}

/*
LinkTaskScheduleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkTaskScheduleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this link task schedule internal server error response has a 2xx status code
func (o *LinkTaskScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link task schedule internal server error response has a 3xx status code
func (o *LinkTaskScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link task schedule internal server error response has a 4xx status code
func (o *LinkTaskScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link task schedule internal server error response has a 5xx status code
func (o *LinkTaskScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link task schedule internal server error response a status code equal to that given
func (o *LinkTaskScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *LinkTaskScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *LinkTaskScheduleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /executables/tasks/{taskId}/schedule][%d] linkTaskScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *LinkTaskScheduleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LinkTaskScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
