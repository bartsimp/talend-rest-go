// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAvailableTaskExecutionsParams creates a new ListAvailableTaskExecutionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListAvailableTaskExecutionsParams() *ListAvailableTaskExecutionsParams {
	return &ListAvailableTaskExecutionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListAvailableTaskExecutionsParamsWithTimeout creates a new ListAvailableTaskExecutionsParams object
// with the ability to set a timeout on a request.
func NewListAvailableTaskExecutionsParamsWithTimeout(timeout time.Duration) *ListAvailableTaskExecutionsParams {
	return &ListAvailableTaskExecutionsParams{
		timeout: timeout,
	}
}

// NewListAvailableTaskExecutionsParamsWithContext creates a new ListAvailableTaskExecutionsParams object
// with the ability to set a context for a request.
func NewListAvailableTaskExecutionsParamsWithContext(ctx context.Context) *ListAvailableTaskExecutionsParams {
	return &ListAvailableTaskExecutionsParams{
		Context: ctx,
	}
}

// NewListAvailableTaskExecutionsParamsWithHTTPClient creates a new ListAvailableTaskExecutionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListAvailableTaskExecutionsParamsWithHTTPClient(client *http.Client) *ListAvailableTaskExecutionsParams {
	return &ListAvailableTaskExecutionsParams{
		HTTPClient: client,
	}
}

/*
ListAvailableTaskExecutionsParams contains all the parameters to send to the API endpoint

	for the list available task executions operation.

	Typically these are written to a http.Request.
*/
type ListAvailableTaskExecutionsParams struct {

	/* EnvironmentID.

	   environment id
	*/
	EnvironmentID *string

	/* From.

	   from date time (milliseconds)

	   Format: int64
	*/
	From *int64

	/* LastDays.

	   lastDays

	   Format: int32
	*/
	LastDays *int32

	/* Limit.

	   the number of items to return. Must be in range [1, 100]. Default value - 100

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   the position of the first item. Must be greater than or equal to 0. Default value - 0

	   Format: int32
	*/
	Offset *int32

	/* Status.

	   execution status
	*/
	Status *string

	/* To.

	   to date time (milliseconds)

	   Format: int64
	*/
	To *int64

	/* WorkspaceID.

	   workspace id
	*/
	WorkspaceID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list available task executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAvailableTaskExecutionsParams) WithDefaults() *ListAvailableTaskExecutionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list available task executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAvailableTaskExecutionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithTimeout(timeout time.Duration) *ListAvailableTaskExecutionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithContext(ctx context.Context) *ListAvailableTaskExecutionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithHTTPClient(client *http.Client) *ListAvailableTaskExecutionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentID adds the environmentID to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithEnvironmentID(environmentID *string) *ListAvailableTaskExecutionsParams {
	o.SetEnvironmentID(environmentID)
	return o
}

// SetEnvironmentID adds the environmentId to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetEnvironmentID(environmentID *string) {
	o.EnvironmentID = environmentID
}

// WithFrom adds the from to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithFrom(from *int64) *ListAvailableTaskExecutionsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetFrom(from *int64) {
	o.From = from
}

// WithLastDays adds the lastDays to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithLastDays(lastDays *int32) *ListAvailableTaskExecutionsParams {
	o.SetLastDays(lastDays)
	return o
}

// SetLastDays adds the lastDays to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetLastDays(lastDays *int32) {
	o.LastDays = lastDays
}

// WithLimit adds the limit to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithLimit(limit *int32) *ListAvailableTaskExecutionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithOffset(offset *int32) *ListAvailableTaskExecutionsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithStatus adds the status to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithStatus(status *string) *ListAvailableTaskExecutionsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTo adds the to to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithTo(to *int64) *ListAvailableTaskExecutionsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetTo(to *int64) {
	o.To = to
}

// WithWorkspaceID adds the workspaceID to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) WithWorkspaceID(workspaceID *string) *ListAvailableTaskExecutionsParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the list available task executions params
func (o *ListAvailableTaskExecutionsParams) SetWorkspaceID(workspaceID *string) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *ListAvailableTaskExecutionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnvironmentID != nil {

		// query param environmentId
		var qrEnvironmentID string

		if o.EnvironmentID != nil {
			qrEnvironmentID = *o.EnvironmentID
		}
		qEnvironmentID := qrEnvironmentID
		if qEnvironmentID != "" {

			if err := r.SetQueryParam("environmentId", qEnvironmentID); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom int64

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.LastDays != nil {

		// query param lastDays
		var qrLastDays int32

		if o.LastDays != nil {
			qrLastDays = *o.LastDays
		}
		qLastDays := swag.FormatInt32(qrLastDays)
		if qLastDays != "" {

			if err := r.SetQueryParam("lastDays", qLastDays); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo int64

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatInt64(qrTo)
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if o.WorkspaceID != nil {

		// query param workspaceId
		var qrWorkspaceID string

		if o.WorkspaceID != nil {
			qrWorkspaceID = *o.WorkspaceID
		}
		qWorkspaceID := qrWorkspaceID
		if qWorkspaceID != "" {

			if err := r.SetQueryParam("workspaceId", qWorkspaceID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
