// Code generated by go-swagger; DO NOT EDIT.

package runtime_engines_run_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runtime engines run profiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime engines run profiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEngineRunProfile(params *CreateEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEngineRunProfileCreated, error)

	DeleteEngineRunProfile(params *DeleteEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEngineRunProfileNoContent, error)

	GetEngineRunProfile(params *GetEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineRunProfileOK, error)

	GetEngineRunProfiles(params *GetEngineRunProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineRunProfilesOK, error)

	UpdateEngineRunProfile(params *UpdateEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEngineRunProfileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateEngineRunProfile creates engine run profile

Create engine run profile
*/
func (a *Client) CreateEngineRunProfile(params *CreateEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEngineRunProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEngineRunProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEngineRunProfile",
		Method:             "POST",
		PathPattern:        "/runtimes/remote-engines/{engineId}/run-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEngineRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEngineRunProfileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEngineRunProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEngineRunProfile deletes engine run profile

Delete engine run profile
*/
func (a *Client) DeleteEngineRunProfile(params *DeleteEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEngineRunProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEngineRunProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEngineRunProfile",
		Method:             "DELETE",
		PathPattern:        "/runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEngineRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEngineRunProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEngineRunProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEngineRunProfile gets engine run profile by id

Get engine run profile by id
*/
func (a *Client) GetEngineRunProfile(params *GetEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineRunProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEngineRunProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEngineRunProfile",
		Method:             "GET",
		PathPattern:        "/runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEngineRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEngineRunProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEngineRunProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEngineRunProfiles gets all engine run profiles

Get all engine run profiles
*/
func (a *Client) GetEngineRunProfiles(params *GetEngineRunProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineRunProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEngineRunProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEngineRunProfiles",
		Method:             "GET",
		PathPattern:        "/runtimes/remote-engines/{engineId}/run-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEngineRunProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEngineRunProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEngineRunProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEngineRunProfile updates engine run profile

Update engine run profile
*/
func (a *Client) UpdateEngineRunProfile(params *UpdateEngineRunProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEngineRunProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEngineRunProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEngineRunProfile",
		Method:             "PUT",
		PathPattern:        "/runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEngineRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEngineRunProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEngineRunProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
