// Code generated by go-swagger; DO NOT EDIT.

package runtime_engines_run_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// UpdateEngineRunProfileReader is a Reader for the UpdateEngineRunProfile structure.
type UpdateEngineRunProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEngineRunProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEngineRunProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateEngineRunProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEngineRunProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEngineRunProfileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEngineRunProfileOK creates a UpdateEngineRunProfileOK with default headers values
func NewUpdateEngineRunProfileOK() *UpdateEngineRunProfileOK {
	return &UpdateEngineRunProfileOK{}
}

/*
UpdateEngineRunProfileOK describes a response with status code 200, with default header values.

OK
*/
type UpdateEngineRunProfileOK struct {
	Payload *models.RuntimeRunProfile
}

// IsSuccess returns true when this update engine run profile o k response has a 2xx status code
func (o *UpdateEngineRunProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update engine run profile o k response has a 3xx status code
func (o *UpdateEngineRunProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update engine run profile o k response has a 4xx status code
func (o *UpdateEngineRunProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update engine run profile o k response has a 5xx status code
func (o *UpdateEngineRunProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update engine run profile o k response a status code equal to that given
func (o *UpdateEngineRunProfileOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateEngineRunProfileOK) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateEngineRunProfileOK) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateEngineRunProfileOK) GetPayload() *models.RuntimeRunProfile {
	return o.Payload
}

func (o *UpdateEngineRunProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeRunProfile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEngineRunProfileForbidden creates a UpdateEngineRunProfileForbidden with default headers values
func NewUpdateEngineRunProfileForbidden() *UpdateEngineRunProfileForbidden {
	return &UpdateEngineRunProfileForbidden{}
}

/*
UpdateEngineRunProfileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateEngineRunProfileForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update engine run profile forbidden response has a 2xx status code
func (o *UpdateEngineRunProfileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update engine run profile forbidden response has a 3xx status code
func (o *UpdateEngineRunProfileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update engine run profile forbidden response has a 4xx status code
func (o *UpdateEngineRunProfileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update engine run profile forbidden response has a 5xx status code
func (o *UpdateEngineRunProfileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update engine run profile forbidden response a status code equal to that given
func (o *UpdateEngineRunProfileForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateEngineRunProfileForbidden) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEngineRunProfileForbidden) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEngineRunProfileForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEngineRunProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEngineRunProfileNotFound creates a UpdateEngineRunProfileNotFound with default headers values
func NewUpdateEngineRunProfileNotFound() *UpdateEngineRunProfileNotFound {
	return &UpdateEngineRunProfileNotFound{}
}

/*
UpdateEngineRunProfileNotFound describes a response with status code 404, with default header values.

Run profile not found
*/
type UpdateEngineRunProfileNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update engine run profile not found response has a 2xx status code
func (o *UpdateEngineRunProfileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update engine run profile not found response has a 3xx status code
func (o *UpdateEngineRunProfileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update engine run profile not found response has a 4xx status code
func (o *UpdateEngineRunProfileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update engine run profile not found response has a 5xx status code
func (o *UpdateEngineRunProfileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update engine run profile not found response a status code equal to that given
func (o *UpdateEngineRunProfileNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateEngineRunProfileNotFound) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEngineRunProfileNotFound) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEngineRunProfileNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEngineRunProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEngineRunProfileInternalServerError creates a UpdateEngineRunProfileInternalServerError with default headers values
func NewUpdateEngineRunProfileInternalServerError() *UpdateEngineRunProfileInternalServerError {
	return &UpdateEngineRunProfileInternalServerError{}
}

/*
UpdateEngineRunProfileInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateEngineRunProfileInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update engine run profile internal server error response has a 2xx status code
func (o *UpdateEngineRunProfileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update engine run profile internal server error response has a 3xx status code
func (o *UpdateEngineRunProfileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update engine run profile internal server error response has a 4xx status code
func (o *UpdateEngineRunProfileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update engine run profile internal server error response has a 5xx status code
func (o *UpdateEngineRunProfileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update engine run profile internal server error response a status code equal to that given
func (o *UpdateEngineRunProfileInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateEngineRunProfileInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEngineRunProfileInternalServerError) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{engineId}/run-profiles/{runProfileId}][%d] updateEngineRunProfileInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEngineRunProfileInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEngineRunProfileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
