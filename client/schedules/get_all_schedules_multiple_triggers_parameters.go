// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllSchedulesMultipleTriggersParams creates a new GetAllSchedulesMultipleTriggersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllSchedulesMultipleTriggersParams() *GetAllSchedulesMultipleTriggersParams {
	return &GetAllSchedulesMultipleTriggersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllSchedulesMultipleTriggersParamsWithTimeout creates a new GetAllSchedulesMultipleTriggersParams object
// with the ability to set a timeout on a request.
func NewGetAllSchedulesMultipleTriggersParamsWithTimeout(timeout time.Duration) *GetAllSchedulesMultipleTriggersParams {
	return &GetAllSchedulesMultipleTriggersParams{
		timeout: timeout,
	}
}

// NewGetAllSchedulesMultipleTriggersParamsWithContext creates a new GetAllSchedulesMultipleTriggersParams object
// with the ability to set a context for a request.
func NewGetAllSchedulesMultipleTriggersParamsWithContext(ctx context.Context) *GetAllSchedulesMultipleTriggersParams {
	return &GetAllSchedulesMultipleTriggersParams{
		Context: ctx,
	}
}

// NewGetAllSchedulesMultipleTriggersParamsWithHTTPClient creates a new GetAllSchedulesMultipleTriggersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllSchedulesMultipleTriggersParamsWithHTTPClient(client *http.Client) *GetAllSchedulesMultipleTriggersParams {
	return &GetAllSchedulesMultipleTriggersParams{
		HTTPClient: client,
	}
}

/*
GetAllSchedulesMultipleTriggersParams contains all the parameters to send to the API endpoint

	for the get all schedules multiple triggers operation.

	Typically these are written to a http.Request.
*/
type GetAllSchedulesMultipleTriggersParams struct {

	/* DescriptionFilter.

	   Schedulers matching description filter (regular expression)
	*/
	DescriptionFilter *string

	/* EnvironmentID.

	   Schedulers matching environmentId
	*/
	EnvironmentID *string

	/* Limit.

	   the number of items to return. Must be in range [1, 100]. Default value - 100

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   the position of the first item. Must be greater than or equal to 0. Default value - 0

	   Format: int32
	*/
	Offset *int32

	/* OnlyBound.

	   Only bound schedulers
	*/
	OnlyBound *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all schedules multiple triggers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllSchedulesMultipleTriggersParams) WithDefaults() *GetAllSchedulesMultipleTriggersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all schedules multiple triggers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllSchedulesMultipleTriggersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithTimeout(timeout time.Duration) *GetAllSchedulesMultipleTriggersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithContext(ctx context.Context) *GetAllSchedulesMultipleTriggersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithHTTPClient(client *http.Client) *GetAllSchedulesMultipleTriggersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescriptionFilter adds the descriptionFilter to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithDescriptionFilter(descriptionFilter *string) *GetAllSchedulesMultipleTriggersParams {
	o.SetDescriptionFilter(descriptionFilter)
	return o
}

// SetDescriptionFilter adds the descriptionFilter to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetDescriptionFilter(descriptionFilter *string) {
	o.DescriptionFilter = descriptionFilter
}

// WithEnvironmentID adds the environmentID to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithEnvironmentID(environmentID *string) *GetAllSchedulesMultipleTriggersParams {
	o.SetEnvironmentID(environmentID)
	return o
}

// SetEnvironmentID adds the environmentId to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetEnvironmentID(environmentID *string) {
	o.EnvironmentID = environmentID
}

// WithLimit adds the limit to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithLimit(limit *int32) *GetAllSchedulesMultipleTriggersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithOffset(offset *int32) *GetAllSchedulesMultipleTriggersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOnlyBound adds the onlyBound to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) WithOnlyBound(onlyBound *bool) *GetAllSchedulesMultipleTriggersParams {
	o.SetOnlyBound(onlyBound)
	return o
}

// SetOnlyBound adds the onlyBound to the get all schedules multiple triggers params
func (o *GetAllSchedulesMultipleTriggersParams) SetOnlyBound(onlyBound *bool) {
	o.OnlyBound = onlyBound
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllSchedulesMultipleTriggersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DescriptionFilter != nil {

		// query param descriptionFilter
		var qrDescriptionFilter string

		if o.DescriptionFilter != nil {
			qrDescriptionFilter = *o.DescriptionFilter
		}
		qDescriptionFilter := qrDescriptionFilter
		if qDescriptionFilter != "" {

			if err := r.SetQueryParam("descriptionFilter", qDescriptionFilter); err != nil {
				return err
			}
		}
	}

	if o.EnvironmentID != nil {

		// query param environmentId
		var qrEnvironmentID string

		if o.EnvironmentID != nil {
			qrEnvironmentID = *o.EnvironmentID
		}
		qEnvironmentID := qrEnvironmentID
		if qEnvironmentID != "" {

			if err := r.SetQueryParam("environmentId", qEnvironmentID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OnlyBound != nil {

		// query param onlyBound
		var qrOnlyBound bool

		if o.OnlyBound != nil {
			qrOnlyBound = *o.OnlyBound
		}
		qOnlyBound := swag.FormatBool(qrOnlyBound)
		if qOnlyBound != "" {

			if err := r.SetQueryParam("onlyBound", qOnlyBound); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
