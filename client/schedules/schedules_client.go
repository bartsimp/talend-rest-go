// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new schedules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schedules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppendTriggerToScheduleMultiple(params *AppendTriggerToScheduleMultipleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendTriggerToScheduleMultipleOK, error)

	CloneScheduleMultipleTriggers(params *CloneScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneScheduleMultipleTriggersCreated, error)

	CreateScheduleMultipleTriggers(params *CreateScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScheduleMultipleTriggersCreated, error)

	DeleteScheduleMultipleTriggers(params *DeleteScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleMultipleTriggersNoContent, error)

	DeleteTriggerFromScheduleMultiple(params *DeleteTriggerFromScheduleMultipleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTriggerFromScheduleMultipleNoContent, error)

	GetAllSchedulesMultipleTriggers(params *GetAllSchedulesMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSchedulesMultipleTriggersOK, error)

	GetScheduleMultipleTriggers(params *GetScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleMultipleTriggersOK, error)

	SimulateNextTriggeredEvents(params *SimulateNextTriggeredEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SimulateNextTriggeredEventsOK, error)

	UpdateScheduleMultipleTriggers(params *UpdateScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScheduleMultipleTriggersNoContent, error)

	UpdateTriggerInScheduleMultiple(params *UpdateTriggerInScheduleMultipleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTriggerInScheduleMultipleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AppendTriggerToScheduleMultiple appends a trigger to a schedule
*/
func (a *Client) AppendTriggerToScheduleMultiple(params *AppendTriggerToScheduleMultipleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendTriggerToScheduleMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendTriggerToScheduleMultipleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "appendTriggerToScheduleMultiple",
		Method:             "POST",
		PathPattern:        "/schedules/{scheduleId}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppendTriggerToScheduleMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendTriggerToScheduleMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for appendTriggerToScheduleMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloneScheduleMultipleTriggers clones schedule multiple triggers
*/
func (a *Client) CloneScheduleMultipleTriggers(params *CloneScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneScheduleMultipleTriggersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneScheduleMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneScheduleMultipleTriggers",
		Method:             "POST",
		PathPattern:        "/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneScheduleMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneScheduleMultipleTriggersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneScheduleMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateScheduleMultipleTriggers creates schedule for multiple triggers
*/
func (a *Client) CreateScheduleMultipleTriggers(params *CreateScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScheduleMultipleTriggersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScheduleMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createScheduleMultipleTriggers",
		Method:             "POST",
		PathPattern:        "/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScheduleMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScheduleMultipleTriggersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScheduleMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScheduleMultipleTriggers deletes schedule by id
*/
func (a *Client) DeleteScheduleMultipleTriggers(params *DeleteScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleMultipleTriggersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduleMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScheduleMultipleTriggers",
		Method:             "DELETE",
		PathPattern:        "/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScheduleMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScheduleMultipleTriggersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScheduleMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTriggerFromScheduleMultiple deletes schedule trigger by name
*/
func (a *Client) DeleteTriggerFromScheduleMultiple(params *DeleteTriggerFromScheduleMultipleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTriggerFromScheduleMultipleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTriggerFromScheduleMultipleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTriggerFromScheduleMultiple",
		Method:             "DELETE",
		PathPattern:        "/schedules/{scheduleId}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTriggerFromScheduleMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTriggerFromScheduleMultipleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTriggerFromScheduleMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSchedulesMultipleTriggers gets schedules list
*/
func (a *Client) GetAllSchedulesMultipleTriggers(params *GetAllSchedulesMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSchedulesMultipleTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSchedulesMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSchedulesMultipleTriggers",
		Method:             "GET",
		PathPattern:        "/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSchedulesMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSchedulesMultipleTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSchedulesMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduleMultipleTriggers gets schedule by id
*/
func (a *Client) GetScheduleMultipleTriggers(params *GetScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleMultipleTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getScheduleMultipleTriggers",
		Method:             "GET",
		PathPattern:        "/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduleMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleMultipleTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScheduleMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SimulateNextTriggeredEvents simulates schedule events
*/
func (a *Client) SimulateNextTriggeredEvents(params *SimulateNextTriggeredEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SimulateNextTriggeredEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSimulateNextTriggeredEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "simulateNextTriggeredEvents",
		Method:             "GET",
		PathPattern:        "/schedules/{scheduleId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SimulateNextTriggeredEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SimulateNextTriggeredEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for simulateNextTriggeredEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScheduleMultipleTriggers applies partial changes to a schedule
*/
func (a *Client) UpdateScheduleMultipleTriggers(params *UpdateScheduleMultipleTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScheduleMultipleTriggersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScheduleMultipleTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateScheduleMultipleTriggers",
		Method:             "PATCH",
		PathPattern:        "/schedules/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScheduleMultipleTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScheduleMultipleTriggersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScheduleMultipleTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTriggerInScheduleMultiple updates a trigger within a schedule
*/
func (a *Client) UpdateTriggerInScheduleMultiple(params *UpdateTriggerInScheduleMultipleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTriggerInScheduleMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTriggerInScheduleMultipleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTriggerInScheduleMultiple",
		Method:             "PUT",
		PathPattern:        "/schedules/{scheduleId}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTriggerInScheduleMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTriggerInScheduleMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTriggerInScheduleMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
