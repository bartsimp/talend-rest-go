// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSimulateNextTriggeredEventsParams creates a new SimulateNextTriggeredEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSimulateNextTriggeredEventsParams() *SimulateNextTriggeredEventsParams {
	return &SimulateNextTriggeredEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSimulateNextTriggeredEventsParamsWithTimeout creates a new SimulateNextTriggeredEventsParams object
// with the ability to set a timeout on a request.
func NewSimulateNextTriggeredEventsParamsWithTimeout(timeout time.Duration) *SimulateNextTriggeredEventsParams {
	return &SimulateNextTriggeredEventsParams{
		timeout: timeout,
	}
}

// NewSimulateNextTriggeredEventsParamsWithContext creates a new SimulateNextTriggeredEventsParams object
// with the ability to set a context for a request.
func NewSimulateNextTriggeredEventsParamsWithContext(ctx context.Context) *SimulateNextTriggeredEventsParams {
	return &SimulateNextTriggeredEventsParams{
		Context: ctx,
	}
}

// NewSimulateNextTriggeredEventsParamsWithHTTPClient creates a new SimulateNextTriggeredEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSimulateNextTriggeredEventsParamsWithHTTPClient(client *http.Client) *SimulateNextTriggeredEventsParams {
	return &SimulateNextTriggeredEventsParams{
		HTTPClient: client,
	}
}

/*
SimulateNextTriggeredEventsParams contains all the parameters to send to the API endpoint

	for the simulate next triggered events operation.

	Typically these are written to a http.Request.
*/
type SimulateNextTriggeredEventsParams struct {

	/* From.

	   from date time (milliseconds)

	   Format: int64
	*/
	From *int64

	/* Limit.

	   the number of items to return. Must be in range [1, 100]. Default value - 100

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   the position of the first item. Must be greater than or equal to 0. Default value - 0

	   Format: int32
	*/
	Offset *int32

	/* ScheduleID.

	   schedules id
	*/
	ScheduleID string

	/* To.

	   to date time (milliseconds)

	   Format: int64
	*/
	To int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the simulate next triggered events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SimulateNextTriggeredEventsParams) WithDefaults() *SimulateNextTriggeredEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the simulate next triggered events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SimulateNextTriggeredEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithTimeout(timeout time.Duration) *SimulateNextTriggeredEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithContext(ctx context.Context) *SimulateNextTriggeredEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithHTTPClient(client *http.Client) *SimulateNextTriggeredEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithFrom(from *int64) *SimulateNextTriggeredEventsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetFrom(from *int64) {
	o.From = from
}

// WithLimit adds the limit to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithLimit(limit *int32) *SimulateNextTriggeredEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithOffset(offset *int32) *SimulateNextTriggeredEventsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithScheduleID adds the scheduleID to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithScheduleID(scheduleID string) *SimulateNextTriggeredEventsParams {
	o.SetScheduleID(scheduleID)
	return o
}

// SetScheduleID adds the scheduleId to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetScheduleID(scheduleID string) {
	o.ScheduleID = scheduleID
}

// WithTo adds the to to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) WithTo(to int64) *SimulateNextTriggeredEventsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the simulate next triggered events params
func (o *SimulateNextTriggeredEventsParams) SetTo(to int64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *SimulateNextTriggeredEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom int64

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// path param scheduleId
	if err := r.SetPathParam("scheduleId", o.ScheduleID); err != nil {
		return err
	}

	// query param to
	qrTo := o.To
	qTo := swag.FormatInt64(qrTo)
	if qTo != "" {

		if err := r.SetQueryParam("to", qTo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
