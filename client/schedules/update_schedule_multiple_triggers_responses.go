// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// UpdateScheduleMultipleTriggersReader is a Reader for the UpdateScheduleMultipleTriggers structure.
type UpdateScheduleMultipleTriggersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScheduleMultipleTriggersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateScheduleMultipleTriggersNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateScheduleMultipleTriggersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateScheduleMultipleTriggersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateScheduleMultipleTriggersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateScheduleMultipleTriggersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateScheduleMultipleTriggersConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 428:
		result := NewUpdateScheduleMultipleTriggersPreconditionRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateScheduleMultipleTriggersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateScheduleMultipleTriggersNoContent creates a UpdateScheduleMultipleTriggersNoContent with default headers values
func NewUpdateScheduleMultipleTriggersNoContent() *UpdateScheduleMultipleTriggersNoContent {
	return &UpdateScheduleMultipleTriggersNoContent{}
}

/*
UpdateScheduleMultipleTriggersNoContent describes a response with status code 204, with default header values.

No Content
*/
type UpdateScheduleMultipleTriggersNoContent struct {
}

// IsSuccess returns true when this update schedule multiple triggers no content response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update schedule multiple triggers no content response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers no content response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update schedule multiple triggers no content response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule multiple triggers no content response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateScheduleMultipleTriggersNoContent) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersNoContent ", 204)
}

func (o *UpdateScheduleMultipleTriggersNoContent) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersNoContent ", 204)
}

func (o *UpdateScheduleMultipleTriggersNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateScheduleMultipleTriggersBadRequest creates a UpdateScheduleMultipleTriggersBadRequest with default headers values
func NewUpdateScheduleMultipleTriggersBadRequest() *UpdateScheduleMultipleTriggersBadRequest {
	return &UpdateScheduleMultipleTriggersBadRequest{}
}

/*
UpdateScheduleMultipleTriggersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateScheduleMultipleTriggersBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update schedule multiple triggers bad request response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule multiple triggers bad request response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers bad request response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule multiple triggers bad request response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule multiple triggers bad request response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateScheduleMultipleTriggersBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersBadRequest) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateScheduleMultipleTriggersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleMultipleTriggersUnauthorized creates a UpdateScheduleMultipleTriggersUnauthorized with default headers values
func NewUpdateScheduleMultipleTriggersUnauthorized() *UpdateScheduleMultipleTriggersUnauthorized {
	return &UpdateScheduleMultipleTriggersUnauthorized{}
}

/*
UpdateScheduleMultipleTriggersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateScheduleMultipleTriggersUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update schedule multiple triggers unauthorized response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule multiple triggers unauthorized response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers unauthorized response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule multiple triggers unauthorized response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule multiple triggers unauthorized response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateScheduleMultipleTriggersUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateScheduleMultipleTriggersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleMultipleTriggersForbidden creates a UpdateScheduleMultipleTriggersForbidden with default headers values
func NewUpdateScheduleMultipleTriggersForbidden() *UpdateScheduleMultipleTriggersForbidden {
	return &UpdateScheduleMultipleTriggersForbidden{}
}

/*
UpdateScheduleMultipleTriggersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateScheduleMultipleTriggersForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update schedule multiple triggers forbidden response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule multiple triggers forbidden response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers forbidden response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule multiple triggers forbidden response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule multiple triggers forbidden response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateScheduleMultipleTriggersForbidden) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersForbidden) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateScheduleMultipleTriggersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleMultipleTriggersNotFound creates a UpdateScheduleMultipleTriggersNotFound with default headers values
func NewUpdateScheduleMultipleTriggersNotFound() *UpdateScheduleMultipleTriggersNotFound {
	return &UpdateScheduleMultipleTriggersNotFound{}
}

/*
UpdateScheduleMultipleTriggersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateScheduleMultipleTriggersNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update schedule multiple triggers not found response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule multiple triggers not found response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers not found response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule multiple triggers not found response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule multiple triggers not found response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateScheduleMultipleTriggersNotFound) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersNotFound) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateScheduleMultipleTriggersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleMultipleTriggersConflict creates a UpdateScheduleMultipleTriggersConflict with default headers values
func NewUpdateScheduleMultipleTriggersConflict() *UpdateScheduleMultipleTriggersConflict {
	return &UpdateScheduleMultipleTriggersConflict{}
}

/*
UpdateScheduleMultipleTriggersConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateScheduleMultipleTriggersConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update schedule multiple triggers conflict response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule multiple triggers conflict response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers conflict response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule multiple triggers conflict response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule multiple triggers conflict response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateScheduleMultipleTriggersConflict) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersConflict  %+v", 409, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersConflict) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersConflict  %+v", 409, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateScheduleMultipleTriggersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleMultipleTriggersPreconditionRequired creates a UpdateScheduleMultipleTriggersPreconditionRequired with default headers values
func NewUpdateScheduleMultipleTriggersPreconditionRequired() *UpdateScheduleMultipleTriggersPreconditionRequired {
	return &UpdateScheduleMultipleTriggersPreconditionRequired{}
}

/*
UpdateScheduleMultipleTriggersPreconditionRequired describes a response with status code 428, with default header values.

Precondition Required
*/
type UpdateScheduleMultipleTriggersPreconditionRequired struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update schedule multiple triggers precondition required response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersPreconditionRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule multiple triggers precondition required response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersPreconditionRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers precondition required response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersPreconditionRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule multiple triggers precondition required response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersPreconditionRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule multiple triggers precondition required response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersPreconditionRequired) IsCode(code int) bool {
	return code == 428
}

func (o *UpdateScheduleMultipleTriggersPreconditionRequired) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersPreconditionRequired  %+v", 428, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersPreconditionRequired) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersPreconditionRequired  %+v", 428, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersPreconditionRequired) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateScheduleMultipleTriggersPreconditionRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleMultipleTriggersInternalServerError creates a UpdateScheduleMultipleTriggersInternalServerError with default headers values
func NewUpdateScheduleMultipleTriggersInternalServerError() *UpdateScheduleMultipleTriggersInternalServerError {
	return &UpdateScheduleMultipleTriggersInternalServerError{}
}

/*
UpdateScheduleMultipleTriggersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateScheduleMultipleTriggersInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update schedule multiple triggers internal server error response has a 2xx status code
func (o *UpdateScheduleMultipleTriggersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule multiple triggers internal server error response has a 3xx status code
func (o *UpdateScheduleMultipleTriggersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule multiple triggers internal server error response has a 4xx status code
func (o *UpdateScheduleMultipleTriggersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update schedule multiple triggers internal server error response has a 5xx status code
func (o *UpdateScheduleMultipleTriggersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update schedule multiple triggers internal server error response a status code equal to that given
func (o *UpdateScheduleMultipleTriggersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateScheduleMultipleTriggersInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /schedules/{scheduleId}][%d] updateScheduleMultipleTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateScheduleMultipleTriggersInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateScheduleMultipleTriggersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
