// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// AppendTriggerToScheduleMultipleReader is a Reader for the AppendTriggerToScheduleMultiple structure.
type AppendTriggerToScheduleMultipleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppendTriggerToScheduleMultipleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppendTriggerToScheduleMultipleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAppendTriggerToScheduleMultipleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAppendTriggerToScheduleMultipleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAppendTriggerToScheduleMultipleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppendTriggerToScheduleMultipleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAppendTriggerToScheduleMultipleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 428:
		result := NewAppendTriggerToScheduleMultiplePreconditionRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAppendTriggerToScheduleMultipleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAppendTriggerToScheduleMultipleOK creates a AppendTriggerToScheduleMultipleOK with default headers values
func NewAppendTriggerToScheduleMultipleOK() *AppendTriggerToScheduleMultipleOK {
	return &AppendTriggerToScheduleMultipleOK{}
}

/*
AppendTriggerToScheduleMultipleOK describes a response with status code 200, with default header values.

OK
*/
type AppendTriggerToScheduleMultipleOK struct {
}

// IsSuccess returns true when this append trigger to schedule multiple o k response has a 2xx status code
func (o *AppendTriggerToScheduleMultipleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this append trigger to schedule multiple o k response has a 3xx status code
func (o *AppendTriggerToScheduleMultipleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple o k response has a 4xx status code
func (o *AppendTriggerToScheduleMultipleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this append trigger to schedule multiple o k response has a 5xx status code
func (o *AppendTriggerToScheduleMultipleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this append trigger to schedule multiple o k response a status code equal to that given
func (o *AppendTriggerToScheduleMultipleOK) IsCode(code int) bool {
	return code == 200
}

func (o *AppendTriggerToScheduleMultipleOK) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleOK ", 200)
}

func (o *AppendTriggerToScheduleMultipleOK) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleOK ", 200)
}

func (o *AppendTriggerToScheduleMultipleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAppendTriggerToScheduleMultipleBadRequest creates a AppendTriggerToScheduleMultipleBadRequest with default headers values
func NewAppendTriggerToScheduleMultipleBadRequest() *AppendTriggerToScheduleMultipleBadRequest {
	return &AppendTriggerToScheduleMultipleBadRequest{}
}

/*
AppendTriggerToScheduleMultipleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AppendTriggerToScheduleMultipleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this append trigger to schedule multiple bad request response has a 2xx status code
func (o *AppendTriggerToScheduleMultipleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append trigger to schedule multiple bad request response has a 3xx status code
func (o *AppendTriggerToScheduleMultipleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple bad request response has a 4xx status code
func (o *AppendTriggerToScheduleMultipleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this append trigger to schedule multiple bad request response has a 5xx status code
func (o *AppendTriggerToScheduleMultipleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this append trigger to schedule multiple bad request response a status code equal to that given
func (o *AppendTriggerToScheduleMultipleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AppendTriggerToScheduleMultipleBadRequest) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleBadRequest  %+v", 400, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleBadRequest) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleBadRequest  %+v", 400, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AppendTriggerToScheduleMultipleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTriggerToScheduleMultipleUnauthorized creates a AppendTriggerToScheduleMultipleUnauthorized with default headers values
func NewAppendTriggerToScheduleMultipleUnauthorized() *AppendTriggerToScheduleMultipleUnauthorized {
	return &AppendTriggerToScheduleMultipleUnauthorized{}
}

/*
AppendTriggerToScheduleMultipleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AppendTriggerToScheduleMultipleUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this append trigger to schedule multiple unauthorized response has a 2xx status code
func (o *AppendTriggerToScheduleMultipleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append trigger to schedule multiple unauthorized response has a 3xx status code
func (o *AppendTriggerToScheduleMultipleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple unauthorized response has a 4xx status code
func (o *AppendTriggerToScheduleMultipleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this append trigger to schedule multiple unauthorized response has a 5xx status code
func (o *AppendTriggerToScheduleMultipleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this append trigger to schedule multiple unauthorized response a status code equal to that given
func (o *AppendTriggerToScheduleMultipleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AppendTriggerToScheduleMultipleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleUnauthorized  %+v", 401, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleUnauthorized) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleUnauthorized  %+v", 401, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AppendTriggerToScheduleMultipleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTriggerToScheduleMultipleForbidden creates a AppendTriggerToScheduleMultipleForbidden with default headers values
func NewAppendTriggerToScheduleMultipleForbidden() *AppendTriggerToScheduleMultipleForbidden {
	return &AppendTriggerToScheduleMultipleForbidden{}
}

/*
AppendTriggerToScheduleMultipleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AppendTriggerToScheduleMultipleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this append trigger to schedule multiple forbidden response has a 2xx status code
func (o *AppendTriggerToScheduleMultipleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append trigger to schedule multiple forbidden response has a 3xx status code
func (o *AppendTriggerToScheduleMultipleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple forbidden response has a 4xx status code
func (o *AppendTriggerToScheduleMultipleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this append trigger to schedule multiple forbidden response has a 5xx status code
func (o *AppendTriggerToScheduleMultipleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this append trigger to schedule multiple forbidden response a status code equal to that given
func (o *AppendTriggerToScheduleMultipleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AppendTriggerToScheduleMultipleForbidden) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleForbidden  %+v", 403, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleForbidden) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleForbidden  %+v", 403, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AppendTriggerToScheduleMultipleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTriggerToScheduleMultipleNotFound creates a AppendTriggerToScheduleMultipleNotFound with default headers values
func NewAppendTriggerToScheduleMultipleNotFound() *AppendTriggerToScheduleMultipleNotFound {
	return &AppendTriggerToScheduleMultipleNotFound{}
}

/*
AppendTriggerToScheduleMultipleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AppendTriggerToScheduleMultipleNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this append trigger to schedule multiple not found response has a 2xx status code
func (o *AppendTriggerToScheduleMultipleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append trigger to schedule multiple not found response has a 3xx status code
func (o *AppendTriggerToScheduleMultipleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple not found response has a 4xx status code
func (o *AppendTriggerToScheduleMultipleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this append trigger to schedule multiple not found response has a 5xx status code
func (o *AppendTriggerToScheduleMultipleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this append trigger to schedule multiple not found response a status code equal to that given
func (o *AppendTriggerToScheduleMultipleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AppendTriggerToScheduleMultipleNotFound) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleNotFound  %+v", 404, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleNotFound) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleNotFound  %+v", 404, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AppendTriggerToScheduleMultipleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTriggerToScheduleMultipleConflict creates a AppendTriggerToScheduleMultipleConflict with default headers values
func NewAppendTriggerToScheduleMultipleConflict() *AppendTriggerToScheduleMultipleConflict {
	return &AppendTriggerToScheduleMultipleConflict{}
}

/*
AppendTriggerToScheduleMultipleConflict describes a response with status code 409, with default header values.

Conflict
*/
type AppendTriggerToScheduleMultipleConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this append trigger to schedule multiple conflict response has a 2xx status code
func (o *AppendTriggerToScheduleMultipleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append trigger to schedule multiple conflict response has a 3xx status code
func (o *AppendTriggerToScheduleMultipleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple conflict response has a 4xx status code
func (o *AppendTriggerToScheduleMultipleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this append trigger to schedule multiple conflict response has a 5xx status code
func (o *AppendTriggerToScheduleMultipleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this append trigger to schedule multiple conflict response a status code equal to that given
func (o *AppendTriggerToScheduleMultipleConflict) IsCode(code int) bool {
	return code == 409
}

func (o *AppendTriggerToScheduleMultipleConflict) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleConflict  %+v", 409, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleConflict) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleConflict  %+v", 409, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AppendTriggerToScheduleMultipleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTriggerToScheduleMultiplePreconditionRequired creates a AppendTriggerToScheduleMultiplePreconditionRequired with default headers values
func NewAppendTriggerToScheduleMultiplePreconditionRequired() *AppendTriggerToScheduleMultiplePreconditionRequired {
	return &AppendTriggerToScheduleMultiplePreconditionRequired{}
}

/*
AppendTriggerToScheduleMultiplePreconditionRequired describes a response with status code 428, with default header values.

Precondition Required
*/
type AppendTriggerToScheduleMultiplePreconditionRequired struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this append trigger to schedule multiple precondition required response has a 2xx status code
func (o *AppendTriggerToScheduleMultiplePreconditionRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append trigger to schedule multiple precondition required response has a 3xx status code
func (o *AppendTriggerToScheduleMultiplePreconditionRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple precondition required response has a 4xx status code
func (o *AppendTriggerToScheduleMultiplePreconditionRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this append trigger to schedule multiple precondition required response has a 5xx status code
func (o *AppendTriggerToScheduleMultiplePreconditionRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this append trigger to schedule multiple precondition required response a status code equal to that given
func (o *AppendTriggerToScheduleMultiplePreconditionRequired) IsCode(code int) bool {
	return code == 428
}

func (o *AppendTriggerToScheduleMultiplePreconditionRequired) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultiplePreconditionRequired  %+v", 428, o.Payload)
}

func (o *AppendTriggerToScheduleMultiplePreconditionRequired) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultiplePreconditionRequired  %+v", 428, o.Payload)
}

func (o *AppendTriggerToScheduleMultiplePreconditionRequired) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AppendTriggerToScheduleMultiplePreconditionRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppendTriggerToScheduleMultipleInternalServerError creates a AppendTriggerToScheduleMultipleInternalServerError with default headers values
func NewAppendTriggerToScheduleMultipleInternalServerError() *AppendTriggerToScheduleMultipleInternalServerError {
	return &AppendTriggerToScheduleMultipleInternalServerError{}
}

/*
AppendTriggerToScheduleMultipleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AppendTriggerToScheduleMultipleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this append trigger to schedule multiple internal server error response has a 2xx status code
func (o *AppendTriggerToScheduleMultipleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this append trigger to schedule multiple internal server error response has a 3xx status code
func (o *AppendTriggerToScheduleMultipleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this append trigger to schedule multiple internal server error response has a 4xx status code
func (o *AppendTriggerToScheduleMultipleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this append trigger to schedule multiple internal server error response has a 5xx status code
func (o *AppendTriggerToScheduleMultipleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this append trigger to schedule multiple internal server error response a status code equal to that given
func (o *AppendTriggerToScheduleMultipleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AppendTriggerToScheduleMultipleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleInternalServerError  %+v", 500, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleInternalServerError) String() string {
	return fmt.Sprintf("[POST /schedules/{scheduleId}/triggers][%d] appendTriggerToScheduleMultipleInternalServerError  %+v", 500, o.Payload)
}

func (o *AppendTriggerToScheduleMultipleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AppendTriggerToScheduleMultipleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
