// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// DeleteTriggerFromScheduleMultipleReader is a Reader for the DeleteTriggerFromScheduleMultiple structure.
type DeleteTriggerFromScheduleMultipleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTriggerFromScheduleMultipleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteTriggerFromScheduleMultipleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTriggerFromScheduleMultipleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteTriggerFromScheduleMultipleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteTriggerFromScheduleMultipleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTriggerFromScheduleMultipleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTriggerFromScheduleMultipleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteTriggerFromScheduleMultipleNoContent creates a DeleteTriggerFromScheduleMultipleNoContent with default headers values
func NewDeleteTriggerFromScheduleMultipleNoContent() *DeleteTriggerFromScheduleMultipleNoContent {
	return &DeleteTriggerFromScheduleMultipleNoContent{}
}

/*
DeleteTriggerFromScheduleMultipleNoContent describes a response with status code 204, with default header values.

No content
*/
type DeleteTriggerFromScheduleMultipleNoContent struct {
}

// IsSuccess returns true when this delete trigger from schedule multiple no content response has a 2xx status code
func (o *DeleteTriggerFromScheduleMultipleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete trigger from schedule multiple no content response has a 3xx status code
func (o *DeleteTriggerFromScheduleMultipleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trigger from schedule multiple no content response has a 4xx status code
func (o *DeleteTriggerFromScheduleMultipleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete trigger from schedule multiple no content response has a 5xx status code
func (o *DeleteTriggerFromScheduleMultipleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trigger from schedule multiple no content response a status code equal to that given
func (o *DeleteTriggerFromScheduleMultipleNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteTriggerFromScheduleMultipleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleNoContent ", 204)
}

func (o *DeleteTriggerFromScheduleMultipleNoContent) String() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleNoContent ", 204)
}

func (o *DeleteTriggerFromScheduleMultipleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTriggerFromScheduleMultipleBadRequest creates a DeleteTriggerFromScheduleMultipleBadRequest with default headers values
func NewDeleteTriggerFromScheduleMultipleBadRequest() *DeleteTriggerFromScheduleMultipleBadRequest {
	return &DeleteTriggerFromScheduleMultipleBadRequest{}
}

/*
DeleteTriggerFromScheduleMultipleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteTriggerFromScheduleMultipleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete trigger from schedule multiple bad request response has a 2xx status code
func (o *DeleteTriggerFromScheduleMultipleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete trigger from schedule multiple bad request response has a 3xx status code
func (o *DeleteTriggerFromScheduleMultipleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trigger from schedule multiple bad request response has a 4xx status code
func (o *DeleteTriggerFromScheduleMultipleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete trigger from schedule multiple bad request response has a 5xx status code
func (o *DeleteTriggerFromScheduleMultipleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trigger from schedule multiple bad request response a status code equal to that given
func (o *DeleteTriggerFromScheduleMultipleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteTriggerFromScheduleMultipleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleBadRequest) String() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTriggerFromScheduleMultipleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTriggerFromScheduleMultipleUnauthorized creates a DeleteTriggerFromScheduleMultipleUnauthorized with default headers values
func NewDeleteTriggerFromScheduleMultipleUnauthorized() *DeleteTriggerFromScheduleMultipleUnauthorized {
	return &DeleteTriggerFromScheduleMultipleUnauthorized{}
}

/*
DeleteTriggerFromScheduleMultipleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteTriggerFromScheduleMultipleUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete trigger from schedule multiple unauthorized response has a 2xx status code
func (o *DeleteTriggerFromScheduleMultipleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete trigger from schedule multiple unauthorized response has a 3xx status code
func (o *DeleteTriggerFromScheduleMultipleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trigger from schedule multiple unauthorized response has a 4xx status code
func (o *DeleteTriggerFromScheduleMultipleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete trigger from schedule multiple unauthorized response has a 5xx status code
func (o *DeleteTriggerFromScheduleMultipleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trigger from schedule multiple unauthorized response a status code equal to that given
func (o *DeleteTriggerFromScheduleMultipleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteTriggerFromScheduleMultipleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTriggerFromScheduleMultipleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTriggerFromScheduleMultipleForbidden creates a DeleteTriggerFromScheduleMultipleForbidden with default headers values
func NewDeleteTriggerFromScheduleMultipleForbidden() *DeleteTriggerFromScheduleMultipleForbidden {
	return &DeleteTriggerFromScheduleMultipleForbidden{}
}

/*
DeleteTriggerFromScheduleMultipleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteTriggerFromScheduleMultipleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete trigger from schedule multiple forbidden response has a 2xx status code
func (o *DeleteTriggerFromScheduleMultipleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete trigger from schedule multiple forbidden response has a 3xx status code
func (o *DeleteTriggerFromScheduleMultipleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trigger from schedule multiple forbidden response has a 4xx status code
func (o *DeleteTriggerFromScheduleMultipleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete trigger from schedule multiple forbidden response has a 5xx status code
func (o *DeleteTriggerFromScheduleMultipleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trigger from schedule multiple forbidden response a status code equal to that given
func (o *DeleteTriggerFromScheduleMultipleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteTriggerFromScheduleMultipleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleForbidden) String() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTriggerFromScheduleMultipleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTriggerFromScheduleMultipleNotFound creates a DeleteTriggerFromScheduleMultipleNotFound with default headers values
func NewDeleteTriggerFromScheduleMultipleNotFound() *DeleteTriggerFromScheduleMultipleNotFound {
	return &DeleteTriggerFromScheduleMultipleNotFound{}
}

/*
DeleteTriggerFromScheduleMultipleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteTriggerFromScheduleMultipleNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete trigger from schedule multiple not found response has a 2xx status code
func (o *DeleteTriggerFromScheduleMultipleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete trigger from schedule multiple not found response has a 3xx status code
func (o *DeleteTriggerFromScheduleMultipleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trigger from schedule multiple not found response has a 4xx status code
func (o *DeleteTriggerFromScheduleMultipleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete trigger from schedule multiple not found response has a 5xx status code
func (o *DeleteTriggerFromScheduleMultipleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete trigger from schedule multiple not found response a status code equal to that given
func (o *DeleteTriggerFromScheduleMultipleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteTriggerFromScheduleMultipleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleNotFound) String() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTriggerFromScheduleMultipleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTriggerFromScheduleMultipleInternalServerError creates a DeleteTriggerFromScheduleMultipleInternalServerError with default headers values
func NewDeleteTriggerFromScheduleMultipleInternalServerError() *DeleteTriggerFromScheduleMultipleInternalServerError {
	return &DeleteTriggerFromScheduleMultipleInternalServerError{}
}

/*
DeleteTriggerFromScheduleMultipleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteTriggerFromScheduleMultipleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete trigger from schedule multiple internal server error response has a 2xx status code
func (o *DeleteTriggerFromScheduleMultipleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete trigger from schedule multiple internal server error response has a 3xx status code
func (o *DeleteTriggerFromScheduleMultipleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete trigger from schedule multiple internal server error response has a 4xx status code
func (o *DeleteTriggerFromScheduleMultipleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete trigger from schedule multiple internal server error response has a 5xx status code
func (o *DeleteTriggerFromScheduleMultipleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete trigger from schedule multiple internal server error response a status code equal to that given
func (o *DeleteTriggerFromScheduleMultipleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteTriggerFromScheduleMultipleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /schedules/{scheduleId}/triggers][%d] deleteTriggerFromScheduleMultipleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTriggerFromScheduleMultipleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTriggerFromScheduleMultipleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
