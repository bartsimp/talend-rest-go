// Code generated by go-swagger; DO NOT EDIT.

package workspaces_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// UpdatePermissionsReader is a Reader for the UpdatePermissions structure.
type UpdatePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdatePermissionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewUpdatePermissionsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdatePermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdatePermissionsNoContent creates a UpdatePermissionsNoContent with default headers values
func NewUpdatePermissionsNoContent() *UpdatePermissionsNoContent {
	return &UpdatePermissionsNoContent{}
}

/*
UpdatePermissionsNoContent describes a response with status code 204, with default header values.

All changes on Permissions were successful
*/
type UpdatePermissionsNoContent struct {
}

// IsSuccess returns true when this update permissions no content response has a 2xx status code
func (o *UpdatePermissionsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update permissions no content response has a 3xx status code
func (o *UpdatePermissionsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update permissions no content response has a 4xx status code
func (o *UpdatePermissionsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update permissions no content response has a 5xx status code
func (o *UpdatePermissionsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update permissions no content response a status code equal to that given
func (o *UpdatePermissionsNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdatePermissionsNoContent) Error() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsNoContent ", 204)
}

func (o *UpdatePermissionsNoContent) String() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsNoContent ", 204)
}

func (o *UpdatePermissionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePermissionsMultiStatus creates a UpdatePermissionsMultiStatus with default headers values
func NewUpdatePermissionsMultiStatus() *UpdatePermissionsMultiStatus {
	return &UpdatePermissionsMultiStatus{}
}

/*
UpdatePermissionsMultiStatus describes a response with status code 207, with default header values.

Execution result detailed status on elementary changes rejected.
*/
type UpdatePermissionsMultiStatus struct {
	Payload []*models.PermissionResult
}

// IsSuccess returns true when this update permissions multi status response has a 2xx status code
func (o *UpdatePermissionsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update permissions multi status response has a 3xx status code
func (o *UpdatePermissionsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update permissions multi status response has a 4xx status code
func (o *UpdatePermissionsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this update permissions multi status response has a 5xx status code
func (o *UpdatePermissionsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this update permissions multi status response a status code equal to that given
func (o *UpdatePermissionsMultiStatus) IsCode(code int) bool {
	return code == 207
}

func (o *UpdatePermissionsMultiStatus) Error() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsMultiStatus  %+v", 207, o.Payload)
}

func (o *UpdatePermissionsMultiStatus) String() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsMultiStatus  %+v", 207, o.Payload)
}

func (o *UpdatePermissionsMultiStatus) GetPayload() []*models.PermissionResult {
	return o.Payload
}

func (o *UpdatePermissionsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePermissionsUnauthorized creates a UpdatePermissionsUnauthorized with default headers values
func NewUpdatePermissionsUnauthorized() *UpdatePermissionsUnauthorized {
	return &UpdatePermissionsUnauthorized{}
}

/*
UpdatePermissionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdatePermissionsUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update permissions unauthorized response has a 2xx status code
func (o *UpdatePermissionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update permissions unauthorized response has a 3xx status code
func (o *UpdatePermissionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update permissions unauthorized response has a 4xx status code
func (o *UpdatePermissionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update permissions unauthorized response has a 5xx status code
func (o *UpdatePermissionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update permissions unauthorized response a status code equal to that given
func (o *UpdatePermissionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdatePermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePermissionsUnauthorized) String() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePermissionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdatePermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePermissionsForbidden creates a UpdatePermissionsForbidden with default headers values
func NewUpdatePermissionsForbidden() *UpdatePermissionsForbidden {
	return &UpdatePermissionsForbidden{}
}

/*
UpdatePermissionsForbidden describes a response with status code 403, with default header values.

Not authorized to change permissions
*/
type UpdatePermissionsForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update permissions forbidden response has a 2xx status code
func (o *UpdatePermissionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update permissions forbidden response has a 3xx status code
func (o *UpdatePermissionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update permissions forbidden response has a 4xx status code
func (o *UpdatePermissionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update permissions forbidden response has a 5xx status code
func (o *UpdatePermissionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update permissions forbidden response a status code equal to that given
func (o *UpdatePermissionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdatePermissionsForbidden) Error() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePermissionsForbidden) String() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePermissionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdatePermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePermissionsNotFound creates a UpdatePermissionsNotFound with default headers values
func NewUpdatePermissionsNotFound() *UpdatePermissionsNotFound {
	return &UpdatePermissionsNotFound{}
}

/*
UpdatePermissionsNotFound describes a response with status code 404, with default header values.

The workspace id or the user does not exist
*/
type UpdatePermissionsNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update permissions not found response has a 2xx status code
func (o *UpdatePermissionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update permissions not found response has a 3xx status code
func (o *UpdatePermissionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update permissions not found response has a 4xx status code
func (o *UpdatePermissionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update permissions not found response has a 5xx status code
func (o *UpdatePermissionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update permissions not found response a status code equal to that given
func (o *UpdatePermissionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdatePermissionsNotFound) Error() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePermissionsNotFound) String() string {
	return fmt.Sprintf("[PUT /permissions/batch][%d] updatePermissionsNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePermissionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdatePermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
