// Code generated by go-swagger; DO NOT EDIT.

package workspaces_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspaces permissions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workspaces permissions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePermissions(params *CreatePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePermissionsNoContent, *CreatePermissionsMultiStatus, error)

	CreateWorkspacePermissions(params *CreateWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkspacePermissionsCreated, error)

	DeletePermissions(params *DeletePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePermissionsNoContent, *DeletePermissionsMultiStatus, error)

	DeleteWorkspacePermissions(params *DeleteWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkspacePermissionsNoContent, error)

	GetPermissions(params *GetPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPermissionsOK, error)

	GetWorkspacePermission(params *GetWorkspacePermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspacePermissionOK, error)

	UpdatePermissions(params *UpdatePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePermissionsNoContent, *UpdatePermissionsMultiStatus, error)

	UpdateWorkspacePermissions(params *UpdateWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkspacePermissionsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePermissions creates sets of workspace permissions

Create sets of workspace permissions on the current system. Allows to upload list of workspace permissions to be created.Creation actions will be applied in the same order as defined in the list
*/
func (a *Client) CreatePermissions(params *CreatePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePermissionsNoContent, *CreatePermissionsMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPermissions",
		Method:             "POST",
		PathPattern:        "/permissions/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePermissionsNoContent:
		return value, nil, nil
	case *CreatePermissionsMultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workspaces_permissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateWorkspacePermissions creates a workspace permission

Create a permission of a user on a workspace.
*/
func (a *Client) CreateWorkspacePermissions(params *CreateWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkspacePermissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkspacePermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWorkspacePermissions",
		Method:             "POST",
		PathPattern:        "/workspaces/{workspaceId}/users/{userId}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWorkspacePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWorkspacePermissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWorkspacePermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeletePermissions deletes workspace permissions

	Remove all permissions where user id is one from specified ones with request AND workspace is one from specified ones with request.

Special case: empty collection for users means that permissions for all users and specified workspaces will be deleted (and vise versa).
*/
func (a *Client) DeletePermissions(params *DeletePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePermissionsNoContent, *DeletePermissionsMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePermissions",
		Method:             "DELETE",
		PathPattern:        "/permissions/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePermissionsNoContent:
		return value, nil, nil
	case *DeletePermissionsMultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workspaces_permissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteWorkspacePermissions deletes a workspace permission

Delete a permission of a user on a workspace.
*/
func (a *Client) DeleteWorkspacePermissions(params *DeleteWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkspacePermissionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkspacePermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWorkspacePermissions",
		Method:             "DELETE",
		PathPattern:        "/workspaces/{workspaceId}/users/{userId}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkspacePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkspacePermissionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWorkspacePermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPermissions retrieves all workspace permissions according to search criteria

	It retrieves all workspace permissions according to several criteria:

environment : One environment of the account
workspace : One workspace of one environment of the account
user : One user of the account
*/
func (a *Client) GetPermissions(params *GetPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermissions",
		Method:             "GET",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspacePermission reads a workspace permission

Read a permission of a user on a workspace.
*/
func (a *Client) GetWorkspacePermission(params *GetWorkspacePermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspacePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacePermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkspacePermission",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspaceId}/users/{userId}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacePermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkspacePermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePermissions updates sets of workspace permissions

Update sets of workspace permissions on the current system. Allows to upload list of workspace permissions to be updated.Update actions will be applied in the same order as defined in the list
*/
func (a *Client) UpdatePermissions(params *UpdatePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePermissionsNoContent, *UpdatePermissionsMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePermissions",
		Method:             "PUT",
		PathPattern:        "/permissions/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePermissionsNoContent:
		return value, nil, nil
	case *UpdatePermissionsMultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workspaces_permissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWorkspacePermissions updates a workspace permission

Update a permission of a user on a workspace.
*/
func (a *Client) UpdateWorkspacePermissions(params *UpdateWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkspacePermissionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkspacePermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWorkspacePermissions",
		Method:             "PUT",
		PathPattern:        "/workspaces/{workspaceId}/users/{userId}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWorkspacePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWorkspacePermissionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWorkspacePermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
