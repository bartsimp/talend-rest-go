// Code generated by go-swagger; DO NOT EDIT.

package runtime_engines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runtime engines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime engines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRemoteEngine(params *CreateRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteEngineCreated, error)

	DebugRemoteEngine(params *DebugRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DebugRemoteEngineOK, error)

	DeleteRemoteEngine(params *DeleteRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRemoteEngineNoContent, error)

	GetRemoteEngine(params *GetRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteEngineOK, error)

	GetRemoteEngines(params *GetRemoteEnginesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteEnginesOK, error)

	UnpairRemoteEngine(params *UnpairRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnpairRemoteEngineOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRemoteEngine creates new remote engine

Create new Remote Engine
*/
func (a *Client) CreateRemoteEngine(params *CreateRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteEngineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRemoteEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRemoteEngine",
		Method:             "POST",
		PathPattern:        "/runtimes/remote-engines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRemoteEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRemoteEngineCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRemoteEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DebugRemoteEngine debugs remote engine

Debug Remote Engine
*/
func (a *Client) DebugRemoteEngine(params *DebugRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DebugRemoteEngineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDebugRemoteEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "debugRemoteEngine",
		Method:             "PUT",
		PathPattern:        "/runtimes/remote-engines/{remoteEngineId}/debug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DebugRemoteEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DebugRemoteEngineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for debugRemoteEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRemoteEngine deletes remote engine by id

Delete Remote Engine by id
*/
func (a *Client) DeleteRemoteEngine(params *DeleteRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRemoteEngineNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRemoteEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRemoteEngine",
		Method:             "DELETE",
		PathPattern:        "/runtimes/remote-engines/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRemoteEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRemoteEngineNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRemoteEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRemoteEngine gets remote engine by id

Get Remote Engine by id
*/
func (a *Client) GetRemoteEngine(params *GetRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteEngineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRemoteEngine",
		Method:             "GET",
		PathPattern:        "/runtimes/remote-engines/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteEngineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRemoteEngines gets all available remote engines

Get all (available) Remote Engines
*/
func (a *Client) GetRemoteEngines(params *GetRemoteEnginesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteEnginesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteEnginesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRemoteEngines",
		Method:             "GET",
		PathPattern:        "/runtimes/remote-engines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteEnginesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteEnginesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteEngines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnpairRemoteEngine unpairs remote engine

Unpair Remote Engine
*/
func (a *Client) UnpairRemoteEngine(params *UnpairRemoteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnpairRemoteEngineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnpairRemoteEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unpairRemoteEngine",
		Method:             "DELETE",
		PathPattern:        "/runtimes/remote-engines/{id}/pairing",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnpairRemoteEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnpairRemoteEngineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unpairRemoteEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
