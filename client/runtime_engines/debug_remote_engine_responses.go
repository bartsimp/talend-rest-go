// Code generated by go-swagger; DO NOT EDIT.

package runtime_engines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// DebugRemoteEngineReader is a Reader for the DebugRemoteEngine structure.
type DebugRemoteEngineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DebugRemoteEngineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDebugRemoteEngineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDebugRemoteEngineBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDebugRemoteEngineUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDebugRemoteEngineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDebugRemoteEngineInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDebugRemoteEngineOK creates a DebugRemoteEngineOK with default headers values
func NewDebugRemoteEngineOK() *DebugRemoteEngineOK {
	return &DebugRemoteEngineOK{}
}

/*
DebugRemoteEngineOK describes a response with status code 200, with default header values.

Updated
*/
type DebugRemoteEngineOK struct {
	Payload *models.Engine
}

// IsSuccess returns true when this debug remote engine o k response has a 2xx status code
func (o *DebugRemoteEngineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this debug remote engine o k response has a 3xx status code
func (o *DebugRemoteEngineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this debug remote engine o k response has a 4xx status code
func (o *DebugRemoteEngineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this debug remote engine o k response has a 5xx status code
func (o *DebugRemoteEngineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this debug remote engine o k response a status code equal to that given
func (o *DebugRemoteEngineOK) IsCode(code int) bool {
	return code == 200
}

func (o *DebugRemoteEngineOK) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineOK  %+v", 200, o.Payload)
}

func (o *DebugRemoteEngineOK) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineOK  %+v", 200, o.Payload)
}

func (o *DebugRemoteEngineOK) GetPayload() *models.Engine {
	return o.Payload
}

func (o *DebugRemoteEngineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Engine)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDebugRemoteEngineBadRequest creates a DebugRemoteEngineBadRequest with default headers values
func NewDebugRemoteEngineBadRequest() *DebugRemoteEngineBadRequest {
	return &DebugRemoteEngineBadRequest{}
}

/*
DebugRemoteEngineBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DebugRemoteEngineBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this debug remote engine bad request response has a 2xx status code
func (o *DebugRemoteEngineBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this debug remote engine bad request response has a 3xx status code
func (o *DebugRemoteEngineBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this debug remote engine bad request response has a 4xx status code
func (o *DebugRemoteEngineBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this debug remote engine bad request response has a 5xx status code
func (o *DebugRemoteEngineBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this debug remote engine bad request response a status code equal to that given
func (o *DebugRemoteEngineBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DebugRemoteEngineBadRequest) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineBadRequest  %+v", 400, o.Payload)
}

func (o *DebugRemoteEngineBadRequest) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineBadRequest  %+v", 400, o.Payload)
}

func (o *DebugRemoteEngineBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DebugRemoteEngineBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDebugRemoteEngineUnauthorized creates a DebugRemoteEngineUnauthorized with default headers values
func NewDebugRemoteEngineUnauthorized() *DebugRemoteEngineUnauthorized {
	return &DebugRemoteEngineUnauthorized{}
}

/*
DebugRemoteEngineUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DebugRemoteEngineUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this debug remote engine unauthorized response has a 2xx status code
func (o *DebugRemoteEngineUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this debug remote engine unauthorized response has a 3xx status code
func (o *DebugRemoteEngineUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this debug remote engine unauthorized response has a 4xx status code
func (o *DebugRemoteEngineUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this debug remote engine unauthorized response has a 5xx status code
func (o *DebugRemoteEngineUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this debug remote engine unauthorized response a status code equal to that given
func (o *DebugRemoteEngineUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DebugRemoteEngineUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineUnauthorized  %+v", 401, o.Payload)
}

func (o *DebugRemoteEngineUnauthorized) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineUnauthorized  %+v", 401, o.Payload)
}

func (o *DebugRemoteEngineUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DebugRemoteEngineUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDebugRemoteEngineForbidden creates a DebugRemoteEngineForbidden with default headers values
func NewDebugRemoteEngineForbidden() *DebugRemoteEngineForbidden {
	return &DebugRemoteEngineForbidden{}
}

/*
DebugRemoteEngineForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DebugRemoteEngineForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this debug remote engine forbidden response has a 2xx status code
func (o *DebugRemoteEngineForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this debug remote engine forbidden response has a 3xx status code
func (o *DebugRemoteEngineForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this debug remote engine forbidden response has a 4xx status code
func (o *DebugRemoteEngineForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this debug remote engine forbidden response has a 5xx status code
func (o *DebugRemoteEngineForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this debug remote engine forbidden response a status code equal to that given
func (o *DebugRemoteEngineForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DebugRemoteEngineForbidden) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineForbidden  %+v", 403, o.Payload)
}

func (o *DebugRemoteEngineForbidden) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineForbidden  %+v", 403, o.Payload)
}

func (o *DebugRemoteEngineForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DebugRemoteEngineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDebugRemoteEngineInternalServerError creates a DebugRemoteEngineInternalServerError with default headers values
func NewDebugRemoteEngineInternalServerError() *DebugRemoteEngineInternalServerError {
	return &DebugRemoteEngineInternalServerError{}
}

/*
DebugRemoteEngineInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DebugRemoteEngineInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this debug remote engine internal server error response has a 2xx status code
func (o *DebugRemoteEngineInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this debug remote engine internal server error response has a 3xx status code
func (o *DebugRemoteEngineInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this debug remote engine internal server error response has a 4xx status code
func (o *DebugRemoteEngineInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this debug remote engine internal server error response has a 5xx status code
func (o *DebugRemoteEngineInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this debug remote engine internal server error response a status code equal to that given
func (o *DebugRemoteEngineInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DebugRemoteEngineInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineInternalServerError  %+v", 500, o.Payload)
}

func (o *DebugRemoteEngineInternalServerError) String() string {
	return fmt.Sprintf("[PUT /runtimes/remote-engines/{remoteEngineId}/debug][%d] debugRemoteEngineInternalServerError  %+v", 500, o.Payload)
}

func (o *DebugRemoteEngineInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DebugRemoteEngineInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
