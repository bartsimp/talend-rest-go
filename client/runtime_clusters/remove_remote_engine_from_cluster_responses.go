// Code generated by go-swagger; DO NOT EDIT.

package runtime_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// RemoveRemoteEngineFromClusterReader is a Reader for the RemoveRemoteEngineFromCluster structure.
type RemoveRemoteEngineFromClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveRemoteEngineFromClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRemoveRemoteEngineFromClusterNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveRemoteEngineFromClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveRemoteEngineFromClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveRemoteEngineFromClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveRemoteEngineFromClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveRemoteEngineFromClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveRemoteEngineFromClusterNoContent creates a RemoveRemoteEngineFromClusterNoContent with default headers values
func NewRemoveRemoteEngineFromClusterNoContent() *RemoveRemoteEngineFromClusterNoContent {
	return &RemoveRemoteEngineFromClusterNoContent{}
}

/*
RemoveRemoteEngineFromClusterNoContent describes a response with status code 204, with default header values.

No Content
*/
type RemoveRemoteEngineFromClusterNoContent struct {
}

// IsSuccess returns true when this remove remote engine from cluster no content response has a 2xx status code
func (o *RemoveRemoteEngineFromClusterNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove remote engine from cluster no content response has a 3xx status code
func (o *RemoveRemoteEngineFromClusterNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove remote engine from cluster no content response has a 4xx status code
func (o *RemoveRemoteEngineFromClusterNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove remote engine from cluster no content response has a 5xx status code
func (o *RemoveRemoteEngineFromClusterNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove remote engine from cluster no content response a status code equal to that given
func (o *RemoveRemoteEngineFromClusterNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *RemoveRemoteEngineFromClusterNoContent) Error() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterNoContent ", 204)
}

func (o *RemoveRemoteEngineFromClusterNoContent) String() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterNoContent ", 204)
}

func (o *RemoveRemoteEngineFromClusterNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveRemoteEngineFromClusterBadRequest creates a RemoveRemoteEngineFromClusterBadRequest with default headers values
func NewRemoveRemoteEngineFromClusterBadRequest() *RemoveRemoteEngineFromClusterBadRequest {
	return &RemoveRemoteEngineFromClusterBadRequest{}
}

/*
RemoveRemoteEngineFromClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveRemoteEngineFromClusterBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this remove remote engine from cluster bad request response has a 2xx status code
func (o *RemoveRemoteEngineFromClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove remote engine from cluster bad request response has a 3xx status code
func (o *RemoveRemoteEngineFromClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove remote engine from cluster bad request response has a 4xx status code
func (o *RemoveRemoteEngineFromClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove remote engine from cluster bad request response has a 5xx status code
func (o *RemoveRemoteEngineFromClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove remote engine from cluster bad request response a status code equal to that given
func (o *RemoveRemoteEngineFromClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RemoveRemoteEngineFromClusterBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterBadRequest) String() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RemoveRemoteEngineFromClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveRemoteEngineFromClusterUnauthorized creates a RemoveRemoteEngineFromClusterUnauthorized with default headers values
func NewRemoveRemoteEngineFromClusterUnauthorized() *RemoveRemoteEngineFromClusterUnauthorized {
	return &RemoveRemoteEngineFromClusterUnauthorized{}
}

/*
RemoveRemoteEngineFromClusterUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RemoveRemoteEngineFromClusterUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this remove remote engine from cluster unauthorized response has a 2xx status code
func (o *RemoveRemoteEngineFromClusterUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove remote engine from cluster unauthorized response has a 3xx status code
func (o *RemoveRemoteEngineFromClusterUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove remote engine from cluster unauthorized response has a 4xx status code
func (o *RemoveRemoteEngineFromClusterUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove remote engine from cluster unauthorized response has a 5xx status code
func (o *RemoveRemoteEngineFromClusterUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remove remote engine from cluster unauthorized response a status code equal to that given
func (o *RemoveRemoteEngineFromClusterUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RemoveRemoteEngineFromClusterUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RemoveRemoteEngineFromClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveRemoteEngineFromClusterForbidden creates a RemoveRemoteEngineFromClusterForbidden with default headers values
func NewRemoveRemoteEngineFromClusterForbidden() *RemoveRemoteEngineFromClusterForbidden {
	return &RemoveRemoteEngineFromClusterForbidden{}
}

/*
RemoveRemoteEngineFromClusterForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RemoveRemoteEngineFromClusterForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this remove remote engine from cluster forbidden response has a 2xx status code
func (o *RemoveRemoteEngineFromClusterForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove remote engine from cluster forbidden response has a 3xx status code
func (o *RemoveRemoteEngineFromClusterForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove remote engine from cluster forbidden response has a 4xx status code
func (o *RemoveRemoteEngineFromClusterForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove remote engine from cluster forbidden response has a 5xx status code
func (o *RemoveRemoteEngineFromClusterForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this remove remote engine from cluster forbidden response a status code equal to that given
func (o *RemoveRemoteEngineFromClusterForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RemoveRemoteEngineFromClusterForbidden) Error() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterForbidden  %+v", 403, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterForbidden) String() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterForbidden  %+v", 403, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RemoveRemoteEngineFromClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveRemoteEngineFromClusterNotFound creates a RemoveRemoteEngineFromClusterNotFound with default headers values
func NewRemoveRemoteEngineFromClusterNotFound() *RemoveRemoteEngineFromClusterNotFound {
	return &RemoveRemoteEngineFromClusterNotFound{}
}

/*
RemoveRemoteEngineFromClusterNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RemoveRemoteEngineFromClusterNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this remove remote engine from cluster not found response has a 2xx status code
func (o *RemoveRemoteEngineFromClusterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove remote engine from cluster not found response has a 3xx status code
func (o *RemoveRemoteEngineFromClusterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove remote engine from cluster not found response has a 4xx status code
func (o *RemoveRemoteEngineFromClusterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove remote engine from cluster not found response has a 5xx status code
func (o *RemoveRemoteEngineFromClusterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove remote engine from cluster not found response a status code equal to that given
func (o *RemoveRemoteEngineFromClusterNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RemoveRemoteEngineFromClusterNotFound) Error() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterNotFound  %+v", 404, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterNotFound) String() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterNotFound  %+v", 404, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RemoveRemoteEngineFromClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveRemoteEngineFromClusterInternalServerError creates a RemoveRemoteEngineFromClusterInternalServerError with default headers values
func NewRemoveRemoteEngineFromClusterInternalServerError() *RemoveRemoteEngineFromClusterInternalServerError {
	return &RemoveRemoteEngineFromClusterInternalServerError{}
}

/*
RemoveRemoteEngineFromClusterInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RemoveRemoteEngineFromClusterInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this remove remote engine from cluster internal server error response has a 2xx status code
func (o *RemoveRemoteEngineFromClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove remote engine from cluster internal server error response has a 3xx status code
func (o *RemoveRemoteEngineFromClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove remote engine from cluster internal server error response has a 4xx status code
func (o *RemoveRemoteEngineFromClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove remote engine from cluster internal server error response has a 5xx status code
func (o *RemoveRemoteEngineFromClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove remote engine from cluster internal server error response a status code equal to that given
func (o *RemoveRemoteEngineFromClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RemoveRemoteEngineFromClusterInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}][%d] removeRemoteEngineFromClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveRemoteEngineFromClusterInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RemoveRemoteEngineFromClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
