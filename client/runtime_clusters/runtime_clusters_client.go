// Code generated by go-swagger; DO NOT EDIT.

package runtime_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runtime clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddRemoteEngineToCluster(params *AddRemoteEngineToClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRemoteEngineToClusterNoContent, error)

	CreateRemoteEngineCluster(params *CreateRemoteEngineClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteEngineClusterCreated, error)

	DeleteRemoteEngineCluster(params *DeleteRemoteEngineClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRemoteEngineClusterNoContent, error)

	GetEngineClustersAvailable(params *GetEngineClustersAvailableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineClustersAvailableOK, error)

	GetRemoteEngineCluster(params *GetRemoteEngineClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteEngineClusterOK, error)

	RemoveRemoteEngineFromCluster(params *RemoveRemoteEngineFromClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveRemoteEngineFromClusterNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddRemoteEngineToCluster adds remote engine to remote engine cluster

Add Remote Engine to Remote Engine Cluster
*/
func (a *Client) AddRemoteEngineToCluster(params *AddRemoteEngineToClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRemoteEngineToClusterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRemoteEngineToClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRemoteEngineToCluster",
		Method:             "PUT",
		PathPattern:        "/runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddRemoteEngineToClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRemoteEngineToClusterNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addRemoteEngineToCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRemoteEngineCluster creates remote engine cluster

Create Remote Engine Cluster
*/
func (a *Client) CreateRemoteEngineCluster(params *CreateRemoteEngineClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteEngineClusterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRemoteEngineClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRemoteEngineCluster",
		Method:             "POST",
		PathPattern:        "/runtimes/remote-engine-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRemoteEngineClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRemoteEngineClusterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRemoteEngineCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRemoteEngineCluster deletes remote engine cluster by id

Delete Remote Engine Cluster by id
*/
func (a *Client) DeleteRemoteEngineCluster(params *DeleteRemoteEngineClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRemoteEngineClusterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRemoteEngineClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRemoteEngineCluster",
		Method:             "DELETE",
		PathPattern:        "/runtimes/remote-engine-clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRemoteEngineClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRemoteEngineClusterNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRemoteEngineCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEngineClustersAvailable gets all available remote engine clusters

Get all (available) Remote Engine Clusters
*/
func (a *Client) GetEngineClustersAvailable(params *GetEngineClustersAvailableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineClustersAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEngineClustersAvailableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEngineClustersAvailable",
		Method:             "GET",
		PathPattern:        "/runtimes/remote-engine-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEngineClustersAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEngineClustersAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEngineClustersAvailable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRemoteEngineCluster gets remote engine cluster by id

Get Remote Engine Cluster by id
*/
func (a *Client) GetRemoteEngineCluster(params *GetRemoteEngineClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteEngineClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteEngineClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRemoteEngineCluster",
		Method:             "GET",
		PathPattern:        "/runtimes/remote-engine-clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteEngineClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteEngineClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteEngineCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveRemoteEngineFromCluster removes remote engine from remote engine cluster

Remove Remote Engine from Remote Engine Cluster
*/
func (a *Client) RemoveRemoteEngineFromCluster(params *RemoveRemoteEngineFromClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveRemoteEngineFromClusterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveRemoteEngineFromClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeRemoteEngineFromCluster",
		Method:             "DELETE",
		PathPattern:        "/runtimes/remote-engine-clusters/{clusterId}/engines/{engineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveRemoteEngineFromClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveRemoteEngineFromClusterNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeRemoteEngineFromCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
