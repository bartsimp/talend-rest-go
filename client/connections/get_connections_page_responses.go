// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// GetConnectionsPageReader is a Reader for the GetConnectionsPage structure.
type GetConnectionsPageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionsPageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConnectionsPageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionsPageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConnectionsPageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConnectionsPageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConnectionsPageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConnectionsPageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConnectionsPageOK creates a GetConnectionsPageOK with default headers values
func NewGetConnectionsPageOK() *GetConnectionsPageOK {
	return &GetConnectionsPageOK{}
}

/*
GetConnectionsPageOK describes a response with status code 200, with default header values.

OK
*/
type GetConnectionsPageOK struct {
	Payload *models.Page
}

// IsSuccess returns true when this get connections page o k response has a 2xx status code
func (o *GetConnectionsPageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get connections page o k response has a 3xx status code
func (o *GetConnectionsPageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connections page o k response has a 4xx status code
func (o *GetConnectionsPageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connections page o k response has a 5xx status code
func (o *GetConnectionsPageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get connections page o k response a status code equal to that given
func (o *GetConnectionsPageOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetConnectionsPageOK) Error() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageOK  %+v", 200, o.Payload)
}

func (o *GetConnectionsPageOK) String() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageOK  %+v", 200, o.Payload)
}

func (o *GetConnectionsPageOK) GetPayload() *models.Page {
	return o.Payload
}

func (o *GetConnectionsPageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Page)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsPageBadRequest creates a GetConnectionsPageBadRequest with default headers values
func NewGetConnectionsPageBadRequest() *GetConnectionsPageBadRequest {
	return &GetConnectionsPageBadRequest{}
}

/*
GetConnectionsPageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetConnectionsPageBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get connections page bad request response has a 2xx status code
func (o *GetConnectionsPageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connections page bad request response has a 3xx status code
func (o *GetConnectionsPageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connections page bad request response has a 4xx status code
func (o *GetConnectionsPageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connections page bad request response has a 5xx status code
func (o *GetConnectionsPageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get connections page bad request response a status code equal to that given
func (o *GetConnectionsPageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetConnectionsPageBadRequest) Error() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageBadRequest  %+v", 400, o.Payload)
}

func (o *GetConnectionsPageBadRequest) String() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageBadRequest  %+v", 400, o.Payload)
}

func (o *GetConnectionsPageBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetConnectionsPageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsPageUnauthorized creates a GetConnectionsPageUnauthorized with default headers values
func NewGetConnectionsPageUnauthorized() *GetConnectionsPageUnauthorized {
	return &GetConnectionsPageUnauthorized{}
}

/*
GetConnectionsPageUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetConnectionsPageUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get connections page unauthorized response has a 2xx status code
func (o *GetConnectionsPageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connections page unauthorized response has a 3xx status code
func (o *GetConnectionsPageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connections page unauthorized response has a 4xx status code
func (o *GetConnectionsPageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connections page unauthorized response has a 5xx status code
func (o *GetConnectionsPageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get connections page unauthorized response a status code equal to that given
func (o *GetConnectionsPageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetConnectionsPageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConnectionsPageUnauthorized) String() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConnectionsPageUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetConnectionsPageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsPageForbidden creates a GetConnectionsPageForbidden with default headers values
func NewGetConnectionsPageForbidden() *GetConnectionsPageForbidden {
	return &GetConnectionsPageForbidden{}
}

/*
GetConnectionsPageForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetConnectionsPageForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get connections page forbidden response has a 2xx status code
func (o *GetConnectionsPageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connections page forbidden response has a 3xx status code
func (o *GetConnectionsPageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connections page forbidden response has a 4xx status code
func (o *GetConnectionsPageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connections page forbidden response has a 5xx status code
func (o *GetConnectionsPageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get connections page forbidden response a status code equal to that given
func (o *GetConnectionsPageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetConnectionsPageForbidden) Error() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageForbidden  %+v", 403, o.Payload)
}

func (o *GetConnectionsPageForbidden) String() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageForbidden  %+v", 403, o.Payload)
}

func (o *GetConnectionsPageForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetConnectionsPageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsPageNotFound creates a GetConnectionsPageNotFound with default headers values
func NewGetConnectionsPageNotFound() *GetConnectionsPageNotFound {
	return &GetConnectionsPageNotFound{}
}

/*
GetConnectionsPageNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetConnectionsPageNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get connections page not found response has a 2xx status code
func (o *GetConnectionsPageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connections page not found response has a 3xx status code
func (o *GetConnectionsPageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connections page not found response has a 4xx status code
func (o *GetConnectionsPageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connections page not found response has a 5xx status code
func (o *GetConnectionsPageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get connections page not found response a status code equal to that given
func (o *GetConnectionsPageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetConnectionsPageNotFound) Error() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageNotFound  %+v", 404, o.Payload)
}

func (o *GetConnectionsPageNotFound) String() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageNotFound  %+v", 404, o.Payload)
}

func (o *GetConnectionsPageNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetConnectionsPageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsPageInternalServerError creates a GetConnectionsPageInternalServerError with default headers values
func NewGetConnectionsPageInternalServerError() *GetConnectionsPageInternalServerError {
	return &GetConnectionsPageInternalServerError{}
}

/*
GetConnectionsPageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetConnectionsPageInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get connections page internal server error response has a 2xx status code
func (o *GetConnectionsPageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connections page internal server error response has a 3xx status code
func (o *GetConnectionsPageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connections page internal server error response has a 4xx status code
func (o *GetConnectionsPageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connections page internal server error response has a 5xx status code
func (o *GetConnectionsPageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get connections page internal server error response a status code equal to that given
func (o *GetConnectionsPageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetConnectionsPageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConnectionsPageInternalServerError) String() string {
	return fmt.Sprintf("[GET /connections][%d] getConnectionsPageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConnectionsPageInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetConnectionsPageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
