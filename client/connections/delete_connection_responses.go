// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// DeleteConnectionReader is a Reader for the DeleteConnection structure.
type DeleteConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteConnectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteConnectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteConnectionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteConnectionNoContent creates a DeleteConnectionNoContent with default headers values
func NewDeleteConnectionNoContent() *DeleteConnectionNoContent {
	return &DeleteConnectionNoContent{}
}

/*
DeleteConnectionNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteConnectionNoContent struct {
}

// IsSuccess returns true when this delete connection no content response has a 2xx status code
func (o *DeleteConnectionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete connection no content response has a 3xx status code
func (o *DeleteConnectionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete connection no content response has a 4xx status code
func (o *DeleteConnectionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete connection no content response has a 5xx status code
func (o *DeleteConnectionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete connection no content response a status code equal to that given
func (o *DeleteConnectionNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteConnectionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionNoContent ", 204)
}

func (o *DeleteConnectionNoContent) String() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionNoContent ", 204)
}

func (o *DeleteConnectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConnectionBadRequest creates a DeleteConnectionBadRequest with default headers values
func NewDeleteConnectionBadRequest() *DeleteConnectionBadRequest {
	return &DeleteConnectionBadRequest{}
}

/*
DeleteConnectionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteConnectionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete connection bad request response has a 2xx status code
func (o *DeleteConnectionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete connection bad request response has a 3xx status code
func (o *DeleteConnectionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete connection bad request response has a 4xx status code
func (o *DeleteConnectionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete connection bad request response has a 5xx status code
func (o *DeleteConnectionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete connection bad request response a status code equal to that given
func (o *DeleteConnectionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteConnectionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteConnectionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteConnectionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConnectionUnauthorized creates a DeleteConnectionUnauthorized with default headers values
func NewDeleteConnectionUnauthorized() *DeleteConnectionUnauthorized {
	return &DeleteConnectionUnauthorized{}
}

/*
DeleteConnectionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteConnectionUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete connection unauthorized response has a 2xx status code
func (o *DeleteConnectionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete connection unauthorized response has a 3xx status code
func (o *DeleteConnectionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete connection unauthorized response has a 4xx status code
func (o *DeleteConnectionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete connection unauthorized response has a 5xx status code
func (o *DeleteConnectionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete connection unauthorized response a status code equal to that given
func (o *DeleteConnectionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteConnectionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteConnectionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConnectionForbidden creates a DeleteConnectionForbidden with default headers values
func NewDeleteConnectionForbidden() *DeleteConnectionForbidden {
	return &DeleteConnectionForbidden{}
}

/*
DeleteConnectionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteConnectionForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete connection forbidden response has a 2xx status code
func (o *DeleteConnectionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete connection forbidden response has a 3xx status code
func (o *DeleteConnectionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete connection forbidden response has a 4xx status code
func (o *DeleteConnectionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete connection forbidden response has a 5xx status code
func (o *DeleteConnectionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete connection forbidden response a status code equal to that given
func (o *DeleteConnectionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteConnectionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteConnectionForbidden) String() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteConnectionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteConnectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConnectionNotFound creates a DeleteConnectionNotFound with default headers values
func NewDeleteConnectionNotFound() *DeleteConnectionNotFound {
	return &DeleteConnectionNotFound{}
}

/*
DeleteConnectionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteConnectionNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete connection not found response has a 2xx status code
func (o *DeleteConnectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete connection not found response has a 3xx status code
func (o *DeleteConnectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete connection not found response has a 4xx status code
func (o *DeleteConnectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete connection not found response has a 5xx status code
func (o *DeleteConnectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete connection not found response a status code equal to that given
func (o *DeleteConnectionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteConnectionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteConnectionNotFound) String() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteConnectionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConnectionConflict creates a DeleteConnectionConflict with default headers values
func NewDeleteConnectionConflict() *DeleteConnectionConflict {
	return &DeleteConnectionConflict{}
}

/*
DeleteConnectionConflict describes a response with status code 409, with default header values.

Connection is in use
*/
type DeleteConnectionConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete connection conflict response has a 2xx status code
func (o *DeleteConnectionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete connection conflict response has a 3xx status code
func (o *DeleteConnectionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete connection conflict response has a 4xx status code
func (o *DeleteConnectionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete connection conflict response has a 5xx status code
func (o *DeleteConnectionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete connection conflict response a status code equal to that given
func (o *DeleteConnectionConflict) IsCode(code int) bool {
	return code == 409
}

func (o *DeleteConnectionConflict) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionConflict  %+v", 409, o.Payload)
}

func (o *DeleteConnectionConflict) String() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionConflict  %+v", 409, o.Payload)
}

func (o *DeleteConnectionConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteConnectionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConnectionInternalServerError creates a DeleteConnectionInternalServerError with default headers values
func NewDeleteConnectionInternalServerError() *DeleteConnectionInternalServerError {
	return &DeleteConnectionInternalServerError{}
}

/*
DeleteConnectionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteConnectionInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete connection internal server error response has a 2xx status code
func (o *DeleteConnectionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete connection internal server error response has a 3xx status code
func (o *DeleteConnectionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete connection internal server error response has a 4xx status code
func (o *DeleteConnectionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete connection internal server error response has a 5xx status code
func (o *DeleteConnectionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete connection internal server error response a status code equal to that given
func (o *DeleteConnectionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteConnectionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteConnectionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
