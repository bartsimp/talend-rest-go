// Code generated by go-swagger; DO NOT EDIT.

package runtime_pipeline_engines_run_profiles_standard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runtime pipeline engines run profiles standard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime pipeline engines run profiles standard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRunProfileStandard(params *CreateRunProfileStandardParams, opts ...ClientOption) (*CreateRunProfileStandardCreated, error)

	GetStandardRunProfileByID(params *GetStandardRunProfileByIDParams, opts ...ClientOption) (*GetStandardRunProfileByIDOK, error)

	UpdateRunProfileStandard(params *UpdateRunProfileStandardParams, opts ...ClientOption) (*UpdateRunProfileStandardNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRunProfileStandard creates new run profile
*/
func (a *Client) CreateRunProfileStandard(params *CreateRunProfileStandardParams, opts ...ClientOption) (*CreateRunProfileStandardCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunProfileStandardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRunProfileStandard",
		Method:             "POST",
		PathPattern:        "/runtimes/pipeline-engines/{engineId}/run-profiles/standard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRunProfileStandardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunProfileStandardCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunProfileStandard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStandardRunProfileByID gets run profile
*/
func (a *Client) GetStandardRunProfileByID(params *GetStandardRunProfileByIDParams, opts ...ClientOption) (*GetStandardRunProfileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStandardRunProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStandardRunProfileById",
		Method:             "GET",
		PathPattern:        "/runtimes/pipeline-engines/{engineId}/run-profiles/standard/{runProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStandardRunProfileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStandardRunProfileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStandardRunProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRunProfileStandard updates run profile
*/
func (a *Client) UpdateRunProfileStandard(params *UpdateRunProfileStandardParams, opts ...ClientOption) (*UpdateRunProfileStandardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunProfileStandardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRunProfileStandard",
		Method:             "PUT",
		PathPattern:        "/runtimes/pipeline-engines/{engineId}/run-profiles/standard/{runProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRunProfileStandardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunProfileStandardNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunProfileStandard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
