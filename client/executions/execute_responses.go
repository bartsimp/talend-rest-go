// Code generated by go-swagger; DO NOT EDIT.

package executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// ExecuteReader is a Reader for the Execute structure.
type ExecuteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewExecuteCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecuteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewExecuteNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExecuteCreated creates a ExecuteCreated with default headers values
func NewExecuteCreated() *ExecuteCreated {
	return &ExecuteCreated{}
}

/*
ExecuteCreated describes a response with status code 201, with default header values.

Execution started
*/
type ExecuteCreated struct {
	Payload *models.Executionidentifier
}

// IsSuccess returns true when this execute created response has a 2xx status code
func (o *ExecuteCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute created response has a 3xx status code
func (o *ExecuteCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute created response has a 4xx status code
func (o *ExecuteCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute created response has a 5xx status code
func (o *ExecuteCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this execute created response a status code equal to that given
func (o *ExecuteCreated) IsCode(code int) bool {
	return code == 201
}

func (o *ExecuteCreated) Error() string {
	return fmt.Sprintf("[POST /executions][%d] executeCreated  %+v", 201, o.Payload)
}

func (o *ExecuteCreated) String() string {
	return fmt.Sprintf("[POST /executions][%d] executeCreated  %+v", 201, o.Payload)
}

func (o *ExecuteCreated) GetPayload() *models.Executionidentifier {
	return o.Payload
}

func (o *ExecuteCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Executionidentifier)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteBadRequest creates a ExecuteBadRequest with default headers values
func NewExecuteBadRequest() *ExecuteBadRequest {
	return &ExecuteBadRequest{}
}

/*
ExecuteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute bad request response has a 2xx status code
func (o *ExecuteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute bad request response has a 3xx status code
func (o *ExecuteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute bad request response has a 4xx status code
func (o *ExecuteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute bad request response has a 5xx status code
func (o *ExecuteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute bad request response a status code equal to that given
func (o *ExecuteBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ExecuteBadRequest) Error() string {
	return fmt.Sprintf("[POST /executions][%d] executeBadRequest  %+v", 400, o.Payload)
}

func (o *ExecuteBadRequest) String() string {
	return fmt.Sprintf("[POST /executions][%d] executeBadRequest  %+v", 400, o.Payload)
}

func (o *ExecuteBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecuteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteUnauthorized creates a ExecuteUnauthorized with default headers values
func NewExecuteUnauthorized() *ExecuteUnauthorized {
	return &ExecuteUnauthorized{}
}

/*
ExecuteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute unauthorized response has a 2xx status code
func (o *ExecuteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute unauthorized response has a 3xx status code
func (o *ExecuteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute unauthorized response has a 4xx status code
func (o *ExecuteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute unauthorized response has a 5xx status code
func (o *ExecuteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute unauthorized response a status code equal to that given
func (o *ExecuteUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ExecuteUnauthorized) Error() string {
	return fmt.Sprintf("[POST /executions][%d] executeUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecuteUnauthorized) String() string {
	return fmt.Sprintf("[POST /executions][%d] executeUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecuteUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecuteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteForbidden creates a ExecuteForbidden with default headers values
func NewExecuteForbidden() *ExecuteForbidden {
	return &ExecuteForbidden{}
}

/*
ExecuteForbidden describes a response with status code 403, with default header values.

Forbidden - no permissions to access resource
*/
type ExecuteForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute forbidden response has a 2xx status code
func (o *ExecuteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute forbidden response has a 3xx status code
func (o *ExecuteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute forbidden response has a 4xx status code
func (o *ExecuteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute forbidden response has a 5xx status code
func (o *ExecuteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute forbidden response a status code equal to that given
func (o *ExecuteForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ExecuteForbidden) Error() string {
	return fmt.Sprintf("[POST /executions][%d] executeForbidden  %+v", 403, o.Payload)
}

func (o *ExecuteForbidden) String() string {
	return fmt.Sprintf("[POST /executions][%d] executeForbidden  %+v", 403, o.Payload)
}

func (o *ExecuteForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecuteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteNotFound creates a ExecuteNotFound with default headers values
func NewExecuteNotFound() *ExecuteNotFound {
	return &ExecuteNotFound{}
}

/*
ExecuteNotFound describes a response with status code 404, with default header values.

Not found - resource not found
*/
type ExecuteNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute not found response has a 2xx status code
func (o *ExecuteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute not found response has a 3xx status code
func (o *ExecuteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute not found response has a 4xx status code
func (o *ExecuteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute not found response has a 5xx status code
func (o *ExecuteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execute not found response a status code equal to that given
func (o *ExecuteNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ExecuteNotFound) Error() string {
	return fmt.Sprintf("[POST /executions][%d] executeNotFound  %+v", 404, o.Payload)
}

func (o *ExecuteNotFound) String() string {
	return fmt.Sprintf("[POST /executions][%d] executeNotFound  %+v", 404, o.Payload)
}

func (o *ExecuteNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecuteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteInternalServerError creates a ExecuteInternalServerError with default headers values
func NewExecuteInternalServerError() *ExecuteInternalServerError {
	return &ExecuteInternalServerError{}
}

/*
ExecuteInternalServerError describes a response with status code 500, with default header values.

Server error - something went wrong on server side
*/
type ExecuteInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute internal server error response has a 2xx status code
func (o *ExecuteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute internal server error response has a 3xx status code
func (o *ExecuteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute internal server error response has a 4xx status code
func (o *ExecuteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute internal server error response has a 5xx status code
func (o *ExecuteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute internal server error response a status code equal to that given
func (o *ExecuteInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ExecuteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /executions][%d] executeInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecuteInternalServerError) String() string {
	return fmt.Sprintf("[POST /executions][%d] executeInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecuteInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecuteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteNotImplemented creates a ExecuteNotImplemented with default headers values
func NewExecuteNotImplemented() *ExecuteNotImplemented {
	return &ExecuteNotImplemented{}
}

/*
ExecuteNotImplemented describes a response with status code 501, with default header values.

Task cannot be deployed because it is not configured
*/
type ExecuteNotImplemented struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this execute not implemented response has a 2xx status code
func (o *ExecuteNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute not implemented response has a 3xx status code
func (o *ExecuteNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute not implemented response has a 4xx status code
func (o *ExecuteNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute not implemented response has a 5xx status code
func (o *ExecuteNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this execute not implemented response a status code equal to that given
func (o *ExecuteNotImplemented) IsCode(code int) bool {
	return code == 501
}

func (o *ExecuteNotImplemented) Error() string {
	return fmt.Sprintf("[POST /executions][%d] executeNotImplemented  %+v", 501, o.Payload)
}

func (o *ExecuteNotImplemented) String() string {
	return fmt.Sprintf("[POST /executions][%d] executeNotImplemented  %+v", 501, o.Payload)
}

func (o *ExecuteNotImplemented) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExecuteNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
