// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetEnvironmentsParams creates a new GetEnvironmentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEnvironmentsParams() *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEnvironmentsParamsWithTimeout creates a new GetEnvironmentsParams object
// with the ability to set a timeout on a request.
func NewGetEnvironmentsParamsWithTimeout(timeout time.Duration) *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		timeout: timeout,
	}
}

// NewGetEnvironmentsParamsWithContext creates a new GetEnvironmentsParams object
// with the ability to set a context for a request.
func NewGetEnvironmentsParamsWithContext(ctx context.Context) *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		Context: ctx,
	}
}

// NewGetEnvironmentsParamsWithHTTPClient creates a new GetEnvironmentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEnvironmentsParamsWithHTTPClient(client *http.Client) *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		HTTPClient: client,
	}
}

/*
GetEnvironmentsParams contains all the parameters to send to the API endpoint

	for the get environments operation.

	Typically these are written to a http.Request.
*/
type GetEnvironmentsParams struct {

	/* Query.

	   search query (FIQL format), e.g. name==Dev*;description==*environment*
	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get environments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEnvironmentsParams) WithDefaults() *GetEnvironmentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get environments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEnvironmentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get environments params
func (o *GetEnvironmentsParams) WithTimeout(timeout time.Duration) *GetEnvironmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get environments params
func (o *GetEnvironmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get environments params
func (o *GetEnvironmentsParams) WithContext(ctx context.Context) *GetEnvironmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get environments params
func (o *GetEnvironmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get environments params
func (o *GetEnvironmentsParams) WithHTTPClient(client *http.Client) *GetEnvironmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get environments params
func (o *GetEnvironmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQuery adds the query to the get environments params
func (o *GetEnvironmentsParams) WithQuery(query *string) *GetEnvironmentsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get environments params
func (o *GetEnvironmentsParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *GetEnvironmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
