// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// UpdateEnvironmentReader is a Reader for the UpdateEnvironment structure.
type UpdateEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateEnvironmentNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateEnvironmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEnvironmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateEnvironmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEnvironmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEnvironmentNoContent creates a UpdateEnvironmentNoContent with default headers values
func NewUpdateEnvironmentNoContent() *UpdateEnvironmentNoContent {
	return &UpdateEnvironmentNoContent{}
}

/*
UpdateEnvironmentNoContent describes a response with status code 204, with default header values.

Environment successfully updated
*/
type UpdateEnvironmentNoContent struct {
}

// IsSuccess returns true when this update environment no content response has a 2xx status code
func (o *UpdateEnvironmentNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update environment no content response has a 3xx status code
func (o *UpdateEnvironmentNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update environment no content response has a 4xx status code
func (o *UpdateEnvironmentNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update environment no content response has a 5xx status code
func (o *UpdateEnvironmentNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update environment no content response a status code equal to that given
func (o *UpdateEnvironmentNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateEnvironmentNoContent) Error() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentNoContent ", 204)
}

func (o *UpdateEnvironmentNoContent) String() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentNoContent ", 204)
}

func (o *UpdateEnvironmentNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEnvironmentBadRequest creates a UpdateEnvironmentBadRequest with default headers values
func NewUpdateEnvironmentBadRequest() *UpdateEnvironmentBadRequest {
	return &UpdateEnvironmentBadRequest{}
}

/*
UpdateEnvironmentBadRequest describes a response with status code 400, with default header values.

Parameters not valid
*/
type UpdateEnvironmentBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update environment bad request response has a 2xx status code
func (o *UpdateEnvironmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update environment bad request response has a 3xx status code
func (o *UpdateEnvironmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update environment bad request response has a 4xx status code
func (o *UpdateEnvironmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update environment bad request response has a 5xx status code
func (o *UpdateEnvironmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update environment bad request response a status code equal to that given
func (o *UpdateEnvironmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEnvironmentBadRequest) String() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEnvironmentBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentUnauthorized creates a UpdateEnvironmentUnauthorized with default headers values
func NewUpdateEnvironmentUnauthorized() *UpdateEnvironmentUnauthorized {
	return &UpdateEnvironmentUnauthorized{}
}

/*
UpdateEnvironmentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateEnvironmentUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update environment unauthorized response has a 2xx status code
func (o *UpdateEnvironmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update environment unauthorized response has a 3xx status code
func (o *UpdateEnvironmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update environment unauthorized response has a 4xx status code
func (o *UpdateEnvironmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update environment unauthorized response has a 5xx status code
func (o *UpdateEnvironmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update environment unauthorized response a status code equal to that given
func (o *UpdateEnvironmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateEnvironmentUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateEnvironmentUnauthorized) String() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateEnvironmentUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEnvironmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentForbidden creates a UpdateEnvironmentForbidden with default headers values
func NewUpdateEnvironmentForbidden() *UpdateEnvironmentForbidden {
	return &UpdateEnvironmentForbidden{}
}

/*
UpdateEnvironmentForbidden describes a response with status code 403, with default header values.

Not authorized to update the environment
*/
type UpdateEnvironmentForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update environment forbidden response has a 2xx status code
func (o *UpdateEnvironmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update environment forbidden response has a 3xx status code
func (o *UpdateEnvironmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update environment forbidden response has a 4xx status code
func (o *UpdateEnvironmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update environment forbidden response has a 5xx status code
func (o *UpdateEnvironmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update environment forbidden response a status code equal to that given
func (o *UpdateEnvironmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateEnvironmentForbidden) Error() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEnvironmentForbidden) String() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEnvironmentForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEnvironmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentConflict creates a UpdateEnvironmentConflict with default headers values
func NewUpdateEnvironmentConflict() *UpdateEnvironmentConflict {
	return &UpdateEnvironmentConflict{}
}

/*
UpdateEnvironmentConflict describes a response with status code 409, with default header values.

Environment name should be unique
*/
type UpdateEnvironmentConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update environment conflict response has a 2xx status code
func (o *UpdateEnvironmentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update environment conflict response has a 3xx status code
func (o *UpdateEnvironmentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update environment conflict response has a 4xx status code
func (o *UpdateEnvironmentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update environment conflict response has a 5xx status code
func (o *UpdateEnvironmentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update environment conflict response a status code equal to that given
func (o *UpdateEnvironmentConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateEnvironmentConflict) Error() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentConflict  %+v", 409, o.Payload)
}

func (o *UpdateEnvironmentConflict) String() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentConflict  %+v", 409, o.Payload)
}

func (o *UpdateEnvironmentConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEnvironmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentInternalServerError creates a UpdateEnvironmentInternalServerError with default headers values
func NewUpdateEnvironmentInternalServerError() *UpdateEnvironmentInternalServerError {
	return &UpdateEnvironmentInternalServerError{}
}

/*
UpdateEnvironmentInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateEnvironmentInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update environment internal server error response has a 2xx status code
func (o *UpdateEnvironmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update environment internal server error response has a 3xx status code
func (o *UpdateEnvironmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update environment internal server error response has a 4xx status code
func (o *UpdateEnvironmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update environment internal server error response has a 5xx status code
func (o *UpdateEnvironmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update environment internal server error response a status code equal to that given
func (o *UpdateEnvironmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateEnvironmentInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEnvironmentInternalServerError) String() string {
	return fmt.Sprintf("[PUT /environments/{environmentId}][%d] updateEnvironmentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEnvironmentInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateEnvironmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
