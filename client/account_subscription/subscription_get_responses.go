// Code generated by go-swagger; DO NOT EDIT.

package account_subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// SubscriptionGetReader is a Reader for the SubscriptionGet structure.
type SubscriptionGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscriptionGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubscriptionGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSubscriptionGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubscriptionGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscriptionGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubscriptionGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubscriptionGetOK creates a SubscriptionGetOK with default headers values
func NewSubscriptionGetOK() *SubscriptionGetOK {
	return &SubscriptionGetOK{}
}

/*
SubscriptionGetOK describes a response with status code 200, with default header values.

Status 200
*/
type SubscriptionGetOK struct {
	Payload *models.Subscription
}

// IsSuccess returns true when this subscription get o k response has a 2xx status code
func (o *SubscriptionGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this subscription get o k response has a 3xx status code
func (o *SubscriptionGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription get o k response has a 4xx status code
func (o *SubscriptionGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription get o k response has a 5xx status code
func (o *SubscriptionGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription get o k response a status code equal to that given
func (o *SubscriptionGetOK) IsCode(code int) bool {
	return code == 200
}

func (o *SubscriptionGetOK) Error() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetOK  %+v", 200, o.Payload)
}

func (o *SubscriptionGetOK) String() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetOK  %+v", 200, o.Payload)
}

func (o *SubscriptionGetOK) GetPayload() *models.Subscription {
	return o.Payload
}

func (o *SubscriptionGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionGetUnauthorized creates a SubscriptionGetUnauthorized with default headers values
func NewSubscriptionGetUnauthorized() *SubscriptionGetUnauthorized {
	return &SubscriptionGetUnauthorized{}
}

/*
SubscriptionGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SubscriptionGetUnauthorized struct {
}

// IsSuccess returns true when this subscription get unauthorized response has a 2xx status code
func (o *SubscriptionGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription get unauthorized response has a 3xx status code
func (o *SubscriptionGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription get unauthorized response has a 4xx status code
func (o *SubscriptionGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription get unauthorized response has a 5xx status code
func (o *SubscriptionGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription get unauthorized response a status code equal to that given
func (o *SubscriptionGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SubscriptionGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetUnauthorized ", 401)
}

func (o *SubscriptionGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetUnauthorized ", 401)
}

func (o *SubscriptionGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubscriptionGetForbidden creates a SubscriptionGetForbidden with default headers values
func NewSubscriptionGetForbidden() *SubscriptionGetForbidden {
	return &SubscriptionGetForbidden{}
}

/*
SubscriptionGetForbidden describes a response with status code 403, with default header values.

Forbidden - no permissions to access resource
*/
type SubscriptionGetForbidden struct {
}

// IsSuccess returns true when this subscription get forbidden response has a 2xx status code
func (o *SubscriptionGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription get forbidden response has a 3xx status code
func (o *SubscriptionGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription get forbidden response has a 4xx status code
func (o *SubscriptionGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription get forbidden response has a 5xx status code
func (o *SubscriptionGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription get forbidden response a status code equal to that given
func (o *SubscriptionGetForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubscriptionGetForbidden) Error() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetForbidden ", 403)
}

func (o *SubscriptionGetForbidden) String() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetForbidden ", 403)
}

func (o *SubscriptionGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubscriptionGetNotFound creates a SubscriptionGetNotFound with default headers values
func NewSubscriptionGetNotFound() *SubscriptionGetNotFound {
	return &SubscriptionGetNotFound{}
}

/*
SubscriptionGetNotFound describes a response with status code 404, with default header values.

Subscription not found
*/
type SubscriptionGetNotFound struct {
}

// IsSuccess returns true when this subscription get not found response has a 2xx status code
func (o *SubscriptionGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription get not found response has a 3xx status code
func (o *SubscriptionGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription get not found response has a 4xx status code
func (o *SubscriptionGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription get not found response has a 5xx status code
func (o *SubscriptionGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription get not found response a status code equal to that given
func (o *SubscriptionGetNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubscriptionGetNotFound) Error() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetNotFound ", 404)
}

func (o *SubscriptionGetNotFound) String() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetNotFound ", 404)
}

func (o *SubscriptionGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubscriptionGetInternalServerError creates a SubscriptionGetInternalServerError with default headers values
func NewSubscriptionGetInternalServerError() *SubscriptionGetInternalServerError {
	return &SubscriptionGetInternalServerError{}
}

/*
SubscriptionGetInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type SubscriptionGetInternalServerError struct {
}

// IsSuccess returns true when this subscription get internal server error response has a 2xx status code
func (o *SubscriptionGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription get internal server error response has a 3xx status code
func (o *SubscriptionGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription get internal server error response has a 4xx status code
func (o *SubscriptionGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription get internal server error response has a 5xx status code
func (o *SubscriptionGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this subscription get internal server error response a status code equal to that given
func (o *SubscriptionGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubscriptionGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetInternalServerError ", 500)
}

func (o *SubscriptionGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /subscription][%d] subscriptionGetInternalServerError ", 500)
}

func (o *SubscriptionGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
