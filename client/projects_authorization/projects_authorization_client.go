// Code generated by go-swagger; DO NOT EDIT.

package projects_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddGroupProjectAuthorization(params *AddGroupProjectAuthorizationParams, opts ...ClientOption) (*AddGroupProjectAuthorizationNoContent, error)

	AddUserProjectAuthorization(params *AddUserProjectAuthorizationParams, opts ...ClientOption) (*AddUserProjectAuthorizationNoContent, error)

	DeleteGroupProjectAuthorizations(params *DeleteGroupProjectAuthorizationsParams, opts ...ClientOption) (*DeleteGroupProjectAuthorizationsNoContent, error)

	DeleteUserProjectAuthorizations(params *DeleteUserProjectAuthorizationsParams, opts ...ClientOption) (*DeleteUserProjectAuthorizationsNoContent, error)

	GetGroupProjectAuthorizations(params *GetGroupProjectAuthorizationsParams, opts ...ClientOption) (*GetGroupProjectAuthorizationsOK, error)

	GetUserProjectAuthorizations(params *GetUserProjectAuthorizationsParams, opts ...ClientOption) (*GetUserProjectAuthorizationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddGroupProjectAuthorization adds group project authorization

Add group project authorization
*/
func (a *Client) AddGroupProjectAuthorization(params *AddGroupProjectAuthorizationParams, opts ...ClientOption) (*AddGroupProjectAuthorizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGroupProjectAuthorizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addGroupProjectAuthorization",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddGroupProjectAuthorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGroupProjectAuthorizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addGroupProjectAuthorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddUserProjectAuthorization adds user project authorization

Add user project authorization
*/
func (a *Client) AddUserProjectAuthorization(params *AddUserProjectAuthorizationParams, opts ...ClientOption) (*AddUserProjectAuthorizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserProjectAuthorizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserProjectAuthorization",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserProjectAuthorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserProjectAuthorizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserProjectAuthorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGroupProjectAuthorizations deletes group project authorization

Delete group project authorization
*/
func (a *Client) DeleteGroupProjectAuthorizations(params *DeleteGroupProjectAuthorizationsParams, opts ...ClientOption) (*DeleteGroupProjectAuthorizationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupProjectAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGroupProjectAuthorizations",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupProjectAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupProjectAuthorizationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGroupProjectAuthorizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserProjectAuthorizations deletes user project authorization

Delete user project authorization
*/
func (a *Client) DeleteUserProjectAuthorizations(params *DeleteUserProjectAuthorizationsParams, opts ...ClientOption) (*DeleteUserProjectAuthorizationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserProjectAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserProjectAuthorizations",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserProjectAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserProjectAuthorizationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserProjectAuthorizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGroupProjectAuthorizations gets group project authorizations

Get group project authorizations
*/
func (a *Client) GetGroupProjectAuthorizations(params *GetGroupProjectAuthorizationsParams, opts ...ClientOption) (*GetGroupProjectAuthorizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupProjectAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGroupProjectAuthorizations",
		Method:             "GET",
		PathPattern:        "/projects/{id}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupProjectAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupProjectAuthorizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupProjectAuthorizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserProjectAuthorizations gets user project authorizations

Get user project authorizations
*/
func (a *Client) GetUserProjectAuthorizations(params *GetUserProjectAuthorizationsParams, opts ...ClientOption) (*GetUserProjectAuthorizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProjectAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserProjectAuthorizations",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserProjectAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserProjectAuthorizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserProjectAuthorizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
