// Code generated by go-swagger; DO NOT EDIT.

package projects_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// AddGroupProjectAuthorizationReader is a Reader for the AddGroupProjectAuthorization structure.
type AddGroupProjectAuthorizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddGroupProjectAuthorizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddGroupProjectAuthorizationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddGroupProjectAuthorizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddGroupProjectAuthorizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddGroupProjectAuthorizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddGroupProjectAuthorizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddGroupProjectAuthorizationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddGroupProjectAuthorizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddGroupProjectAuthorizationNoContent creates a AddGroupProjectAuthorizationNoContent with default headers values
func NewAddGroupProjectAuthorizationNoContent() *AddGroupProjectAuthorizationNoContent {
	return &AddGroupProjectAuthorizationNoContent{}
}

/*
AddGroupProjectAuthorizationNoContent describes a response with status code 204, with default header values.

No Content
*/
type AddGroupProjectAuthorizationNoContent struct {
}

// IsSuccess returns true when this add group project authorization no content response has a 2xx status code
func (o *AddGroupProjectAuthorizationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add group project authorization no content response has a 3xx status code
func (o *AddGroupProjectAuthorizationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add group project authorization no content response has a 4xx status code
func (o *AddGroupProjectAuthorizationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add group project authorization no content response has a 5xx status code
func (o *AddGroupProjectAuthorizationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add group project authorization no content response a status code equal to that given
func (o *AddGroupProjectAuthorizationNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *AddGroupProjectAuthorizationNoContent) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationNoContent ", 204)
}

func (o *AddGroupProjectAuthorizationNoContent) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationNoContent ", 204)
}

func (o *AddGroupProjectAuthorizationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddGroupProjectAuthorizationBadRequest creates a AddGroupProjectAuthorizationBadRequest with default headers values
func NewAddGroupProjectAuthorizationBadRequest() *AddGroupProjectAuthorizationBadRequest {
	return &AddGroupProjectAuthorizationBadRequest{}
}

/*
AddGroupProjectAuthorizationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddGroupProjectAuthorizationBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add group project authorization bad request response has a 2xx status code
func (o *AddGroupProjectAuthorizationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add group project authorization bad request response has a 3xx status code
func (o *AddGroupProjectAuthorizationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add group project authorization bad request response has a 4xx status code
func (o *AddGroupProjectAuthorizationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add group project authorization bad request response has a 5xx status code
func (o *AddGroupProjectAuthorizationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add group project authorization bad request response a status code equal to that given
func (o *AddGroupProjectAuthorizationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AddGroupProjectAuthorizationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationBadRequest  %+v", 400, o.Payload)
}

func (o *AddGroupProjectAuthorizationBadRequest) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationBadRequest  %+v", 400, o.Payload)
}

func (o *AddGroupProjectAuthorizationBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddGroupProjectAuthorizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupProjectAuthorizationUnauthorized creates a AddGroupProjectAuthorizationUnauthorized with default headers values
func NewAddGroupProjectAuthorizationUnauthorized() *AddGroupProjectAuthorizationUnauthorized {
	return &AddGroupProjectAuthorizationUnauthorized{}
}

/*
AddGroupProjectAuthorizationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddGroupProjectAuthorizationUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add group project authorization unauthorized response has a 2xx status code
func (o *AddGroupProjectAuthorizationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add group project authorization unauthorized response has a 3xx status code
func (o *AddGroupProjectAuthorizationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add group project authorization unauthorized response has a 4xx status code
func (o *AddGroupProjectAuthorizationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add group project authorization unauthorized response has a 5xx status code
func (o *AddGroupProjectAuthorizationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add group project authorization unauthorized response a status code equal to that given
func (o *AddGroupProjectAuthorizationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AddGroupProjectAuthorizationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationUnauthorized  %+v", 401, o.Payload)
}

func (o *AddGroupProjectAuthorizationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationUnauthorized  %+v", 401, o.Payload)
}

func (o *AddGroupProjectAuthorizationUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddGroupProjectAuthorizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupProjectAuthorizationForbidden creates a AddGroupProjectAuthorizationForbidden with default headers values
func NewAddGroupProjectAuthorizationForbidden() *AddGroupProjectAuthorizationForbidden {
	return &AddGroupProjectAuthorizationForbidden{}
}

/*
AddGroupProjectAuthorizationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddGroupProjectAuthorizationForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add group project authorization forbidden response has a 2xx status code
func (o *AddGroupProjectAuthorizationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add group project authorization forbidden response has a 3xx status code
func (o *AddGroupProjectAuthorizationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add group project authorization forbidden response has a 4xx status code
func (o *AddGroupProjectAuthorizationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add group project authorization forbidden response has a 5xx status code
func (o *AddGroupProjectAuthorizationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add group project authorization forbidden response a status code equal to that given
func (o *AddGroupProjectAuthorizationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AddGroupProjectAuthorizationForbidden) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationForbidden  %+v", 403, o.Payload)
}

func (o *AddGroupProjectAuthorizationForbidden) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationForbidden  %+v", 403, o.Payload)
}

func (o *AddGroupProjectAuthorizationForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddGroupProjectAuthorizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupProjectAuthorizationNotFound creates a AddGroupProjectAuthorizationNotFound with default headers values
func NewAddGroupProjectAuthorizationNotFound() *AddGroupProjectAuthorizationNotFound {
	return &AddGroupProjectAuthorizationNotFound{}
}

/*
AddGroupProjectAuthorizationNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddGroupProjectAuthorizationNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add group project authorization not found response has a 2xx status code
func (o *AddGroupProjectAuthorizationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add group project authorization not found response has a 3xx status code
func (o *AddGroupProjectAuthorizationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add group project authorization not found response has a 4xx status code
func (o *AddGroupProjectAuthorizationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add group project authorization not found response has a 5xx status code
func (o *AddGroupProjectAuthorizationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add group project authorization not found response a status code equal to that given
func (o *AddGroupProjectAuthorizationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AddGroupProjectAuthorizationNotFound) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationNotFound  %+v", 404, o.Payload)
}

func (o *AddGroupProjectAuthorizationNotFound) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationNotFound  %+v", 404, o.Payload)
}

func (o *AddGroupProjectAuthorizationNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddGroupProjectAuthorizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupProjectAuthorizationConflict creates a AddGroupProjectAuthorizationConflict with default headers values
func NewAddGroupProjectAuthorizationConflict() *AddGroupProjectAuthorizationConflict {
	return &AddGroupProjectAuthorizationConflict{}
}

/*
AddGroupProjectAuthorizationConflict describes a response with status code 409, with default header values.

Authorization already exists
*/
type AddGroupProjectAuthorizationConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add group project authorization conflict response has a 2xx status code
func (o *AddGroupProjectAuthorizationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add group project authorization conflict response has a 3xx status code
func (o *AddGroupProjectAuthorizationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add group project authorization conflict response has a 4xx status code
func (o *AddGroupProjectAuthorizationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this add group project authorization conflict response has a 5xx status code
func (o *AddGroupProjectAuthorizationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this add group project authorization conflict response a status code equal to that given
func (o *AddGroupProjectAuthorizationConflict) IsCode(code int) bool {
	return code == 409
}

func (o *AddGroupProjectAuthorizationConflict) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationConflict  %+v", 409, o.Payload)
}

func (o *AddGroupProjectAuthorizationConflict) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationConflict  %+v", 409, o.Payload)
}

func (o *AddGroupProjectAuthorizationConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddGroupProjectAuthorizationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupProjectAuthorizationInternalServerError creates a AddGroupProjectAuthorizationInternalServerError with default headers values
func NewAddGroupProjectAuthorizationInternalServerError() *AddGroupProjectAuthorizationInternalServerError {
	return &AddGroupProjectAuthorizationInternalServerError{}
}

/*
AddGroupProjectAuthorizationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddGroupProjectAuthorizationInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add group project authorization internal server error response has a 2xx status code
func (o *AddGroupProjectAuthorizationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add group project authorization internal server error response has a 3xx status code
func (o *AddGroupProjectAuthorizationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add group project authorization internal server error response has a 4xx status code
func (o *AddGroupProjectAuthorizationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add group project authorization internal server error response has a 5xx status code
func (o *AddGroupProjectAuthorizationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add group project authorization internal server error response a status code equal to that given
func (o *AddGroupProjectAuthorizationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AddGroupProjectAuthorizationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationInternalServerError  %+v", 500, o.Payload)
}

func (o *AddGroupProjectAuthorizationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/groups/{groupId}][%d] addGroupProjectAuthorizationInternalServerError  %+v", 500, o.Payload)
}

func (o *AddGroupProjectAuthorizationInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddGroupProjectAuthorizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
