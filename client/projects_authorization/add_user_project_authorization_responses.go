// Code generated by go-swagger; DO NOT EDIT.

package projects_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bartsimp/talend-rest-go/models"
)

// AddUserProjectAuthorizationReader is a Reader for the AddUserProjectAuthorization structure.
type AddUserProjectAuthorizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserProjectAuthorizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddUserProjectAuthorizationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddUserProjectAuthorizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddUserProjectAuthorizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddUserProjectAuthorizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddUserProjectAuthorizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddUserProjectAuthorizationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddUserProjectAuthorizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddUserProjectAuthorizationNoContent creates a AddUserProjectAuthorizationNoContent with default headers values
func NewAddUserProjectAuthorizationNoContent() *AddUserProjectAuthorizationNoContent {
	return &AddUserProjectAuthorizationNoContent{}
}

/*
AddUserProjectAuthorizationNoContent describes a response with status code 204, with default header values.

No Content
*/
type AddUserProjectAuthorizationNoContent struct {
}

// IsSuccess returns true when this add user project authorization no content response has a 2xx status code
func (o *AddUserProjectAuthorizationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add user project authorization no content response has a 3xx status code
func (o *AddUserProjectAuthorizationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user project authorization no content response has a 4xx status code
func (o *AddUserProjectAuthorizationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add user project authorization no content response has a 5xx status code
func (o *AddUserProjectAuthorizationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add user project authorization no content response a status code equal to that given
func (o *AddUserProjectAuthorizationNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *AddUserProjectAuthorizationNoContent) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationNoContent ", 204)
}

func (o *AddUserProjectAuthorizationNoContent) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationNoContent ", 204)
}

func (o *AddUserProjectAuthorizationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUserProjectAuthorizationBadRequest creates a AddUserProjectAuthorizationBadRequest with default headers values
func NewAddUserProjectAuthorizationBadRequest() *AddUserProjectAuthorizationBadRequest {
	return &AddUserProjectAuthorizationBadRequest{}
}

/*
AddUserProjectAuthorizationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddUserProjectAuthorizationBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add user project authorization bad request response has a 2xx status code
func (o *AddUserProjectAuthorizationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user project authorization bad request response has a 3xx status code
func (o *AddUserProjectAuthorizationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user project authorization bad request response has a 4xx status code
func (o *AddUserProjectAuthorizationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user project authorization bad request response has a 5xx status code
func (o *AddUserProjectAuthorizationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add user project authorization bad request response a status code equal to that given
func (o *AddUserProjectAuthorizationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AddUserProjectAuthorizationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationBadRequest  %+v", 400, o.Payload)
}

func (o *AddUserProjectAuthorizationBadRequest) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationBadRequest  %+v", 400, o.Payload)
}

func (o *AddUserProjectAuthorizationBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserProjectAuthorizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserProjectAuthorizationUnauthorized creates a AddUserProjectAuthorizationUnauthorized with default headers values
func NewAddUserProjectAuthorizationUnauthorized() *AddUserProjectAuthorizationUnauthorized {
	return &AddUserProjectAuthorizationUnauthorized{}
}

/*
AddUserProjectAuthorizationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddUserProjectAuthorizationUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add user project authorization unauthorized response has a 2xx status code
func (o *AddUserProjectAuthorizationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user project authorization unauthorized response has a 3xx status code
func (o *AddUserProjectAuthorizationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user project authorization unauthorized response has a 4xx status code
func (o *AddUserProjectAuthorizationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user project authorization unauthorized response has a 5xx status code
func (o *AddUserProjectAuthorizationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add user project authorization unauthorized response a status code equal to that given
func (o *AddUserProjectAuthorizationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AddUserProjectAuthorizationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserProjectAuthorizationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserProjectAuthorizationUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserProjectAuthorizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserProjectAuthorizationForbidden creates a AddUserProjectAuthorizationForbidden with default headers values
func NewAddUserProjectAuthorizationForbidden() *AddUserProjectAuthorizationForbidden {
	return &AddUserProjectAuthorizationForbidden{}
}

/*
AddUserProjectAuthorizationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddUserProjectAuthorizationForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add user project authorization forbidden response has a 2xx status code
func (o *AddUserProjectAuthorizationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user project authorization forbidden response has a 3xx status code
func (o *AddUserProjectAuthorizationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user project authorization forbidden response has a 4xx status code
func (o *AddUserProjectAuthorizationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user project authorization forbidden response has a 5xx status code
func (o *AddUserProjectAuthorizationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add user project authorization forbidden response a status code equal to that given
func (o *AddUserProjectAuthorizationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AddUserProjectAuthorizationForbidden) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationForbidden  %+v", 403, o.Payload)
}

func (o *AddUserProjectAuthorizationForbidden) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationForbidden  %+v", 403, o.Payload)
}

func (o *AddUserProjectAuthorizationForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserProjectAuthorizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserProjectAuthorizationNotFound creates a AddUserProjectAuthorizationNotFound with default headers values
func NewAddUserProjectAuthorizationNotFound() *AddUserProjectAuthorizationNotFound {
	return &AddUserProjectAuthorizationNotFound{}
}

/*
AddUserProjectAuthorizationNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddUserProjectAuthorizationNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add user project authorization not found response has a 2xx status code
func (o *AddUserProjectAuthorizationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user project authorization not found response has a 3xx status code
func (o *AddUserProjectAuthorizationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user project authorization not found response has a 4xx status code
func (o *AddUserProjectAuthorizationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user project authorization not found response has a 5xx status code
func (o *AddUserProjectAuthorizationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add user project authorization not found response a status code equal to that given
func (o *AddUserProjectAuthorizationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AddUserProjectAuthorizationNotFound) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationNotFound  %+v", 404, o.Payload)
}

func (o *AddUserProjectAuthorizationNotFound) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationNotFound  %+v", 404, o.Payload)
}

func (o *AddUserProjectAuthorizationNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserProjectAuthorizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserProjectAuthorizationConflict creates a AddUserProjectAuthorizationConflict with default headers values
func NewAddUserProjectAuthorizationConflict() *AddUserProjectAuthorizationConflict {
	return &AddUserProjectAuthorizationConflict{}
}

/*
AddUserProjectAuthorizationConflict describes a response with status code 409, with default header values.

Authorization already exists
*/
type AddUserProjectAuthorizationConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add user project authorization conflict response has a 2xx status code
func (o *AddUserProjectAuthorizationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user project authorization conflict response has a 3xx status code
func (o *AddUserProjectAuthorizationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user project authorization conflict response has a 4xx status code
func (o *AddUserProjectAuthorizationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user project authorization conflict response has a 5xx status code
func (o *AddUserProjectAuthorizationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this add user project authorization conflict response a status code equal to that given
func (o *AddUserProjectAuthorizationConflict) IsCode(code int) bool {
	return code == 409
}

func (o *AddUserProjectAuthorizationConflict) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationConflict  %+v", 409, o.Payload)
}

func (o *AddUserProjectAuthorizationConflict) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationConflict  %+v", 409, o.Payload)
}

func (o *AddUserProjectAuthorizationConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserProjectAuthorizationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserProjectAuthorizationInternalServerError creates a AddUserProjectAuthorizationInternalServerError with default headers values
func NewAddUserProjectAuthorizationInternalServerError() *AddUserProjectAuthorizationInternalServerError {
	return &AddUserProjectAuthorizationInternalServerError{}
}

/*
AddUserProjectAuthorizationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddUserProjectAuthorizationInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add user project authorization internal server error response has a 2xx status code
func (o *AddUserProjectAuthorizationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user project authorization internal server error response has a 3xx status code
func (o *AddUserProjectAuthorizationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user project authorization internal server error response has a 4xx status code
func (o *AddUserProjectAuthorizationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add user project authorization internal server error response has a 5xx status code
func (o *AddUserProjectAuthorizationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add user project authorization internal server error response a status code equal to that given
func (o *AddUserProjectAuthorizationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AddUserProjectAuthorizationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationInternalServerError  %+v", 500, o.Payload)
}

func (o *AddUserProjectAuthorizationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /projects/{projectId}/users/{userId}][%d] addUserProjectAuthorizationInternalServerError  %+v", 500, o.Payload)
}

func (o *AddUserProjectAuthorizationInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserProjectAuthorizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
