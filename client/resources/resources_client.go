// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateResource(params *CreateResourceParams, opts ...ClientOption) (*CreateResourceOK, *CreateResourceCreated, error)

	DeleteResource(params *DeleteResourceParams, opts ...ClientOption) (*DeleteResourceNoContent, error)

	GetResource(params *GetResourceParams, opts ...ClientOption) (*GetResourceOK, error)

	GetResources(params *GetResourcesParams, opts ...ClientOption) (*GetResourcesOK, error)

	UpdateResource(params *UpdateResourceParams, opts ...ClientOption) (*UpdateResourceNoContent, error)

	UpdateResourceAttachment(params *UpdateResourceAttachmentParams, opts ...ClientOption) (*UpdateResourceAttachmentNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateResource creates a resource
*/
func (a *Client) CreateResource(params *CreateResourceParams, opts ...ClientOption) (*CreateResourceOK, *CreateResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createResource",
		Method:             "POST",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateResourceOK:
		return value, nil, nil
	case *CreateResourceCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteResource deletes a resource
*/
func (a *Client) DeleteResource(params *DeleteResourceParams, opts ...ClientOption) (*DeleteResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResource",
		Method:             "DELETE",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResource gets resource by id

Get Resource by id
*/
func (a *Client) GetResource(params *GetResourceParams, opts ...ClientOption) (*GetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResources gets resources
*/
func (a *Client) GetResources(params *GetResourcesParams, opts ...ClientOption) (*GetResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResources",
		Method:             "GET",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResource updates a resource
*/
func (a *Client) UpdateResource(params *UpdateResourceParams, opts ...ClientOption) (*UpdateResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResource",
		Method:             "PUT",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResourceAttachment updates a resource attachment
*/
func (a *Client) UpdateResourceAttachment(params *UpdateResourceAttachmentParams, opts ...ClientOption) (*UpdateResourceAttachmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceAttachmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResourceAttachment",
		Method:             "PUT",
		PathPattern:        "/resources/{id}/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateResourceAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourceAttachmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResourceAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
